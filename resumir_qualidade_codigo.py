#!/usr/bin/env python3
"""
Script para retomar a melhoria da qualidade do c√≥digo.
Baseado no checkpoint salvo em CHECKPOINT_QUALIDADE_CODIGO.md

Uso:
    python resumir_qualidade_codigo.py [--auto] [--report-only]
    
Op√ß√µes:
    --auto: Aplica corre√ß√µes autom√°ticas sem intera√ß√£o
    --report-only: Apenas gera relat√≥rio, n√£o aplica corre√ß√µes
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path

def run_command(cmd, description=""):
    """Executa comando e retorna resultado."""
    print(f"üîç {description}")
    print(f"Executando: {cmd}")
    
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ {description} - Sucesso")
        if result.stdout:
            print(result.stdout)
    else:
        print(f"‚ùå {description} - Erro")
        if result.stderr:
            print(result.stderr)
        if result.stdout:
            print(result.stdout)
    
    return result

def get_ruff_stats():
    """Obt√©m estat√≠sticas do ruff."""
    cmd = "python -m ruff check --statistics ."
    result = run_command(cmd, "Coletando estat√≠sticas do ruff")
    return result

def check_django():
    """Verifica se Django est√° funcionando."""
    cmd = "python manage.py check"
    result = run_command(cmd, "Verificando Django")
    return result.returncode == 0

def apply_automatic_fixes():
    """Aplica corre√ß√µes autom√°ticas."""
    cmd = "python -m ruff check --fix ."
    result = run_command(cmd, "Aplicando corre√ß√µes autom√°ticas")
    return result

def apply_unsafe_fixes():
    """Aplica corre√ß√µes n√£o seguras."""
    cmd = "python -m ruff check --fix --unsafe-fixes ."
    result = run_command(cmd, "Aplicando corre√ß√µes n√£o seguras")
    return result

def generate_report():
    """Gera relat√≥rio detalhado."""
    print("\n" + "="*60)
    print("üìä RELAT√ìRIO DE QUALIDADE DO C√ìDIGO")
    print("="*60)
    
    # Estat√≠sticas gerais
    stats_result = get_ruff_stats()
    
    # Status do Django
    django_ok = check_django()
    print(f"\nüåü Status Django: {'‚úÖ OK' if django_ok else '‚ùå ERRO'}")
    
    # Erros por categoria
    print("\nüìã Analisando erros por categoria...")
    categories = ["F401", "E402", "F405", "F403", "F811", "F821", "E722", "F841"]
    
    for category in categories:
        cmd = f"python -m ruff check --select {category} . | head -5"
        result = run_command(cmd, f"Verificando {category}")
    
    return stats_result, django_ok

def main():
    parser = argparse.ArgumentParser(description="Retoma melhoria da qualidade do c√≥digo")
    parser.add_argument("--auto", action="store_true", help="Aplica corre√ß√µes autom√°ticas")
    parser.add_argument("--report-only", action="store_true", help="Apenas gera relat√≥rio")
    parser.add_argument("--unsafe", action="store_true", help="Aplica corre√ß√µes n√£o seguras")
    
    args = parser.parse_args()
    
    print("üöÄ RETOMANDO MELHORIA DA QUALIDADE DO C√ìDIGO")
    print("="*50)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists("manage.py"):
        print("‚ùå Erro: Arquivo manage.py n√£o encontrado!")
        print("Execute este script no diret√≥rio raiz do projeto Django.")
        sys.exit(1)
    
    # Verificar se checkpoint existe
    if not os.path.exists("CHECKPOINT_QUALIDADE_CODIGO.md"):
        print("‚ùå Erro: Arquivo CHECKPOINT_QUALIDADE_CODIGO.md n√£o encontrado!")
        print("Execute a tarefa de melhoria primeiro.")
        sys.exit(1)
    
    # Gerar relat√≥rio inicial
    stats_result, django_ok = generate_report()
    
    if args.report_only:
        print("\n‚úÖ Relat√≥rio gerado com sucesso!")
        return
    
    if not django_ok:
        print("\n‚ùå Django n√£o est√° funcionando! Resolva os erros primeiro.")
        sys.exit(1)
    
    # Aplicar corre√ß√µes se solicitado
    if args.auto:
        print("\nüîß Aplicando corre√ß√µes autom√°ticas...")
        
        # Corre√ß√µes seguras
        fix_result = apply_automatic_fixes()
        
        # Corre√ß√µes n√£o seguras se solicitado
        if args.unsafe:
            print("\n‚ö†Ô∏è  Aplicando corre√ß√µes n√£o seguras...")
            unsafe_result = apply_unsafe_fixes()
        
        # Verificar Django novamente
        print("\nüîç Verificando Django ap√≥s corre√ß√µes...")
        django_ok_after = check_django()
        
        if not django_ok_after:
            print("‚ùå Django quebrou ap√≥s corre√ß√µes! Revers√£o recomendada.")
            sys.exit(1)
        
        # Relat√≥rio final
        print("\nüìä RELAT√ìRIO FINAL")
        print("="*30)
        final_stats, _ = generate_report()
        
        print("\n‚úÖ Corre√ß√µes aplicadas com sucesso!")
        print("üí° Pr√≥ximos passos:")
        print("   1. Revisar arquivos modificados")
        print("   2. Executar testes")
        print("   3. Continuar com corre√ß√µes manuais se necess√°rio")
    
    else:
        print("\nüí° Use --auto para aplicar corre√ß√µes autom√°ticas")
        print("üí° Use --report-only para apenas gerar relat√≥rio")
        print("üí° Use --unsafe para aplicar corre√ß√µes n√£o seguras")

if __name__ == "__main__":
    main()
