# C�digo da Funcionalidade: turmas
*Gerado automaticamente*



## turmas\admin.py

python
from django.contrib import admin
from .models import Turma, Matricula

@admin.register(Turma)
class TurmaAdmin(admin.ModelAdmin):
    list_display = ['nome', 'curso', 'data_inicio', 'data_fim', 'status', 'capacidade']
    list_filter = ['status', 'curso']
    search_fields = ['nome', 'curso__nome']
    date_hierarchy = 'data_inicio'

@admin.register(Matricula)
class MatriculaAdmin(admin.ModelAdmin):
    list_display = ['aluno', 'turma', 'data_matricula', 'status']
    list_filter = ['status', 'turma']
    search_fields = ['aluno__nome', 'turma__nome']
    date_hierarchy = 'data_matricula'





## turmas\apps.py

python
from django.apps import AppConfig


class TurmasConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'turmas'





## turmas\forms.py

python
from django import forms
from .models import Turma, Matricula
from importlib import import_module

def get_aluno_model():
    alunos_module = import_module('alunos.models')
    return getattr(alunos_module, 'Aluno')

def get_curso_model():
    cursos_module = import_module('cursos.models')
    return getattr(cursos_module, 'Curso')
class TurmaForm(forms.ModelForm):
    class Meta:
        model = Turma
        fields = ['nome', 'curso', 'data_inicio', 'data_fim', 'capacidade', 'status', 'descricao']
        widgets = {
            'data_inicio': forms.DateInput(attrs={'type': 'date'}),
            'data_fim': forms.DateInput(attrs={'type': 'date'}),
            'descricao': forms.Textarea(attrs={'rows': 3}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['curso'].queryset = get_curso_model().objects.all()

    def clean(self):
        cleaned_data = super().clean()
        data_inicio = cleaned_data.get('data_inicio')
        data_fim = cleaned_data.get('data_fim')
        if data_inicio and data_fim and data_inicio >= data_fim:
            raise forms.ValidationError("A data de in�cio deve ser anterior � data de fim.")
        return cleaned_data

class MatriculaForm(forms.ModelForm):
    class Meta:
        model = Matricula
        fields = ['aluno', 'status']

    def __init__(self, *args, **kwargs):
        turma = kwargs.pop('turma', None)
        super().__init__(*args, **kwargs)

        if turma:
            # Filtra alunos pelo curso da turma
            self.fields['aluno'].queryset = get_aluno_model().objects.filter(curso=turma.curso)
            self.fields['aluno'].queryset = self.fields['aluno'].queryset.filter(curso=turma.curso)




## turmas\models.py

python
from django.db import models
from django.core.exceptions import ValidationError
from django.utils import timezone

class Turma(models.Model):
    OPCOES_STATUS = [
        ('A', 'Ativa'),
        ('I', 'Inativa'),
        ('C', 'Conclu�da'),
    ]
    
    nome = models.CharField('Nome', max_length=100)
    curso = models.ForeignKey('cursos.Curso', on_delete=models.CASCADE, verbose_name='Curso')
    data_inicio = models.DateField('Data de In�cio')
    data_fim = models.DateField('Data de Fim')
    status = models.CharField('Status', max_length=1, choices=OPCOES_STATUS, default='A')
    capacidade = models.PositiveIntegerField('Capacidade de Alunos', default=30)
    descricao = models.TextField('Descri��o', blank=True)
    
    def __str__(self):
        return f"{self.nome} - {self.curso}"
    
    class Meta:
        verbose_name = 'Turma'
        verbose_name_plural = 'Turmas'
    
    def clean(self):
        if self.data_fim and self.data_inicio and self.data_fim < self.data_inicio:
            raise ValidationError({'data_fim': 'A data de t�rmino deve ser posterior � data de in�cio.'})
        
        # Atualiza status automaticamente com base nas datas
        hoje = timezone.now().date()
        if self.status == 'A' and self.data_fim < hoje:
            self.status = 'C'  # Marca como conclu�da se a data final j� passou
    
    @property
    def alunos_matriculados(self):
        return self.matriculas.count()
    
    @property
    def vagas_disponiveis(self):
        return self.capacidade - self.alunos_matriculados
    
    def tem_alunos(self):
        """Verifica se a turma tem pelo menos um aluno matriculado"""
        return self.alunos_matriculados > 0
    
    def save(self, *args, **kwargs):
        # Se for uma turma nova, permitimos salvar sem alunos inicialmente
        if not self.pk:
            super().save(*args, **kwargs)
        else:
            # Para turmas existentes, verificamos se h� pelo menos um aluno
            if not self.tem_alunos():
                raise ValidationError("Uma turma deve ter pelo menos um aluno matriculado.")
            super().save(*args, **kwargs)


class Matricula(models.Model):
    OPCOES_STATUS = [
        ('A', 'Ativa'),
        ('C', 'Cancelada'),
        ('F', 'Finalizada'),
    ]
    
    aluno = models.ForeignKey('alunos.Aluno', on_delete=models.CASCADE, 
                             related_name='matriculas', verbose_name='Aluno')
    turma = models.ForeignKey(Turma, on_delete=models.CASCADE, 
                             related_name='matriculas', verbose_name='Turma')
    data_matricula = models.DateField('Data da Matr�cula', auto_now_add=True)
    status = models.CharField('Status', max_length=1, choices=OPCOES_STATUS, default='A')
    
    class Meta:
        verbose_name = 'Matr�cula'
        verbose_name_plural = 'Matr�culas'
        unique_together = ['aluno', 'turma']
    
    def __str__(self):
        return f"{self.aluno.nome} - {self.turma.nome}"
    
    def clean(self):
        # Check if class is active
        if self.turma.status != 'A':
            raise ValidationError({'turma': _('N�o � poss�vel matricular em uma turma inativa ou conclu�da.')})
        
        # Check if there are available spots
        if not self.pk and self.turma.vagas_disponiveis <= 0:  # Only for new enrollments
            raise ValidationError({'turma': _('N�o h� vagas dispon�veis nesta turma.')})
        
        # Check if student's course matches the class's course
        if self.aluno.curso != self.turma.curso:
            raise ValidationError({'aluno': _('O aluno deve pertencer ao mesmo curso da turma.')})




## turmas\tests.py

python
from django.test import TestCase

# Create your tests here.





## turmas\urls.py

python
from django.urls import path
from . import views

app_name = 'turmas'

urlpatterns = [
    path('', views.listar_turmas, name='listar_turmas'),
    path('criar/', views.criar_turma, name='criar_turma'),
    path('<int:id>/', views.detalhar_turma, name='detalhar_turma'),
    path('<int:id>/editar/', views.editar_turma, name='editar_turma'),
    path('<int:id>/excluir/', views.excluir_turma, name='excluir_turma'),
    path('<int:turma_id>/matricular/', views.matricular_aluno, name='matricular_aluno'),
    path('<int:turma_id>/alunos/', views.listar_alunos_matriculados, name='listar_alunos_matriculados'),
    path('<int:turma_id>/alunos/<int:aluno_id>/cancelar/', views.cancelar_matricula, name='cancelar_matricula'),
]





## turmas\views.py

python
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.db.models import Q, Count
from django.core.paginator import Paginator
from django.core.exceptions import ValidationError
from importlib import import_module
from .models import Turma, Matricula
from .forms import TurmaForm, MatriculaForm

# Fun��o para importar dinamicamente o modelo Aluno
def get_aluno_model():
    alunos_module = import_module('alunos.models')
    return getattr(alunos_module, 'Aluno')
@login_required
def listar_turmas(request):
    query = request.GET.get('q')
    curso_id = request.GET.get('curso')
    status = request.GET.get('status')

    turmas = Turma.objects.all().select_related('curso')

    if query:
        turmas = turmas.filter(
            Q(nome__icontains=query) | 
            Q(curso__nome__icontains=query)
        )

    if curso_id:
        turmas = turmas.filter(curso_id=curso_id)

    if status:
        turmas = turmas.filter(status=status)

    # Obt�m todos os cursos para o filtro dropdown
    Curso = import_module('cursos.models').Curso
    cursos = Curso.objects.all()

    paginator = Paginator(turmas, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'turmas': page_obj,
        'query': query,
        'cursos': cursos,
        'curso_selecionado': curso_id,
        'opcoes_status': Turma.OPCOES_STATUS,
        'status_selecionado': status
    }

    return render(request, 'turmas/listar_turmas.html', context)

@login_required
def criar_turma(request):
    if request.method == 'POST':
        form = TurmaForm(request.POST)
        if form.is_valid():
            turma = form.save()
            messages.success(request, 'Turma criada com sucesso!')
            return redirect('turmas:listar_turmas')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = TurmaForm()

    return render(request, 'turmas/criar_turma.html', {'form': form})

@login_required
def detalhar_turma(request, id):
    turma = get_object_or_404(Turma, id=id)
    matriculas = Matricula.objects.filter(turma=turma).select_related('aluno')

    context = {
        'turma': turma,
        'matriculas': matriculas,
        'total_matriculas': matriculas.count(),
        'vagas_disponiveis': turma.capacidade - matriculas.count()
    }

    return render(request, 'turmas/detalhar_turma.html', context)

@login_required
def editar_turma(request, id):
    turma = get_object_or_404(Turma, id=id)
    if request.method == 'POST':
        form = TurmaForm(request.POST, instance=turma)
        if form.is_valid():
            form.save()
            messages.success(request, 'Turma atualizada com sucesso!')
            return redirect('turmas:listar_turmas')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = TurmaForm(instance=turma)
    return render(request, 'turmas/editar_turma.html', {'form': form, 'turma': turma})

@login_required
def excluir_turma(request, id):
    turma = get_object_or_404(Turma, id=id)

    if request.method == 'POST':
        if turma.matriculas.exists():
            messages.error(request, 'N�o � poss�vel excluir uma turma com alunos matriculados.')
            return redirect('turmas:detalhar_turma', id=turma.id)

        turma.delete()
        messages.success(request, 'Turma exclu�da com sucesso!')
        return redirect('turmas:listar_turmas')

    return render(request, 'turmas/excluir_turma.html', {'turma': turma})

@login_required
def matricular_aluno(request, turma_id):
    turma = get_object_or_404(Turma, id=turma_id)
    Aluno = get_aluno_model()

    if request.method == 'POST':
        form = MatriculaForm(request.POST)
        if form.is_valid():
            aluno = form.cleaned_data['aluno']
            if Matricula.objects.filter(turma=turma, aluno=aluno).exists():
                messages.error(request, 'Este aluno j� est� matriculado nesta turma.')
            else:
                Matricula.objects.create(turma=turma, aluno=aluno)
                messages.success(request, 'Aluno matriculado com sucesso!')
            return redirect('turmas:detalhar_turma', id=turma.id)
    else:
        form = MatriculaForm()

    context = {
        'form': form,
        'turma': turma,
    }
    return render(request, 'turmas/matricular_aluno.html', context)

@login_required
def cancelar_matricula(request, turma_id, aluno_id):
    matricula = get_object_or_404(Matricula, turma_id=turma_id, aluno_id=aluno_id)

    if request.method == 'POST':
        matricula.delete()
        messages.success(request, 'Matr�cula cancelada com sucesso!')
        return redirect('turmas:detalhar_turma', id=turma_id)

    return render(request, 'turmas/cancelar_matricula.html', {'matricula': matricula})

@login_required
def listar_alunos_matriculados(request, turma_id):
    """Lista todos os alunos matriculados em uma turma"""
    turma = get_object_or_404(Turma, pk=turma_id)
    alunos = turma.alunos.all()
    
    return render(request, 'turmas/listar_alunos_matriculados.html', {
        'turma': turma,
        'alunos': alunos,
        'titulo': f'Alunos Matriculados na Turma: {turma.nome}'
    })

# Views para Cursos (mantidas para compatibilidade)
def listar_cursos(request):
    cursos = Curso.objects.all()
    return render(request, 'turmas/listar_cursos.html', {'cursos': cursos})

def criar_curso(request):
    if request.method == 'POST':
        form = CursoForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Curso criado com sucesso!')
            return redirect('turmas:listar_cursos')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = CursoForm()
    return render(request, 'turmas/criar_curso.html', {'form': form})

def detalhar_curso(request, id):
    curso = get_object_or_404(Curso, id=id)
    return render(request, 'turmas/detalhar_curso.html', {'curso': curso})

def editar_curso(request, id):
    curso = get_object_or_404(Curso, id=id)
    if request.method == 'POST':
        form = CursoForm(request.POST, instance=curso)
        if form.is_valid():
            form.save()
            messages.success(request, 'Curso atualizado com sucesso!')
            return redirect('turmas:listar_cursos')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = CursoForm(instance=curso)
    return render(request, 'turmas/editar_curso.html', {'form': form, 'curso': curso})

def excluir_curso(request, id):
    curso = get_object_or_404(Curso, id=id)
    if request.method == 'POST':
        curso.delete()
        messages.success(request, 'Curso exclu�do com sucesso!')
        return redirect('turmas:listar_cursos')
    return render(request, 'turmas/excluir_curso.html', {'curso': curso})




## turmas\migrations\0001_initial.py

python
# Generated by Django 5.1.7 on 2025-03-25 23:45

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('alunos', '__first__'),
        ('cursos', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Turma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('data_inicio', models.DateField(verbose_name='Data de In�cio')),
                ('data_fim', models.DateField(verbose_name='Data de Fim')),
                ('status', models.CharField(choices=[('A', 'Ativa'), ('I', 'Inativa'), ('C', 'Conclu�da')], default='A', max_length=1, verbose_name='Status')),
                ('capacidade', models.PositiveIntegerField(default=30, verbose_name='Capacidade de Alunos')),
                ('descricao', models.TextField(blank=True, verbose_name='Descri��o')),
                ('curso', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cursos.curso', verbose_name='Curso')),
            ],
            options={
                'verbose_name': 'Turma',
                'verbose_name_plural': 'Turmas',
            },
        ),
        migrations.CreateModel(
            name='Matricula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_matricula', models.DateField(auto_now_add=True, verbose_name='Data da Matr�cula')),
                ('status', models.CharField(choices=[('A', 'Ativa'), ('C', 'Cancelada'), ('F', 'Finalizada')], default='A', max_length=1, verbose_name='Status')),
                ('aluno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matriculas', to='alunos.aluno', verbose_name='Aluno')),
                ('turma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matriculas', to='turmas.turma', verbose_name='Turma')),
            ],
            options={
                'verbose_name': 'Matr�cula',
                'verbose_name_plural': 'Matr�culas',
                'unique_together': {('aluno', 'turma')},
            },
        ),
    ]





## turmas\templates\turmas\cancelar_matricula.html

html
{% extends 'base.html' %}

{% block title %}Cancelar Matr�cula{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Cancelar Matr�cula</h1>
    
    {% if ultima_matricula %}
        <div class="alert alert-danger">
            <p>N�o � poss�vel cancelar esta matr�cula porque � a �nica matr�cula ativa na turma.</p>
            <p>Uma turma deve ter pelo menos um aluno matriculado.</p>
        </div>
        <a href="{% url 'turmas:detalhar_turma' matricula.turma.id %}" class="btn btn-primary">Voltar para Detalhes da Turma</a>
    {% else %}
        <div class="alert alert-warning">
            <p>Voc� tem certeza que deseja cancelar a matr�cula de "{{ matricula.aluno.nome }}" na turma "{{ matricula.turma.nome }}"?</p>
        </div>
        
        <form method="post">
            {% csrf_token %}
            <button type="submit" class="btn btn-danger">Confirmar Cancelamento</button>
            <a href="{% url 'turmas:detalhar_turma' matricula.turma.id %}" class="btn btn-secondary">Cancelar</a>
        </form>
    {% endif %}
</div>
{% endblock %}





## turmas\templates\turmas\confirmar_cancelamento_matricula.html

html
{% extends 'core/base.html' %}

{% block title %}{{ titulo }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-danger text-white">
            <h4>Confirmar Cancelamento de Matr�cula</h4>
        </div>
        <div class="card-body">
            <p class="lead">Voc� tem certeza que deseja cancelar a matr�cula do aluno <strong>{{ aluno.nome }}</strong> na turma <strong>{{ turma.nome }}</strong>?</p>
            <p>Esta a��o n�o poder� ser desfeita.</p>
            
            <div class="mt-4">
                <form method="post">
                    {% csrf_token %}
                    <div class="d-flex justify-content-between">
                        <a href="{% url 'turmas:listar_alunos_matriculados' turma.id %}" class="btn btn-secondary">Cancelar</a>
                        <button type="submit" class="btn btn-danger">Confirmar Cancelamento</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <a href="javascript:history.back()" class="btn btn-secondary mt-3">Voltar</a>
</div>
{% endblock %}





## turmas\templates\turmas\criar_turma.html

html
{% extends 'base.html' %}

{% block title %}Criar Nova Turma{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Criar Nova Turma</h1>

    <form method="post">
        {% csrf_token %}

        {% for field in form %}
            <div class="form-group">
                <label for="{{ field.id_for_label }}">{{ field.label }}</label>
                {{ field }}
                {% if field.help_text %}
                    <small class="form-text text-muted">{{ field.help_text }}</small>
                {% endif %}
                {% for error in field.errors %}
                    <div class="alert alert-danger">{{ error }}</div>
                {% endfor %}
            </div>
        {% endfor %}

        <button type="submit" class="btn btn-primary">Salvar</button>
        <a href="{% url 'turmas:listar_turmas' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}






## turmas\templates\turmas\detalhar_turma.html

html
{% extends 'base.html' %}

{% block title %}Detalhes da Turma: {{ turma.nome }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Detalhes da Turma: {{ turma.nome }}</h1>

    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Informa��es da Turma</h5>
            <p><strong>Curso:</strong> {{ turma.curso.nome }}</p>
            <p><strong>Data de In�cio:</strong> {{ turma.data_inicio|date:"d/m/Y" }}</p>
            <p><strong>Data de Fim:</strong> {{ turma.data_fim|date:"d/m/Y" }}</p>
            <p><strong>Status:</strong> {{ turma.get_status_display }}</p>
            <p><strong>Capacidade:</strong> {{ turma.capacidade }}</p>
            <p><strong>Alunos Matriculados:</strong> {{ total_matriculas }}</p>
            <p><strong>Vagas Dispon�veis:</strong> {{ vagas_disponiveis }}</p>
            <p><strong>Descri��o:</strong> {{ turma.descricao|default:"N�o informada" }}</p>
        </div>
    </div>

    <h2>Alunos Matriculados</h2>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th>Matr�cula</th>
                    <th>A��es</th>
                </tr>
            </thead>
            <tbody>
                {% for matricula in matriculas %}
                <tr>
                    <td>{{ matricula.aluno.nome }}</td>
                    <td>{{ matricula.aluno.matricula }}</td>
                    <td>
                        <a href="{% url 'turmas:cancelar_matricula' turma.id matricula.aluno.id %}" class="btn btn-sm btn-danger">Cancelar Matr�cula</a>
                    </td>
                </tr>
                {% empty %}
                <tr>
                    <td colspan="3" class="text-center">Nenhum aluno matriculado nesta turma.</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div class="mt-4">
        <a href="{% url 'turmas:matricular_aluno' turma.id %}" class="btn btn-primary">Matricular Novo Aluno</a>
        <a href="{% url 'turmas:editar_turma' turma.id %}" class="btn btn-warning">Editar Turma</a>
        <a href="{% url 'turmas:listar_turmas' %}" class="btn btn-secondary">Voltar para Lista de Turmas</a>
    </div>
</div>
{% endblock %}






## turmas\templates\turmas\detalhes_turma.html

html
{% extends 'base.html' %}

{% block content %}
<!-- Existing content -->

<a href="javascript:history.back()" class="back-button">Voltar</a>
{% endblock %}





## turmas\templates\turmas\editar_turma.html

html
{% extends 'base.html' %}

{% block title %}Editar Turma: {{ turma.nome }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Editar Turma: {{ turma.nome }}</h1>

    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    <form method="post">
        {% csrf_token %}

        {% for field in form %}
            <div class="form-group">
                <label for="{{ field.id_for_label }}">{{ field.label }}</label>
                {{ field }}
                {% if field.help_text %}
                    <small class="form-text text-muted">{{ field.help_text }}</small>
                {% endif %}
                {% for error in field.errors %}
                    <div class="alert alert-danger">{{ error }}</div>
                {% endfor %}
            </div>
        {% endfor %}

        <div class="mt-4">
            <button type="submit" class="btn btn-primary">Salvar Altera��es</button>
            <a href="{% url 'turmas:detalhar_turma' turma.id %}" class="btn btn-secondary">Cancelar</a>
        </div>
    </form>
</div>
{% endblock %}






## turmas\templates\turmas\excluir_turma.html

html
{% extends 'base.html' %}

{% block title %}Excluir Turma: {{ turma.nome }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Excluir Turma: {{ turma.nome }}</h1>

    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    <div class="alert alert-danger">
        <p>Voc� tem certeza que deseja excluir esta turma?</p>
        <p><strong>Aten��o:</strong> Esta a��o n�o pode ser desfeita.</p>
    </div>

    <form method="post">
        {% csrf_token %}
        <div class="mt-4">
            <button type="submit" class="btn btn-danger">Confirmar Exclus�o</button>
            <a href="{% url 'turmas:detalhar_turma' turma.id %}" class="btn btn-secondary">Cancelar</a>
        </div>
    </form>
</div>
{% endblock %}






## turmas\templates\turmas\listar_alunos_matriculados.html

html
{% extends 'core/base.html' %}

{% block title %}{{ titulo }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>{{ titulo }}</h1>
    
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Informa��es da Turma</h5>
        </div>
        <div class="card-body">
            <p><strong>Nome da Turma:</strong> {{ turma.nome }}</p>
            <p><strong>Curso:</strong> {{ turma.curso.nome }}</p>
            <p><strong>Per�odo:</strong> {{ turma.data_inicio|date:"d/m/Y" }} a {{ turma.data_fim|date:"d/m/Y" }}</p>
            <p><strong>Total de Alunos:</strong> {{ turma.total_alunos }} de {{ turma.vagas }}</p>
        </div>
    </div>
    
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Alunos Matriculados</h5>
            <a href="{% url 'turmas:matricular_aluno' turma.id %}" class="btn btn-primary btn-sm">
                <i class="fas fa-plus"></i> Matricular Aluno
            </a>
        </div>
        <div class="card-body">
            {% if alunos %}
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Nome</th>
                                <th>Matr�cula</th>
                                <th>Curso</th>
                                <th>A��es</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for aluno in alunos %}
                                <tr>
                                    <td>{{ aluno.nome }}</td>
                                    <td>{{ aluno.matricula }}</td>
                                    <td>{{ aluno.curso.nome }}</td>
                                    <td>
                                        <a href="{% url 'alunos:detalhar_aluno' aluno.id %}" class="btn btn-info btn-sm">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="{% url 'turmas:cancelar_matricula' turma.id aluno.id %}" class="btn btn-danger btn-sm">
                                            <i class="fas fa-times"></i> Cancelar Matr�cula
                                        </a>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <p>Nenhum aluno matriculado nesta turma.</p>
            {% endif %}
        </div>
    </div>
    
    <a href="{% url 'turmas:detalhes_turma' turma.id %}" class="btn btn-secondary mt-3">Voltar para Detalhes da Turma</a>
</div>
{% endblock %}





## turmas\templates\turmas\listar_turmas.html

html
{% extends 'base.html' %}

{% block title %}Lista de Turmas{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Lista de Turmas</h1>

    <form method="get" class="mb-3">
        <div class="row">
            <div class="col-md-4">
                <input type="text" name="q" class="form-control" placeholder="Buscar turmas..." value="{{ query }}">
            </div>
            <div class="col-md-3">
                <select name="curso" class="form-control">
                    <option value="">Todos os cursos</option>
                    {% for curso in cursos %}
                        <option value="{{ curso.id }}" {% if curso.id|stringformat:"s" == curso_selecionado %}selected{% endif %}>
                            {{ curso.nome }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-3">
                <select name="status" class="form-control">
                    <option value="">Todos os status</option>
                    {% for status_value, status_label in opcoes_status %}
                        <option value="{{ status_value }}" {% if status_value == status_selecionado %}selected{% endif %}>
                            {{ status_label }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-2">
                <button type="submit" class="btn btn-primary">Filtrar</button>
            </div>
        </div>
    </form>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Curso</th>
                <th>Data de In�cio</th>
                <th>Data de Fim</th>
                <th>Status</th>
                <th>A��es</th>
            </tr>
        </thead>
        <tbody>
            {% for turma in turmas %}
            <tr>
                <td>{{ turma.nome }}</td>
                <td>{{ turma.curso.nome }}</td>
                <td>{{ turma.data_inicio|date:"d/m/Y" }}</td>
                <td>{{ turma.data_fim|date:"d/m/Y" }}</td>
                <td>{{ turma.get_status_display }}</td>
                <td>
                    <a href="{% url 'turmas:detalhar_turma' turma.id %}" class="btn btn-sm btn-info">Detalhes</a>
                    <a href="{% url 'turmas:editar_turma' turma.id %}" class="btn btn-sm btn-warning">Editar</a>
                    <a href="{% url 'turmas:excluir_turma' turma.id %}" class="btn btn-sm btn-danger">Excluir</a>
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="6">Nenhuma turma encontrada.</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    {% if turmas.has_other_pages %}
    <nav>
        <ul class="pagination">
            {% if turmas.has_previous %}
                <li class="page-item"><a class="page-link" href="?page={{ turmas.previous_page_number }}">Anterior</a></li>
            {% endif %}

            {% for i in turmas.paginator.page_range %}
                {% if turmas.number == i %}
                    <li class="page-item active"><span class="page-link">{{ i }}</span></li>
                {% else %}
                    <li class="page-item"><a class="page-link" href="?page={{ i }}">{{ i }}</a></li>
                {% endif %}
            {% endfor %}

            {% if turmas.has_next %}
                <li class="page-item"><a class="page-link" href="?page={{ turmas.next_page_number }}">Pr�xima</a></li>
            {% endif %}
        </ul>
    </nav>
    {% endif %}

    <a href="{% url 'turmas:criar_turma' %}" class="btn btn-primary">Criar Nova Turma</a>
</div>
{% endblock %}





## turmas\templates\turmas\matricular_aluno.html

html
{% extends 'core/base.html' %}

{% block title %}{{ titulo }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>{{ titulo }}</h1>
    
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Informa��es da Turma</h5>
        </div>
        <div class="card-body">
            <p><strong>Nome da Turma:</strong> {{ turma.nome }}</p>
            <p><strong>Curso:</strong> {{ turma.curso.nome }}</p>
            <p><strong>Per�odo:</strong> {{ turma.data_inicio|date:"d/m/Y" }} a {{ turma.data_fim|date:"d/m/Y" }}</p>
            <p><strong>Vagas Dispon�veis:</strong> {{ turma.vagas_disponiveis }} de {{ turma.vagas }}</p>
        </div>
    </div>
    
    <div class="card mt-4">
        <div class="card-header">
            <h5 class="mb-0">Selecionar Aluno</h5>
        </div>
        <div class="card-body">
            <form method="post">
                {% csrf_token %}
                
                <div class="mb-3">
                    <label for="{{ form.aluno.id_for_label }}" class="form-label">Aluno</label>
                    {{ form.aluno }}
                    {% if form.aluno.errors %}
                        <div class="text-danger">{{ form.aluno.errors }}</div>
                    {% endif %}
                </div>
                
                <div class="d-flex justify-content-between">
                    <a href="{% url 'turmas:detalhes_turma' turma.id %}" class="btn btn-secondary">Cancelar</a>
                    <button type="submit" class="btn btn-primary">Matricular</button>
                </div>
            </form>
        </div>
    </div>
    
    <a href="javascript:history.back()" class="btn btn-secondary mt-3">Voltar</a>
</div>
{% endblock %}





## turmas\templates\turmas\turma_form.html

html
{% extends 'base.html' %}

{% block content %}
  <h1>Criar Turma</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Criar</button>
  </form>
{% endblock %}




## turmas\tests\test_models.py

python
from django.test import TestCase
from turmas.models import Turma
from cursos.models import Curso
from datetime import date

class TurmaModelTest(TestCase):
    def setUp(self):
        self.curso = Curso.objects.create(
            nome='Curso de Teste',
            descricao='Descri��o do curso de teste'
        )

    def test_criar_turma(self):
        turma = Turma.objects.create(
            nome='Turma de Teste',
            curso=self.curso,
            data_inicio=date(2023, 10, 1),
            data_fim=date(2023, 12, 31)
        )

        self.assertEqual(turma.nome, 'Turma de Teste')
        self.assertEqual(turma.curso, self.curso)
        self.assertEqual(str(turma), 'Turma de Teste - Curso de Teste')

class CargoAdministrativoTest(TestCase):
    def test_criar_cargo(self):
        cargo = CargoAdministrativo.objects.create(
            codigo_cargo='CARGO001',
            nome='Coordenador',
            descricao='Respons�vel pela coordena��o do curso.'
        )
        self.assertEqual(cargo.nome, 'Coordenador')
        self.assertEqual(cargo.codigo_cargo, 'CARGO001')




## turmas\tests\test_views.py

python
from django.test import TestCase, Client
from django.urls import reverse
from turmas.models import Turma
from cursos.models import Curso
from datetime import date

class TurmaViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.curso = Curso.objects.create(
            nome='Curso de Teste',
            descricao='Descri��o do curso de teste'
        )
        self.turma = Turma.objects.create(
            nome='Turma de Teste',
            curso=self.curso,
            data_inicio=date(2023, 10, 1),
            data_fim=date(2023, 12, 31)
        )

    def test_listar_turmas(self):
        response = self.client.get(reverse('turmas:turma_list'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Turma de Teste')
        self.assertContains(response, 'Curso de Teste')

    def test_criar_turma(self):
        response = self.client.post(reverse('turmas:turma_create'), {
            'nome': 'Nova Turma',
            'curso': self.curso.id,
            'data_inicio': '2024-01-01',
            'data_fim': '2024-03-31'
        })
        self.assertEqual(response.status_code, 302)  # Redirect after successful creation
        self.assertTrue(Turma.objects.filter(nome='Nova Turma').exists())

    def test_atualizar_turma(self):
        response = self.client.post(reverse('turmas:turma_update', args=[self.turma.id]), {
            'nome': 'Turma Atualizada',
            'curso': self.curso.id,
            'data_inicio': '2023-11-01',
            'data_fim': '2024-01-31'
        })
        self.assertEqual(response.status_code, 302)  # Redirect after successful update
        self.turma.refresh_from_db()
        self.assertEqual(self.turma.nome, 'Turma Atualizada')

    def test_deletar_turma(self):
        response = self.client.post(reverse('turmas:turma_delete', args=[self.turma.id]))
        self.assertEqual(response.status_code, 302)  # Redirect after successful deletion
        self.assertFalse(Turma.objects.filter(id=self.turma.id).exists())

class CursoViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.curso = Curso.objects.create(
            nome='Curso de Teste',
            descricao='Descri��o do curso de teste'
        )

    def test_listar_cursos(self):
        response = self.client.get(reverse('turmas:curso_list'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Curso de Teste')

    def test_criar_curso(self):
        response = self.client.post(reverse('turmas:curso_create'), {
            'nome': 'Novo Curso',
            'descricao': 'Descri��o do novo curso'
        })
        self.assertEqual(response.status_code, 302)  # Redirect after successful creation
        self.assertTrue(Curso.objects.filter(nome='Novo Curso').exists())

    def test_atualizar_curso(self):
        response = self.client.post(reverse('turmas:curso_update', args=[self.curso.id]), {
            'nome': 'Curso Atualizado',
            'descricao': 'Descri��o atualizada'
        })
        self.assertEqual(response.status_code, 302)  # Redirect after successful update
        self.curso.refresh_from_db()
        self.assertEqual(self.curso.nome, 'Curso Atualizado')

    def test_deletar_curso(self):
        response = self.client.post(reverse('turmas:curso_delete', args=[self.curso.id]))
        self.assertEqual(response.status_code, 302)  # Redirect after successful deletion
        self.assertFalse(Curso.objects.filter(id=self.curso.id).exists())



# C�digo da Funcionalidade: templates
*Gerado automaticamente*



## templates\base.html

html
{% load static %}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Sistema{% endblock %}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="{% url 'core:pagina_inicial' %}">OMAUM</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" title="Menu de navega��o">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    {% if user.is_authenticated %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'alunos:listar' %}">Alunos</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'atividades:atividade_academica_list' %}">Atividades Acad�micas</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'atividades:atividade_ritualistica_list' %}">Atividades Ritual�sticas</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'turmas:listar_turmas' %}">Turmas</a>
                          </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/presencas/lista/">Presen�as</a>
                        </li>
                        <!-- Add more navigation items for other functionalities -->
                        {% if user.is_staff %}
                            <li class="nav-item">
                                <a class="nav-link" href="{% url 'core:painel_controle' %}">Painel de Controle</a>
                            </li>
                        {% endif %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'core:sair' %}">Sair</a>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'core:entrar' %}">Entrar</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>
    <div class="container mt-4">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endif %}
               
        {% block content %}{% endblock %}
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    {% block extra_js %}{% endblock %}
    <!-- Adicione esta linha antes do fechamento do body -->
    <script src="{% static 'js/csrf_refresh.js' %}"></script>
</body>
</html>





## templates\base_old.html

html
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Sistema de Gest�o de Iniciados da OmAum{% endblock %}</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" rel="stylesheet">
    {% block extra_css %}{% endblock %}
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="/">Sistema de Gest�o de Iniciados da OmAum</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'turmas:listar_turmas' %}">Turmas</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'cursos:listar_cursos' %}">Cursos</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'cargos:listar_cargos' %}">Cargos</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'frequencias:listar_frequencias' %}">Frequ�ncias</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'iniciacoes:listar_iniciacoes' %}">Inicia��es</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'punicoes:listar_punicoes' %}">Puni��es</a>
                </li>
                <!-- Adicione mais itens de menu conforme necess�rio -->
            </ul>
        </div>
    </nav>

    <main class="container mt-4">
        {% block content %}{% endblock %}
    </main>

    <footer class="mt-5 py-3 bg-light text-center">
        <div class="container">
            <span class="text-muted">� 2024 Sistema de Gest�o de Iniciados da OmAum. Todos os direitos reservados.</span>
        </div>
    </footer>

    <!-- Bootstrap JS, Popper.js, and jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>





## templates\csrf_test.html

html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSRF Test</title>
</head>
<body>
    <h1>CSRF Test</h1>
    <form method="post">
        {% csrf_token %}
        <input type="submit" value="Test CSRF">
    </form>
    <script>
        console.log("CSRF cookie:", document.cookie.split(';').find(cookie => cookie.trim().startsWith('csrftoken=')));
    </script>
</body>
</html>






## templates\home_old.html

html
{% extends 'base.html' %}

{% block title %} Sistema de Gest�o de Iniciados da OmAum {% endblock %}

{% block content %}
<div class="container">
    <div class="jumbotron mt-4">
        <h1 class="display-4">Welcome to OMAUM</h1>
        <p class="lead">Your platform for courses and learning.</p>
        <hr class="my-4">
        <p>Get started by exploring our courses.</p>
        
        <a class="btn btn-primary btn-lg" href="{% url 'cursos:listar_cursos' %}" role="button">View Courses</a>
        
        {% if not user.is_authenticated %}
            <a class="btn btn-outline-secondary btn-lg" href="{% url 'login' %}" role="button">Login</a>
        {% endif %}
    </div>
</div>
{% endblock %}





## templates\core\base_old.html

html
<!DOCTYPE html>
<html lang="pt-br">
<head>
    
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}OMAUM{% endblock %}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    
    <!-- Custom CSS -->
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{% url 'home' %}">OMAUM</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'home' %}">Home</a>
                    </li>
                    {% if user.is_authenticated %}
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="atividadesDropdown" role="button" data-bs-toggle="dropdown">
                            Atividades
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="{% url 'atividades:atividade_academica_list' %}">Acad�micas</a></li>
                            <li><a class="dropdown-item" href="{% url 'atividades:atividade_ritualistica_list' %}">Ritual�sticas</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/cursos/">Cursos</a>  <!-- Use um URL absoluto temporariamente -->
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'cargos:listar_cargos' %}">Cargos</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'frequencias:listar_frequencias' %}">Frequ�ncias</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'iniciacoes:listar_iniciacoes' %}">Inicia��es</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'punicoes:listar_punicoes' %}">Puni��es</a>
                    </li>
                    {% endif %}
                </ul>
                <ul class="navbar-nav">
                    {% if user.is_authenticated %}
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown">
                            {{ user.username }}
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            {% if user.is_staff %}
                            <li><a class="dropdown-item" href="{% url 'admin:index' %}">Admin</a></li>
                            {% endif %}
                            <li><a class="dropdown-item" href="{% url 'logout' %}">Sair</a></li>
                        </ul>
                    </li>
                    {% else %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'login' %}">Login</a>
                    </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main>
        {% if messages %}
        <div class="container mt-3">
            {% for message in messages %}
            <div class="alert alert-{{ message.tags }} alert-dismissible fade show">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
            {% endfor %}
        </div>
        {% endif %}

        {% block content %}{% endblock %}
    </main>

    <!-- Footer -->
    <footer class="bg-light text-center text-muted py-4 mt-5">
        <div class="container">
            <p>� {% now "Y" %} OMAUM - Todos os direitos reservados</p>
        </div>
    </footer>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Custom JavaScript -->
    {% block extra_js %}{% endblock %}
</body>
</html>





## templates\core\home.html

html
{% extends 'base.html' %}

{% block title %}OMAUM - Home{% endblock %}

{% block content %}
<div class="container">
    <div class="jumbotron mt-4">
        <h1 class="display-4">Welcome to OMAUM</h1>
        <p class="lead">Your platform for courses and learning.</p>
        <hr class="my-4">
        <p>Get started by exploring our system.</p>
        
        {% if user.is_authenticated %}
            <a class="btn btn-primary btn-lg" href="{% url 'alunos:listar' %}" role="button">View Students</a>
        {% else %}
            <a class="btn btn-outline-secondary btn-lg" href="{% url 'core:entrar' %}" role="button">Login</a>
        {% endif %}
    </div>
</div>
{% endblock %}





## templates\includes\form_errors.html

html
{% if form.non_field_errors %}
    <div class="alert alert-




## templates\registration\login.html

html
{% extends 'base.html' %}

{% block title %}Login{% endblock %}

{% block content %}
<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h4 class="mb-0">Login</h4>
        </div>
        <div class="card-body">
          <form method="post" class="needs-validation" novalidate>
            {% csrf_token %}

            {% if form.errors %}
              <div class="alert alert-danger">
                Seu nome de usu�rio e senha n�o correspondem. Por favor, tente novamente.
              </div>
            {% endif %}

            <div class="mb-3">
              <label for="id_username" class="form-label">Nome de usu�rio</label>
              <input type="text" name="username" id="id_username" class="form-control" required>
            </div>

            <div class="mb-3">
              <label for="id_password" class="form-label">Senha</label>
              <input type="password" name="password" id="id_password" class="form-control" required>
            </div>

            <input type="hidden" name="next" value="{{ next }}">

            <div class="d-grid">
              <button type="submit" class="btn btn-primary">Entrar</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}





## templates\registration\registro.html

html
{% extends 'base.html' %}
{% load widget_tweaks %}

{% block title %}Registrar - OMAUM{% endblock %}
{% block content %}
<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h4 class="mb-0">Registrar</h4>
        </div>
        <div class="card-body">
          <p class="mb-3">Por favor, preencha os campos abaixo para criar uma nova conta.</p>
          <form method="post" class="needs-validation" novalidate>
            {% csrf_token %}

            {% if form.errors %}
              <div class="alert alert-danger">
                Por favor, corrija os erros abaixo.
              </div>
            {% endif %}

            {% for field in form %}
              <div class="mb-3">
                <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
                {{ field|add_class:"form-control" }}
                {% if field.errors %}
                  <div class="invalid-feedback d-block">
                    {% for error in field.errors %}
                      {{ error }}
                    {% endfor %}
                  </div>
                {% endif %}
              </div>
            {% endfor %}

            <div class="d-grid">
              <button type="submit" class="btn btn-primary">Registrar</button>
            </div>
          </form>

          <div class="mt-3 text-center">
            <p>J� tem uma conta? <a href="{% url 'login' %}">Fa�a login aqui</a></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}


# C�digo da Funcionalidade: static
*Gerado automaticamente*



## static\css\accessibility_fixes.css

css
/* Fix for list structure accessibility issues */
ul, ol {
  font-size: 0;  /* Collapse whitespace between list items */
  list-style-position: inside;  /* Ensure bullets/numbers are within the list item's text flow */
}

li {
  font-size: 1rem;  /* Restore font size for list items */
  margin-bottom: 0.5em;  /* Add some vertical spacing between list items for better readability */
}

ul *, ol * {
  font-size: 1rem;  /* Restore font size for nested elements */
}

/* Fix for Bootstrap components */
.navbar-nav, .dropdown-menu {
  font-size: 0;  /* Collapse whitespace between nav items */
}

.navbar-nav *, .dropdown-menu * {
  font-size: 1rem;  /* Restore font size for nav items and dropdowns */
}

/* Additional accessibility improvements */
:focus {
  outline: 2px solid #007bff;  /* Add a visible focus indicator */
  outline-offset: 2px;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* Improve color contrast for better readability */
body {
  color: #333;  /* Darker text color for better contrast */
}

a {
  color: #0056b3;  /* Darker link color for better contrast */
}

/* Ensure sufficient line height for readability */
p, li {
  line-height: 1.5;
}





## static\js\csrf_refresh.js

javascript
// Fun��o para verificar o status da sess�o e do token CSRF
function checkSessionStatus() {
    // Fazer uma requisi��o AJAX para verificar o status da sess�o
    fetch('/csrf_check/', {
        method: 'GET',
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        if (!response.ok) {
            // Se a resposta n�o for OK, mostrar alerta de sess�o expirada
            showSessionExpiredAlert();
        }
    })
    .catch(error => {
        console.error('Erro ao verificar status da sess�o:', error);
        // Em caso de erro, tamb�m mostrar o alerta
        showSessionExpiredAlert();
    });
}

// Fun��o para mostrar alerta de sess�o expirada
function showSessionExpiredAlert() {
    // Verificar se o alerta j� existe para n�o duplicar
    if (!document.getElementById('session-expired-alert')) {
        const alertDiv = document.createElement('div');
        alertDiv.id = 'session-expired-alert';
        alertDiv.className = 'alert alert-warning alert-dismissible fade show session-alert';
        alertDiv.innerHTML = `
            <strong>Aten��o!</strong> Sua sess�o pode ter expirado. 
            <button type="button" class="btn btn-sm btn-primary mx-2" onclick="refreshPage()">Recarregar P�gina</button>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>
        `;
        
        // Estilo para o alerta fixo no topo da p�gina
        alertDiv.style.position = 'fixed';
        alertDiv.style.top = '10px';
        alertDiv.style.left = '50%';
        alertDiv.style.transform = 'translateX(-50%)';
        alertDiv.style.zIndex = '9999';
        alertDiv.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
        
        document.body.appendChild(alertDiv);
    }
}

// Fun��o para recarregar a p�gina
function refreshPage() {
    window.location.reload();
}

// Verificar a sess�o a cada 5 minutos (300000 ms)
// Voc� pode ajustar este valor conforme necess�rio
const checkInterval = 300000;
setInterval(checkSessionStatus, checkInterval);

// Tamb�m verificar quando o usu�rio retorna � aba
document.addEventListener('visibilitychange', function() {
    if (document.visibilityState === 'visible') {
        checkSessionStatus();
    }
});

// Verificar status inicial ap�s carregamento da p�gina
document.addEventListener('DOMContentLoaded', function() {
    // Esperar um pouco para garantir que a p�gina esteja totalmente carregada
    setTimeout(checkSessionStatus, 1000);
});


# C�digo da Funcionalidade: root
*Gerado automaticamente*



## alunostests__init__.py

python
# Alunos app




## clean_migrations.py

python
import os
import shutil
import datetime

def backup_database():
    """Create a backup of the database file if it exists"""
    if os.path.exists('db.sqlite3'):
        backup_dir = 'backups'
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_file = os.path.join(backup_dir, f'db_backup_{timestamp}.sqlite3')
        
        shutil.copy2('db.sqlite3', backup_file)
        print(f"Database backed up to {backup_file}")
    else:
        print("No database file found to backup")

def delete_migrations():
    """Delete all migration files except __init__.py"""
    # Get all directories in the current folder
    dirs = [d for d in os.listdir('.') if os.path.isdir(d) and not d.startswith('.') and d != 'venv' and d != 'backups']
    
    migration_files_deleted = 0
    
    for app_dir in dirs:
        migrations_dir = os.path.join(app_dir, 'migrations')
        if os.path.exists(migrations_dir):
            print(f"Checking migrations in {app_dir}...")
            
            # Get all Python files in the migrations directory
            migration_files = [f for f in os.listdir(migrations_dir) 
                              if f.endswith('.py') and f != '__init__.py']
            
            # Delete each migration file
            for migration_file in migration_files:
                file_path = os.path.join(migrations_dir, migration_file)
                os.remove(file_path)
                print(f"  Deleted: {file_path}")
                migration_files_deleted += 1
                
            # Make sure __init__.py exists
            init_file = os.path.join(migrations_dir, '__init__.py')
            if not os.path.exists(init_file):
                with open(init_file, 'w') as f:
                    pass  # Create an empty file
                print(f"  Created: {init_file}")
    
    return migration_files_deleted

def delete_database():
    """Delete the SQLite database file"""
    if os.path.exists('db.sqlite3'):
        os.remove('db.sqlite3')
        print("Database file deleted: db.sqlite3")
        return True
    else:
        print("No database file found to delete")
        return False

def main():
    print("Django Migration Cleaner")
    print("=======================")
    
    # Ask for confirmation
    confirm = input("This will delete all migration files and the database. Continue? (y/n): ")
    if confirm.lower() != 'y':
        print("Operation cancelled.")
        return
    
    # Ask about backup
    backup = input("Create a backup of the database before deleting? (y/n): ")
    if backup.lower() == 'y':
        backup_database()
    
    # Delete migrations
    migration_count = delete_migrations()
    print(f"Deleted {migration_count} migration files")
    
    # Delete database
    db_deleted = delete_database()
    
    print("\nCleanup complete!")
    print("Next steps:")
    print("1. Run: python manage.py makemigrations")
    print("2. Run: python manage.py migrate")
    print("3. Run: python manage.py createsuperuser")
    print("4. Run: python popular_alunos.py (if you want sample data)")

if __name__ == "__main__":
    main()





## manage.py

python
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'omaum.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()





## popular_alunos.py

python
import os
import django
from datetime import time
import random

# Django configuration
os.environ['DJANGO_SETTINGS_MODULE'] = 'omaum.settings'
django.setup()

from faker import Faker
from alunos.models import Aluno

# Initialize Faker with Brazilian locale
fake = Faker('pt_BR')

def criar_alunos_ficticios(quantidade=50):
    for _ in range(quantidade):
        # Generate random time for hora_nascimento
        random_hour = random.randint(0, 23)
        random_minute = random.randint(0, 59)
        hora_nascimento = time(hour=random_hour, minute=random_minute)

        Aluno.objects.create(
            cpf=fake.unique.numerify('###########'),
            nome=fake.name(),
            data_nascimento=fake.date_of_birth(minimum_age=18, maximum_age=65),
            hora_nascimento=hora_nascimento,  # Add this field
            email=fake.unique.email(),
            foto=None,
            numero_iniciatico=fake.unique.numerify('######'),
            nome_iniciatico=fake.name(),
            sexo=fake.random_element(elements=('M', 'F', 'O')),
            nacionalidade='Brasileira',
            naturalidade=fake.city(),
            rua=fake.street_name(),
            numero_imovel=fake.building_number(),
            complemento=fake.random_element(elements=['Apto 101', 'Casa 1', 'Bloco A', 'Fundos']),  # Brazilian-style complements
            cidade=fake.city(),
            estado=fake.estado_sigla(),
            bairro=fake.bairro(),
            cep=fake.postcode(),
            nome_primeiro_contato=fake.name(),
            celular_primeiro_contato=fake.cellphone_number(),
            tipo_relacionamento_primeiro_contato=fake.random_element(elements=('Pai', 'M�e', 'Irm�o', 'Amigo')),
            nome_segundo_contato=fake.name(),
            celular_segundo_contato=fake.cellphone_number(),
            tipo_relacionamento_segundo_contato=fake.random_element(elements=('Pai', 'M�e', 'Irm�o', 'Amigo')),
            tipo_sanguineo=fake.random_element(elements=('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-')),
            fator_rh=fake.random_element(elements=('+', '-')),
            alergias=fake.text(max_nb_chars=200),
            condicoes_medicas_gerais=fake.text(max_nb_chars=200),
            convenio_medico=fake.company(),
            hospital=fake.company()
        )
    print(f"{quantidade} alunos fict�cios criados com sucesso!")

if __name__ == '__main__':
    criar_alunos_ficticios()




## populate_db.py

python
import os
import django

# Set up Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'omaum.settings')
django.setup()

# Import your models
from cursos.models import Curso
from alunos.models import Aluno
from turmas.models import Turma
# Import other models as needed

# Create sample data
def populate():
    # Create courses
    curso1 = Curso.objects.create(
        codigo_curso="CS101",
        nome="Introdu��o � Computa��o",
        descricao="Curso b�sico de computa��o",
        duracao=6
    )
    
    # Create students
    aluno1 = Aluno.objects.create(
        nome="Jo�o Silva",
        matricula="2023001",
        curso=curso1
        # Add other fields as needed
    )
    
    # Create classes
    turma1 = Turma.objects.create(
        nome="Turma A - 2023",
        curso=curso1,
        # Add other fields as needed
    )
    
    print("Database populated successfully!")

if __name__ == '__main__':
    print("Starting population script...")
    populate()





## settings.py

python
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cursos',
]





## urls.py

python
path('cursos/', include('cursos.urls')),



# C�digo da Funcionalidade: relatorios
*Gerado automaticamente*



## relatorios\admin.py

python
from django.contrib import admin
from django.contrib.auth.models import Permission

# Registrar permiss�es no admin para facilitar a atribui��o
admin.site.register(Permission)





## relatorios\apps.py

python
from django.apps import AppConfig


class RelatoriosConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'relatorios'





## relatorios\models.py

python
from django.db import models

# Create your models here.





## relatorios\tests.py

python
from django.test import TestCase

# Create your tests here.





## relatorios\urls.py

python
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='relatorios_index'),
    path('alunos/', views.relatorio_alunos, name='relatorio_alunos'),
    path('alunos/pdf/', views.relatorio_alunos_pdf, name='relatorio_alunos_pdf'),
    path('presencas/', views.relatorio_presencas, name='relatorio_presencas'),
    path('presencas/pdf/', views.relatorio_presencas_pdf, name='relatorio_presencas_pdf'),
    path('punicoes/', views.relatorio_punicoes, name='relatorio_punicoes'),
    path('punicoes/pdf/', views.relatorio_punicoes_pdf, name='relatorio_punicoes_pdf'),
]





## relatorios\views.py

python
from django.shortcuts import render
from django.http import HttpResponse
from django.contrib.auth.decorators import login_required, permission_required
from alunos.models import Aluno
from presencas.models import PresencaAcademica
from punicoes.models import Punicao
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, landscape
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from io import BytesIO
from datetime import datetime

@login_required
def index(request):
    return render(request, 'relatorios/index.html')

@login_required
@permission_required('alunos.view_aluno', raise_exception=True)
def relatorio_alunos(request):
    # Obter par�metros de filtro
    nome = request.GET.get('nome', '')
    data_inicio = request.GET.get('data_inicio', '')
    data_fim = request.GET.get('data_fim', '')
    
    # Come�ar com todos os alunos
    alunos = Aluno.objects.all()
    
    # Aplicar filtros
    if nome:
        alunos = alunos.filter(nome__icontains=nome)
    if data_inicio:
        alunos = alunos.filter(data_nascimento__gte=data_inicio)
    if data_fim:
        alunos = alunos.filter(data_nascimento__lte=data_fim)
    
    context = {
        'alunos': alunos,
        'nome': nome,
        'data_inicio': data_inicio,
        'data_fim': data_fim,
    }
    return render(request, 'relatorios/relatorio_alunos.html', context)

@login_required
@permission_required('alunos.view_aluno', raise_exception=True)
def relatorio_alunos_pdf(request):
    # Obter par�metros de filtro
    nome = request.GET.get('nome', '')
    data_inicio = request.GET.get('data_inicio', '')
    data_fim = request.GET.get('data_fim', '')
    
    # Come�ar com todos os alunos
    alunos = Aluno.objects.all()
    
    # Aplicar filtros
    if nome:
        alunos = alunos.filter(nome__icontains=nome)
    if data_inicio:
        alunos = alunos.filter(data_nascimento__gte=data_inicio)
    if data_fim:
        alunos = alunos.filter(data_nascimento__lte=data_fim)
    
    # Criar um buffer para receber os dados do PDF
    buffer = BytesIO()
    
    # Criar o objeto PDF
    doc = SimpleDocTemplate(buffer, pagesize=landscape(letter))
    
    # Container para os objetos 'Flowable'
    elementos = []
    
    # Definir estilos
    estilos = getSampleStyleSheet()
    estilo_titulo = estilos['Heading1']
    
    # Adicionar t�tulo
    elementos.append(Paragraph("Relat�rio de Alunos", estilo_titulo))
    
    # Criar dados da tabela
    data = [['Nome', 'CPF', 'Email', 'Data de Nascimento']]  # Linha de cabe�alho
    for aluno in alunos:
        data.append([
            aluno.nome,
            aluno.cpf,
            aluno.email,
            aluno.data_nascimento.strftime('%d/%m/%Y')
        ])
    
    # Criar tabela
    tabela = Table(data)
    
    # Adicionar estilo � tabela
    estilo = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ])
    tabela.setStyle(estilo)
    
    # Adicionar tabela aos elementos
    elementos.append(tabela)
    
    # Construir PDF
    doc.build(elementos)
    
    # Retornar resposta
    buffer.seek(0)
    
    # Definir nome do arquivo com data atual
    data_atual = datetime.now().strftime('%d-%m-%Y')
    filename = f"relatorio_alunos_{data_atual}.pdf"
    
    response = HttpResponse(buffer, content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="{filename}"'
    
    return response

@login_required
@permission_required('presencas.view_presencaacademica', raise_exception=True)
def relatorio_presencas(request):
    # Obter par�metros de filtro
    aluno_id = request.GET.get('aluno', '')
    turma_id = request.GET.get('turma', '')
    data_inicio = request.GET.get('data_inicio', '')
    data_fim = request.GET.get('data_fim', '')
    
    # Come�ar com todas as presen�as
    presencas = PresencaAcademica.objects.all().select_related('aluno', 'turma')
    
    # Aplicar filtros
    if aluno_id:
        presencas = presencas.filter(aluno_id=aluno_id)
    if turma_id:
        presencas = presencas.filter(turma_id=turma_id)
    if data_inicio:
        presencas = presencas.filter(data__gte=data_inicio)
    if data_fim:
        presencas = presencas.filter(data__lte=data_fim)
    
    # Obter listas para os filtros
    alunos = Aluno.objects.all()
    
    context = {
        'presencas': presencas,
        'alunos': alunos,
        'aluno_id': aluno_id,
        'turma_id': turma_id,
        'data_inicio': data_inicio,
        'data_fim': data_fim,
    }
    return render(request, 'relatorios/relatorio_presencas.html', context)

@login_required
@permission_required('presencas.view_presencaacademica', raise_exception=True)
def relatorio_presencas_pdf(request):
    # Obter par�metros de filtro
    aluno_id = request.GET.get('aluno', '')
    turma_id = request.GET.get('turma', '')
    data_inicio = request.GET.get('data_inicio', '')
    data_fim = request.GET.get('data_fim', '')
    
    # Come�ar com todas as presen�as
    presencas = PresencaAcademica.objects.all().select_related('aluno', 'turma')
    
    # Aplicar filtros
    if aluno_id:
        presencas = presencas.filter(aluno_id=aluno_id)
    if turma_id:
        presencas = presencas.filter(turma_id=turma_id)
    if data_inicio:
        presencas = presencas.filter(data__gte=data_inicio)
    if data_fim:
        presencas = presencas.filter(data__lte=data_fim)
    
    # Criar um buffer para receber os dados do PDF
    buffer = BytesIO()
    
    # Criar o objeto PDF
    doc = SimpleDocTemplate(buffer, pagesize=landscape(letter))
    
    # Container para os objetos 'Flowable'
    elementos = []
    
    # Definir estilos
    estilos = getSampleStyleSheet()
    estilo_titulo = estilos['Heading1']
    
    # Adicionar t�tulo
    elementos.append(Paragraph("Relat�rio de Presen�as", estilo_titulo))
    
    # Criar dados da tabela
    data = [['Aluno', 'Turma', 'Data', 'Status']]  # Linha de cabe�alho
    for presenca in presencas:
        data.append([
            presenca.aluno.nome,
            presenca.turma.nome if hasattr(presenca, 'turma') and presenca.turma else "N/A",
            presenca.data.strftime('%d/%m/%Y'),
            "Presente" if presenca.presente else "Ausente"
        ])
    
    # Criar tabela
    tabela = Table(data)
    
    # Adicionar estilo � tabela
    estilo = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ])
    tabela.setStyle(estilo)
    
    # Adicionar tabela aos elementos
    elementos.append(tabela)
    
    # Construir PDF
    doc.build(elementos)
    
    # Retornar resposta
    buffer.seek(0)
    
    # Definir nome do arquivo com data atual
    data_atual = datetime.now().strftime('%d-%m-%Y')
    filename = f"relatorio_presencas_{data_atual}.pdf"
    
    response = HttpResponse(buffer, content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="{filename}"'
    
    return response

@login_required
@permission_required('punicoes.view_punicao', raise_exception=True)
def relatorio_punicoes(request):
    # Obter par�metros de filtro
    aluno_id = request.GET.get('aluno', '')
    tipo_punicao = request.GET.get('tipo_punicao', '')
    data_inicio = request.GET.get('data_inicio', '')
    data_fim = request.GET.get('data_fim', '')
    
    # Come�ar com todas as puni��es
    punicoes = Punicao.objects.all().select_related('aluno')
    
    # Aplicar filtros
    if aluno_id:
        punicoes = punicoes.filter(aluno_id=aluno_id)
    if tipo_punicao:
        punicoes = punicoes.filter(tipo_punicao=tipo_punicao)
    if data_inicio:
        punicoes = punicoes.filter(data__gte=data_inicio)
    if data_fim:
        punicoes = punicoes.filter(data__lte=data_fim)
    
    # Obter listas para os filtros
    alunos = Aluno.objects.all()
    tipos_punicao = Punicao.objects.values_list('tipo_punicao', flat=True).distinct()
    
    context = {
        'punicoes': punicoes,
        'alunos': alunos,
        'tipos_punicao': tipos_punicao,
        'aluno_id': aluno_id,
        'tipo_punicao': tipo_punicao,
        'data_inicio': data_inicio,
        'data_fim': data_fim,
    }
    return render(request, 'relatorios/relatorio_punicoes.html', context)

@login_required
@permission_required('punicoes.view_punicao', raise_exception=True)
def relatorio_punicoes_pdf(request):
    # Obter par�metros de filtro
    aluno_id = request.GET.get('aluno', '')
    tipo_punicao = request.GET.get('tipo_punicao', '')
    data_inicio = request.GET.get('data_inicio', '')
    data_fim = request.GET.get('data_fim', '')
    
    # Come�ar com todas as puni��es
    punicoes = Punicao.objects.all().select_related('aluno')
    
    # Aplicar filtros
    if aluno_id:
        punicoes = punicoes.filter(aluno_id=aluno_id)
    if tipo_punicao:
        punicoes = punicoes.filter(tipo_punicao=tipo_punicao)
    if data_inicio:
        punicoes = punicoes.filter(data__gte=data_inicio)
    if data_fim:
        punicoes = punicoes.filter(data__lte=data_fim)
    
    # Criar um buffer para receber os dados do PDF
    buffer = BytesIO()
    
    # Criar o objeto PDF
    doc = SimpleDocTemplate(buffer, pagesize=landscape(letter))
    
    # Container para os objetos 'Flowable'
    elementos = []
    
    # Definir estilos
    estilos = getSampleStyleSheet()
    estilo_titulo = estilos['Heading1']
    
    # Adicionar t�tulo
    elementos.append(Paragraph("Relat�rio de Puni��es", estilo_titulo))
    
    # Criar dados da tabela
    data = [['Aluno', 'Tipo de Puni��o', 'Data', 'Descri��o']]  # Linha de cabe�alho
    for punicao in punicoes:
        data.append([
            punicao.aluno.nome,
            punicao.tipo_punicao,
            punicao.data.strftime('%d/%m/%Y'),
            punicao.descricao[:100] + '...' if len(punicao.descricao) > 100 else punicao.descricao
        ])
    
    # Criar tabela
    tabela = Table(data)
    
    # Adicionar estilo � tabela
    estilo = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ])
    tabela.setStyle(estilo)
    
    # Adicionar tabela aos elementos
    elementos.append(tabela)
    
    # Construir PDF
    doc.build(elementos)
    
    # Retornar resposta
    buffer.seek(0)
    
    # Definir nome do arquivo com data atual
    data_atual = datetime.now().strftime('%d-%m-%Y')
    filename = f"relatorio_punicoes_{data_atual}.pdf"
    
    response = HttpResponse(buffer, content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="{filename}"'
    
    return response





## relatorios\templates\relatorios\gerar_relatorio.html

html
{% extends 'core/base.html' %}

{% block content %}
<!-- Existing content -->

<a href="javascript:history.back()" class="back-button">Voltar</a>
{% endblock %}





## relatorios\templates\relatorios\index.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Relat�rios do Sistema</h1>
    
    <div class="row mt-4">
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Relat�rio de Alunos</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">Gere relat�rios completos dos alunos cadastrados no sistema, com op��es de filtros por nome e data de nascimento.</p>
                </div>
                <div class="card-footer">
                    <a href="{% url 'relatorio_alunos' %}" class="btn btn-primary">Acessar</a>
                </div>
            </div>
        </div>
        
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Relat�rio de Presen�as</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">Acompanhe o registro de presen�as dos alunos, com filtros por aluno, turma e per�odo.</p>
                </div>
                <div class="card-footer">
                    <a href="{% url 'relatorio_presencas' %}" class="btn btn-success">Acessar</a>
                </div>
            </div>
        </div>
        
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-danger text-white">
                    <h5 class="mb-0">Relat�rio de Puni��es</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">Visualize as puni��es registradas no sistema, com filtros por aluno, tipo de puni��o e per�odo.</p>
                </div>
                <div class="card-footer">
                    <a href="{% url 'relatorio_punicoes' %}" class="btn btn-danger">Acessar</a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}





## relatorios\templates\relatorios\relatorio_alunos.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Relat�rio de Alunos</h1>
    
    <!-- Filtros -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtros</h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-4">
                    <label for="nome" class="form-label">Nome:</label>
                    <input type="text" id="nome" name="nome" class="form-control" value="{{ nome }}">
                </div>
                <div class="col-md-3">
                    <label for="data_inicio" class="form-label">Data de Nascimento (In�cio):</label>
                    <input type="date" id="data_inicio" name="data_inicio" class="form-control" value="{{ data_inicio }}">
                </div>
                <div class="col-md-3">
                    <label for="data_fim" class="form-label">Data de Nascimento (Fim):</label>
                    <input type="date" id="data_fim" name="data_fim" class="form-control" value="{{ data_fim }}">
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary">Filtrar</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Bot�es de a��o -->
    <div class="mb-3">
        <a href="{% url 'relatorio_alunos_pdf' %}{% if request.GET %}?{{ request.GET.urlencode }}{% endif %}" class="btn btn-danger">
            <i class="fas fa-file-pdf"></i> Baixar PDF
        </a>
    </div>
    
    <!-- Tabela de resultados -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Resultados</h5>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>CPF</th>
                        <th>Email</th>
                        <th>Data de Nascimento</th>
                        <!-- Adicione mais colunas conforme necess�rio -->
                    </tr>
                </thead>
                <tbody>
                    {% for aluno in alunos %}
                    <tr>
                        <td>{{ aluno.nome }}</td>
                        <td>{{ aluno.cpf }}</td>
                        <td>{{ aluno.email }}</td>
                        <td>{{ aluno.data_nascimento|date:"d/m/Y" }}</td>
                        <!-- Adicione mais campos conforme necess�rio -->
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="4" class="text-center">Nenhum aluno encontrado com os filtros selecionados.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endblock %}





## relatorios\templates\relatorios\relatorio_presencas.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Relat�rio de Presen�as</h1>
    
    <!-- Filtros -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtros</h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-3">
                    <label for="aluno" class="form-label">Aluno:</label>
                    <select name="aluno" id="aluno" class="form-select">
                        <option value="">Todos</option>
                        {% for aluno in alunos %}
                            <option value="{{ aluno.id }}" {% if aluno_id == aluno.id|stringformat:"s" %}selected{% endif %}>{{ aluno.nome }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="data_inicio" class="form-label">Data In�cio:</label>
                    <input type="date" id="data_inicio" name="data_inicio" class="form-control" value="{{ data_inicio }}">
                </div>
                <div class="col-md-3">
                    <label for="data_fim" class="form-label">Data Fim:</label>
                    <input type="date" id="data_fim" name="data_fim" class="form-control" value="{{ data_fim }}">
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary">Filtrar</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Bot�es de a��o -->
    <div class="mb-3">
        <a href="{% url 'relatorio_presencas_pdf' %}{% if request.GET %}?{{ request.GET.urlencode }}{% endif %}" class="btn btn-danger">
            <i class="fas fa-file-pdf"></i> Baixar PDF
        </a>
    </div>
    
    <!-- Tabela de resultados -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Resultados</h5>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Aluno</th>
                        <th>Turma</th>
                        <th>Data</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    {% for presenca in presencas %}
                    <tr>
                        <td>{{ presenca.aluno.nome }}</td>
                        <td>{{ presenca.turma.nome }}</td>
                        <td>{{ presenca.data|date:"d/m/Y" }}</td>
                        <td>
                            {% if presenca.presente %}
                                <span class="badge bg-success">Presente</span>
                            {% else %}
                                <span class="badge bg-danger">Ausente</span>
                            {% endif %}
                        </td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="4" class="text-center">Nenhuma presen�a encontrada com os filtros selecionados.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endblock %}





## relatorios\templates\relatorios\relatorio_punicoes.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Relat�rio de Puni��es</h1>
    
    <!-- Filtros -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtros</h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-3">
                    <label for="aluno" class="form-label">Aluno:</label>
                    <select name="aluno" id="aluno" class="form-select">
                        <option value="">Todos</option>
                        {% for aluno in alunos %}
                            <option value="{{ aluno.id }}" {% if aluno_id == aluno.id|stringformat:"s" %}selected{% endif %}>{{ aluno.nome }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="tipo_punicao" class="form-label">Tipo de Puni��o:</label>
                    <select name="tipo_punicao" id="tipo_punicao" class="form-select">
                        <option value="">Todos</option>
                        {% for tipo in tipos_punicao %}
                            <option value="{{ tipo }}" {% if tipo_punicao == tipo %}selected{% endif %}>{{ tipo }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="data_inicio" class="form-label">Data In�cio:</label>
                    <input type="date" id="data_inicio" name="data_inicio" class="form-control" value="{{ data_inicio }}">
                </div>
                <div class="col-md-2">
                    <label for="data_fim" class="form-label">Data Fim:</label>
                    <input type="date" id="data_fim" name="data_fim" class="form-control" value="{{ data_fim }}">
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary">Filtrar</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Bot�es de a��o -->
    <div class="mb-3">
        <a href="{% url 'relatorio_punicoes_pdf' %}{% if request.GET %}?{{ request.GET.urlencode }}{% endif %}" class="btn btn-danger">
            <i class="fas fa-file-pdf"></i> Baixar PDF
        </a>
    </div>
    
    <!-- Tabela de resultados -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Resultados</h5>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Aluno</th>
                        <th>Tipo de Puni��o</th>
                        <th>Data</th>
                        <th>Descri��o</th>
                    </tr>
                </thead>
                <tbody>
                    {% for punicao in punicoes %}
                    <tr>
                        <td>{{ punicao.aluno.nome }}</td>
                        <td>{{ punicao.tipo_punicao }}</td>
                        <td>{{ punicao.data|date:"d/m/Y" }}</td>
                        <td>{{ punicao.descricao|truncatechars:50 }}</td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="4" class="text-center">Nenhuma puni��o encontrada com os filtros selecionados.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endblock %}





## relatorios\tests\test_views.py

python
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User, Permission
from django.contrib.contenttypes.models import ContentType
from alunos.models import Aluno
from presencas.models import PresencaAcademica
from punicoes.models import Punicao
from datetime import date, time, timedelta

class RelatorioViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        
        # Criar usu�rio de teste com permiss�es
        self.user = User.objects.create_user(
            username='testuser',
            password='testpassword'
        )
        
        # Adicionar permiss�es necess�rias
        content_type = ContentType.objects.get_for_model(Aluno)
        permission = Permission.objects.get(
            content_type=content_type,
            codename='view_aluno'
        )
        self.user.user_permissions.add(permission)
        
        content_type = ContentType.objects.get_for_model(PresencaAcademica)
        permission = Permission.objects.get(
            content_type=content_type,
            codename='view_presencaacademica'
        )
        self.user.user_permissions.add(permission)
        
        content_type = ContentType.objects.get_for_model(Punicao)
        permission = Permission.objects.get(
            content_type=content_type,
            codename='view_punicao'
        )
        self.user.user_permissions.add(permission)
        
        # Fazer login
        self.client.login(username='testuser', password='testpassword')
        
        # Criar aluno de teste
        self.aluno = Aluno.objects.create(
            cpf='12345678901',
            nome='Maria Oliveira',
            data_nascimento=date(1985, 5, 15),
            hora_nascimento=time(14, 30),
            email='maria@example.com',
            sexo='F',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Jo�o Oliveira',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='Pai',
            nome_segundo_contato='Ana Oliveira',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='M�e',
            tipo_sanguineo='A',
            fator_rh='+'
        )
        
        # Criar dados de teste para presen�as
        self.presenca = PresencaAcademica.objects.create(
            aluno=self.aluno,
            data=date.today(),
            presente=True
        )
        
        # Criar dados de teste para puni��es
        self.punicao = Punicao.objects.create(
            aluno=self.aluno,
            tipo_punicao='Advert�ncia',
            data=date.today(),
            descricao='Teste de puni��o'
        )

    def test_relatorio_alunos(self):
        response = self.client.get(reverse('relatorio_alunos'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Maria Oliveira')
        
        # Testar filtros
        response = self.client.get(f"{reverse('relatorio_alunos')}?nome=Maria")
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Maria Oliveira')
        
        response = self.client.get(f"{reverse('relatorio_alunos')}?nome=Inexistente")
        self.assertEqual(response.status_code, 200)
        self.assertNotContains(response, 'Maria Oliveira')

    def test_relatorio_alunos_pdf(self):
        response = self.client.get(reverse('relatorio_alunos_pdf'))
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'application/pdf')
        
        # Testar com filtros
        response = self.client.get(f"{reverse('relatorio_alunos_pdf')}?nome=Maria")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'application/pdf')

    def test_relatorio_presencas(self):
        response = self.client.get(reverse('relatorio_presencas'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Maria Oliveira')
        
        # Testar filtros
        response = self.client.get(f"{reverse('relatorio_presencas')}?aluno={self.aluno.id}")
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Maria Oliveira')
        
        # Testar filtro de data
        data_hoje = date.today().strftime('%Y-%m-%d')
        response = self.client.get(f"{reverse('relatorio_presencas')}?data_inicio={data_hoje}")
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Maria Oliveira')

    def test_relatorio_presencas_pdf(self):
        response = self.client.get(reverse('relatorio_presencas_pdf'))
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'application/pdf')
        
        # Testar com filtros
        response = self.client.get(f"{reverse('relatorio_presencas_pdf')}?aluno={self.aluno.id}")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'application/pdf')

    def test_relatorio_punicoes(self):
        response = self.client.get(reverse('relatorio_punicoes'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Maria Oliveira')
        self.assertContains(response, 'Advert�ncia')
        
        # Testar filtros
        response = self.client.get(f"{reverse('relatorio_punicoes')}?aluno={self.aluno.id}")
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Maria Oliveira')
        
        response = self.client.get(f"{reverse('relatorio_punicoes')}?tipo_punicao=Advert�ncia")
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Maria Oliveira')

    def test_relatorio_punicoes_pdf(self):
        response = self.client.get(reverse('relatorio_punicoes_pdf'))
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'application/pdf')
        
        # Testar com filtros
        response = self.client.get(f"{reverse('relatorio_punicoes_pdf')}?aluno={self.aluno.id}")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'application/pdf')
        
        response = self.client.get(f"{reverse('relatorio_punicoes_pdf')}?tipo_punicao=Advert�ncia")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['Content-Type'], 'application/pdf')


# C�digo da Funcionalidade: punicoes
*Gerado automaticamente*



## punicoes\admin.py

python
from django.contrib import admin
from .models import Punicao

@admin.register(Punicao)
class PunicaoAdmin(admin.ModelAdmin):
    list_display = ('aluno', 'tipo_punicao', 'data')
    list_filter = ('tipo_punicao', 'data')
    search_fields = ('aluno__nome', 'descricao')




## punicoes\forms.py

python
from django import forms
from .models import Punicao
from django.core.exceptions import ValidationError
import datetime

class PunicaoForm(forms.ModelForm):
    class Meta:
        model = Punicao
        fields = ['aluno', 'descricao', 'data', 'tipo_punicao', 'observacoes']
        widgets = {
            'data': forms.DateInput(attrs={'type': 'date'}),
        }

    def clean_descricao(self):
        descricao = self.cleaned_data.get('descricao')
        if len(descricao) < 10:
            raise ValidationError("A descri��o da puni��o deve ter pelo menos 10 caracteres.")
        return descricao

    def clean_data(self):
        data = self.cleaned_data.get('data')
        if data and data > datetime.date.today():
            raise ValidationError("A data da puni��o n�o pode ser no futuro.")
        return data




## punicoes\models.py

python
from django.db import models
from django.contrib.auth.models import User
from alunos.models import Aluno

class Punicao(models.Model):
    aluno = models.ForeignKey(Aluno, on_delete=models.CASCADE, related_name='punicoes')
    descricao = models.TextField()
    data = models.DateField()
    tipo_punicao = models.CharField(max_length=50)
    observacoes = models.TextField(blank=True, null=True)
    registrado_por = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    data_registro = models.DateTimeField(auto_now_add=True)
    data_atualizacao = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Puni��o - {self.aluno.nome} - {self.data}"

    class Meta:
        ordering = ['-data']
        permissions = [
            ("gerar_relatorio_punicao", "Pode gerar relat�rio de puni��es"),
        ]





## punicoes\urls.py

python
from django.urls import path
from . import views

app_name = 'punicoes'

urlpatterns = [
    path('', views.listar_punicoes, name='listar_punicoes'),
    path('nova/', views.criar_punicao, name='criar_punicao'),
    path('<int:id>/editar/', views.editar_punicao, name='editar_punicao'),
    path('<int:id>/excluir/', views.excluir_punicao, name='excluir_punicao'),
    path('<int:id>/detalhes/', views.detalhe_punicao, name='detalhe_punicao'),
]





## punicoes\views.py

python
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required, permission_required
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from .models import Punicao
from .forms import PunicaoForm
from alunos.models import Aluno

@login_required
@permission_required('punicoes.add_punicao', raise_exception=True)
def criar_punicao(request):
    if request.method == 'POST':
        form = PunicaoForm(request.POST)
        if form.is_valid():
            punicao = form.save(commit=False)
            punicao.registrado_por = request.user
            punicao.save()
            messages.success(request, 'Puni��o criada com sucesso!')
            return redirect('listar_punicoes')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = PunicaoForm()
    return render(request, 'punicoes/criar_punicao.html', {'form': form})

@login_required
@permission_required('punicoes.change_punicao', raise_exception=True)
def editar_punicao(request, id):
    punicao = get_object_or_404(Punicao, id=id)
    if request.method == 'POST':
        form = PunicaoForm(request.POST, instance=punicao)
        if form.is_valid():
            form.save()
            messages.success(request, 'Puni��o atualizada com sucesso!')
            return redirect('listar_punicoes')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = PunicaoForm(instance=punicao)
    return render(request, 'punicoes/editar_punicao.html', {'form': form, 'punicao': punicao})

@login_required
@permission_required('punicoes.view_punicao', raise_exception=True)
def listar_punicoes(request):
    punicoes_list = Punicao.objects.all().select_related('aluno')
    
    # Filtros
    aluno_id = request.GET.get('aluno')
    tipo_punicao = request.GET.get('tipo_punicao')
    data_inicio = request.GET.get('data_inicio')
    data_fim = request.GET.get('data_fim')
    
    if aluno_id:
        punicoes_list = punicoes_list.filter(aluno_id=aluno_id)
    if tipo_punicao:
        punicoes_list = punicoes_list.filter(tipo_punicao=tipo_punicao)
    if data_inicio:
        punicoes_list = punicoes_list.filter(data__gte=data_inicio)
    if data_fim:
        punicoes_list = punicoes_list.filter(data__lte=data_fim)
    
    # Pagina��o
    paginator = Paginator(punicoes_list, 10)  # 10 itens por p�gina
    page = request.GET.get('page')
    
    try:
        punicoes = paginator.page(page)
    except PageNotAnInteger:
        punicoes = paginator.page(1)
    except EmptyPage:
        punicoes = paginator.page(paginator.num_pages)
    
    # Obter tipos de puni��o �nicos para o filtro
    tipos_punicao = Punicao.objects.values_list('tipo_punicao', flat=True).distinct()
    alunos = Aluno.objects.all()
    
    return render(request, 'punicoes/listar_punicoes.html', {
        'punicoes': punicoes,
        'aluno_id': aluno_id,
        'tipo_punicao': tipo_punicao,
        'data_inicio': data_inicio,
        'data_fim': data_fim,
        'tipos_punicao': tipos_punicao,
        'alunos': alunos
    })

@login_required
@permission_required('punicoes.view_punicao', raise_exception=True)
def detalhe_punicao(request, id):
    punicao = get_object_or_404(Punicao, id=id)
    return render(request, 'punicoes/detalhe_punicao.html', {'punicao': punicao})

@login_required
@permission_required('punicoes.delete_punicao', raise_exception=True)
def excluir_punicao(request, id):
    punicao = get_object_or_404(Punicao, id=id)
    if request.method == 'POST':
        punicao.delete()
        messages.success(request, 'Puni��o exclu�da com sucesso.')
        return redirect('listar_punicoes')
    return render(request, 'punicoes/excluir_punicao.html', {'punicao': punicao})




## punicoes\migrations\0001_initial.py

python
# Generated by Django 5.1.7 on 2025-03-27 11:39

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('alunos', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Punicao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.TextField()),
                ('data', models.DateField()),
                ('tipo_punicao', models.CharField(max_length=50)),
                ('observacoes', models.TextField(blank=True, null=True)),
                ('data_registro', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('aluno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='punicoes', to='alunos.aluno')),
                ('registrado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-data'],
                'permissions': [('gerar_relatorio_punicao', 'Pode gerar relat�rio de puni��es')],
            },
        ),
    ]





## punicoes\templates\punicoes\criar_punicao.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Criar Nova Puni��o</h1>
    <form method="post">
        {% csrf_token %}
        {% if form.non_field_errors %}
            <div class="alert alert-danger">
                {% for error in form.non_field_errors %}
                    {{ error }}
                {% endfor %}
            </div>
        {% endif %}
        {% for field in form %}
            <div class="form-group">
                {{ field.label_tag }}
                {{ field }}
                {% if field.errors %}
                    <div class="alert alert-danger">
                        {% for error in field.errors %}
                            {{ error }}
                        {% endfor %}
                    </div>
                {% endif %}
                {% if field.help_text %}
                    <small class="form-text text-muted">{{ field.help_text }}</small>
                {% endif %}
            </div>
        {% endfor %}
        <button type="submit" class="btn btn-primary">Criar Puni��o</button>
    </form>
</div>
{% endblock %}





## punicoes\templates\punicoes\detalhe_punicao.html

html
{% extends 'core/base.html' %}

{% block content %}
<h1>Detalhes da Puni��o</h1>
<dl>
    <dt>Aluno:</dt>
    <dd>{{ punicao.aluno.nome }}</dd>
    <dt>Tipo:</dt>
    <dd>{{ punicao.tipo_punicao }}</dd>
    <dt>Data:</dt>
    <dd>{{ punicao.data }}</dd>
    <dt>Descri��o:</dt>
    <dd>{{ punicao.descricao }}</dd>
    <dt>Observa��es:</dt>
    <dd>{{ punicao.observacoes|default:"Nenhuma observa��o" }}</dd>
</dl>
<a href="{% url 'editar_punicao' punicao.id %}" class="btn btn-warning">Editar</a>
<a href="{% url 'listar_punicoes' %}" class="btn btn-secondary">Voltar</a>
{% endblock %}




## punicoes\templates\punicoes\editar_punicao.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Editar Puni��o</h1>
    <form method="post">
        {% csrf_token %}
        {% if form.non_field_errors %}
            <div class="alert alert-danger">
                {% for error in form.non_field_errors %}
                    {{ error }}
                {% endfor %}
            </div>
        {% endif %}
        {% for field in form %}
            <div class="form-group">
                {{ field.label_tag }}
                {{ field }}
                {% if field.errors %}
                    <div class="alert alert-danger">
                        {% for error in field.errors %}
                            {{ error }}
                        {% endfor %}
                    </div>
                {% endif %}
                {% if field.help_text %}
                    <small class="form-text text-muted">{{ field.help_text }}</small>
                {% endif %}
            </div>
        {% endfor %}
        <button type="submit" class="btn btn-primary">Atualizar Puni��o</button>
        <a href="{% url 'listar_punicoes' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}





## punicoes\templates\punicoes\excluir_punicao.html

html
{% extends 'core/base.html' %}

{% block content %}
<h1>Excluir Puni��o</h1>
<p>Tem certeza que deseja excluir a puni��o de {{ punicao.aluno.nome }} do tipo {{ punicao.tipo_punicao }}?</p>
<form method="post">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger">Confirmar Exclus�o</button>
    <a href="{% url 'listar_punicoes' %}" class="btn btn-secondary">Cancelar</a>
</form>
{% endblock %}




## punicoes\templates\punicoes\listar_punicoes.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Lista de Puni��es</h1>
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtros</h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-3">
                    <label for="aluno" class="form-label">Aluno</label>
                    <select name="aluno" id="aluno" class="form-select">
                        <option value="">Todos</option>
                        {% for aluno in alunos %}
                            <option value="{{ aluno.id }}" {% if aluno_id == aluno.id|stringformat:"s" %}selected{% endif %}>{{ aluno.nome }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="tipo_punicao" class="form-label">Tipo de Puni��o</label>
                    <select name="tipo_punicao" id="tipo_punicao" class="form-select">
                        <option value="">Todos</option>
                        {% for tipo in tipos_punicao %}
                            <option value="{{ tipo }}" {% if tipo_punicao == tipo %}selected{% endif %}>{{ tipo }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="data_inicio" class="form-label">Data In�cio</label>
                    <input type="date" class="form-control" id="data_inicio" name="data_inicio" value="{{ data_inicio }}">
                </div>
                <div class="col-md-3">
                    <label for="data_fim" class="form-label">Data Fim</label>
                    <input type="date" class="form-control" id="data_fim" name="data_fim" value="{{ data_fim }}">
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">Filtrar</button>
                    <a href="{% url 'listar_punicoes' %}" class="btn btn-secondary">Limpar Filtros</a>
                </div>
            </form>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Aluno</th>
                <th>Descri��o</th>
                <th>Data</th>
                <th>A��es</th>
            </tr>
        </thead>
        <tbody>
            {% for punicao in punicoes %}
            <tr>
                <td>{{ punicao.aluno }}</td>
                <td>{{ punicao.descricao|truncatewords:10 }}</td>
                <td>{{ punicao.data }}</td>
                <td>
                    <a href="{% url 'detalhe_punicao' punicao.id %}" class="btn btn-sm btn-info">Detalhes</a>
                    <a href="{% url 'editar_punicao' punicao.id %}" class="btn btn-sm btn-warning">Editar</a>
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="4">Nenhuma puni��o registrada.</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <a href="{% url 'criar_punicao' %}" class="btn btn-primary">Nova Puni��o</a>
</div>
{% endblock %}



# C�digo da Funcionalidade: presencas
*Gerado automaticamente*



## presencas\admin.py

python
from django.contrib import admin

# Register your models here.





## presencas\apps.py

python
from django.apps import AppConfig


class PresencasConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'presencas'





## presencas\forms.py

python
from django import forms
from .models import PresencaAcademica
import datetime
from django.core.exceptions import ValidationError

class PresencaForm(forms.ModelForm):
    class Meta:
        model = PresencaAcademica
        fields = ['aluno', 'turma', 'data', 'presente']
        widgets = {
            'data': forms.DateInput(attrs={'type': 'date'}),
        }
        
    def clean_data(self):
        data = self.cleaned_data.get('data')
        if data and data > datetime.date.today():
            raise ValidationError("A data da presen�a n�o pode ser no futuro.")
        return data
        
    def clean(self):
        cleaned_data = super().clean()
        aluno = cleaned_data.get('aluno')
        turma = cleaned_data.get('turma')
        data = cleaned_data.get('data')
        
        if aluno and turma and data:
            if PresencaAcademica.objects.filter(aluno=aluno, turma=turma, data=data).exists():
                raise ValidationError("J� existe um registro de presen�a para este aluno nesta turma e data.")
        
        return cleaned_data




## presencas\models.py

python
from django.db import models
from django.contrib.auth.models import User
from turmas.models import Turma
from alunos.models import Aluno

class PresencaAcademica(models.Model):
    aluno = models.ForeignKey(Aluno, on_delete=models.CASCADE)
    turma = models.ForeignKey(Turma, on_delete=models.CASCADE)
    data = models.DateField()
    presente = models.BooleanField(default=False)
    registrado_por = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    data_registro = models.DateTimeField(auto_now_add=True)
    data_atualizacao = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.aluno} - {self.turma} - {self.data}"

    class Meta:
        verbose_name = "Presen�a Acad�mica"
        verbose_name_plural = "Presen�as Acad�micas"
        permissions = [
            ("gerar_relatorio_presenca", "Pode gerar relat�rio de presen�as"),
        ]




## presencas\tests.py

python
from django.test import TestCase

# Create your tests here.





## presencas\urls.py

python
from django.urls import path
from . import views

app_name = 'presencas'  # Add this line to define a namespace

urlpatterns = [
    path('registrar/', views.registrar_presenca, name='registrar_presenca'),
    path('lista/', views.lista_presencas, name='lista_presencas'),
    path('editar/<int:id>/', views.editar_presenca, name='editar_presenca'),
    path('excluir/<int:id>/', views.excluir_presenca, name='excluir_presenca'),
]





## presencas\views.py

python
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, permission_required
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.contrib import messages
from .models import PresencaAcademica
from .forms import PresencaForm
from alunos.models import Aluno
from turmas.models import Turma

@login_required
@permission_required('presencas.add_presencaacademica', raise_exception=True)
def registrar_presenca(request):
    if request.method == 'POST':
        form = PresencaForm(request.POST)
        if form.is_valid():
            presenca = form.save(commit=False)
            presenca.registrado_por = request.user
            presenca.save()
            messages.success(request, 'Presen�a registrada com sucesso!')
            return redirect('lista_presencas')
        else:
            messages.error(request, 'Corrija os erros no formul�rio.')
    else:
        form = PresencaForm()
    
    return render(request, 'presencas/registrar_presenca.html', {'form': form})

@login_required
@permission_required('presencas.view_presencaacademica', raise_exception=True)
def lista_presencas(request):
    presencas_list = PresencaAcademica.objects.all().select_related('aluno', 'turma')
    
    # Filtros
    aluno_id = request.GET.get('aluno')
    turma_id = request.GET.get('turma')
    data_inicio = request.GET.get('data_inicio')
    data_fim = request.GET.get('data_fim')
    
    if aluno_id:
        presencas_list = presencas_list.filter(aluno_id=aluno_id)
    if turma_id:
        presencas_list = presencas_list.filter(turma_id=turma_id)
    if data_inicio:
        presencas_list = presencas_list.filter(data__gte=data_inicio)
    if data_fim:
        presencas_list = presencas_list.filter(data__lte=data_fim)
    
    # Pagina��o
    paginator = Paginator(presencas_list, 10)  # 10 itens por p�gina
    page = request.GET.get('page')
    
    try:
        presencas = paginator.page(page)
    except PageNotAnInteger:
        presencas = paginator.page(1)
    except EmptyPage:
        presencas = paginator.page(paginator.num_pages)
    
    # Obter listas para os filtros
    alunos = Aluno.objects.all()
    turmas = Turma.objects.all()
    
    return render(request, 'presencas/lista_presencas.html', {
        'presencas': presencas,
        'aluno_id': aluno_id,
        'turma_id': turma_id,
        'data_inicio': data_inicio,
        'data_fim': data_fim,
        'alunos': alunos,
        'turmas': turmas
    })

@login_required
@permission_required('presencas.change_presencaacademica', raise_exception=True)
def editar_presenca(request, id):
    presenca = get_object_or_404(PresencaAcademica, id=id)
    
    if request.method == 'POST':
        form = PresencaForm(request.POST, instance=presenca)
        if form.is_valid():
            form.save()
            messages.success(request, 'Presen�a atualizada com sucesso!')
            return redirect('lista_presencas')
        else:
            messages.error(request, 'Corrija os erros no formul�rio.')
    else:
        form = PresencaForm(instance=presenca)
    
    return render(request, 'presencas/editar_presenca.html', {'form': form, 'presenca': presenca})

@login_required
@permission_required('presencas.delete_presencaacademica', raise_exception=True)
def excluir_presenca(request, id):
    presenca = get_object_or_404(PresencaAcademica, id=id)
    
    if request.method == 'POST':
        presenca.delete()
        messages.success(request, 'Presen�a exclu�da com sucesso!')
        return redirect('lista_presencas')
    
    return render(request, 'presencas/excluir_presenca.html', {'presenca': presenca})





## presencas\management\commands\setup_presencas_permissions.py

python
from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from presencas.models import PresencaAcademica

class Command(BaseCommand):
    help = 'Set up permissions for the presencas app'

    def handle(self, *args, **options):
        # Get content type for the PresencaAcademica model
        content_type = ContentType.objects.get_for_model(PresencaAcademica)
        
        # Get all permissions for the PresencaAcademica model
        permissions = Permission.objects.filter(content_type=content_type)
        
        # Add all permissions to the teachers group
        # for permission in permissions:
        #     teachers_group.permissions.add(permission)
            
        self.stdout.write(self.style.SUCCESS(f'Successfully set up permissions for the presencas app'))





## presencas\templates\presencas\editar_presenca.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Editar Presen�a</h1>
    
    <div class="card mb-4">
        <div class="card-body">
            <form method="post">
                {% csrf_token %}
                
                {% for field in form %}
                <div class="mb-3">
                    <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
                    {{ field }}
                    {% if field.errors %}
                    <div class="text-danger">
                        {% for error in field.errors %}
                        <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
                
                <div class="mt-4">
                    <button type="submit" class="btn btn-primary">Salvar Altera��es</button>
                    <a href="{% url 'lista_presencas' %}" class="btn btn-secondary">Cancelar</a>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## presencas\templates\presencas\excluir_presenca.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Excluir Registro de Presen�a</h1>
    
    <div class="card mb-4">
        <div class="card-body">
            <div class="alert alert-danger">
                <h5>Confirma��o de Exclus�o</h5>
                <p>Voc� est� prestes a excluir o seguinte registro de presen�a:</p>
                <ul>
                    <li><strong>Aluno:</strong> {{ presenca.aluno }}</li>
                    <li><strong>Turma:</strong> {{ presenca.turma }}</li>
                    <li><strong>Data:</strong> {{ presenca.data }}</li>
                    <li><strong>Presente:</strong> {% if presenca.presente %}Sim{% else %}N�o{% endif %}</li>
                </ul>
                <p>Esta a��o n�o pode ser desfeita. Deseja continuar?</p>
            </div>
            
            <form method="post">
                {% csrf_token %}
                <div class="mt-3">
                    <button type="submit" class="btn btn-danger">Confirmar Exclus�o</button>
                    <a href="{% url 'lista_presencas' %}" class="btn btn-secondary">Cancelar</a>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## presencas\templates\presencas\lista_presencas.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Lista de Presen�as</h1>
    
    <!-- Filtros -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtros</h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-3">
                    <label for="aluno" class="form-label">Aluno</label>
                    <select name="aluno" id="aluno" class="form-select">
                        <option value="">Todos</option>
                        {% for aluno in alunos %}
                            <option value="{{ aluno.id }}" {% if aluno_id == aluno.id|stringformat:"s" %}selected{% endif %}>{{ aluno.nome }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="turma" class="form-label">Turma</label>
                    <select name="turma" id="turma" class="form-select">
                        <option value="">Todas</option>
                        {% for turma in turmas %}
                            <option value="{{ turma.id }}" {% if turma_id == turma.id|stringformat:"s" %}selected{% endif %}>{{ turma.codigo_turma }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="data_inicio" class="form-label">Data In�cio</label>
                    <input type="date" class="form-control" id="data_inicio" name="data_inicio" value="{{ data_inicio }}">
                </div>
                <div class="col-md-3">
                    <label for="data_fim" class="form-label">Data Fim</label>
                    <input type="date" class="form-control" id="data_fim" name="data_fim" value="{{ data_fim }}">
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">Filtrar</button>
                    <a href="{% url 'lista_presencas' %}" class="btn btn-secondary">Limpar Filtros</a>
                </div>
            </form>
        </div>
    </div>
    
    <table class="table">
        <thead>
            <tr>
                <th>Aluno</th>
                <th>Turma</th>
                <th>Data</th>
                <th>Presente</th>
                <th>A��es</th>
            </tr>
        </thead>
        <tbody>
            {% for presenca in presencas %}
            <tr>
                <td>{{ presenca.aluno }}</td>
                <td>{{ presenca.turma }}</td>
                <td>{{ presenca.data }}</td>
                <td>{% if presenca.presente %}Sim{% else %}N�o{% endif %}</td>
                <td>
                    <a href="{% url 'editar_presenca' presenca.id %}" class="btn btn-sm btn-warning">Editar</a>
                    <a href="{% url 'excluir_presenca' presenca.id %}" class="btn btn-sm btn-danger">Excluir</a>
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="5">Nenhuma presen�a registrada.</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    
    <!-- Pagina��o -->
    {% if presencas.paginator.num_pages > 1 %}
    <nav aria-label="Navega��o de p�gina">
        <ul class="pagination justify-content-center">
            {% if presencas.has_previous %}
                <li class="page-item">
                    <a class="page-link" href="?page=1{% if aluno_id %}&aluno={{ aluno_id }}{% endif %}{% if turma_id %}&turma={{ turma_id }}{% endif %}{% if data_inicio %}&data_inicio={{ data_inicio }}{% endif %}{% if data_fim %}&data_fim={{ data_fim }}{% endif %}" aria-label="Primeira">
                        <span aria-hidden="true">��</span>
                    </a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="?page={{ presencas.previous_page_number }}{% if aluno_id %}&aluno={{ aluno_id }}{% endif %}{% if turma_id %}&turma={{ turma_id }}{% endif %}{% if data_inicio %}&data_inicio={{ data_inicio }}{% endif %}{% if data_fim %}&data_fim={{ data_fim }}{% endif %}" aria-label="Anterior">
                        <span aria-hidden="true">�</span>
                    </a>
                </li>
            {% else %}
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="Primeira">
                        <span aria-hidden="true">��</span>
                    </a>
                </li>
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="Anterior">
                        <span aria-hidden="true">�</span>
                    </a>
                </li>
            {% endif %}
            
            {% for i in presencas.paginator.page_range %}
                {% if presencas.number == i %}
                    <li class="page-item active"><a class="page-link" href="#">{{ i }}</a></li>
                {% elif i > presencas.number|add:'-3' and i < presencas.number|add:'3' %}
                    <li class="page-item">
                        <a class="page-link" href="?page={{ i }}{% if aluno_id %}&aluno={{ aluno_id }}{% endif %}{% if turma_id %}&turma={{ turma_id }}{% endif %}{% if data_inicio %}&data_inicio={{ data_inicio }}{% endif %}{% if data_fim %}&data_fim={{ data_fim }}{% endif %}">{{ i }}</a>
                    </li>
                {% endif %}
            {% endfor %}
            
            {% if presencas.has_next %}
                <li class="page-item">
                    <a class="page-link" href="?page={{ presencas.next_page_number }}{% if aluno_id %}&aluno={{ aluno_id }}{% endif %}{% if turma_id %}&turma={{ turma_id }}{% endif %}{% if data_inicio %}&data_inicio={{ data_inicio }}{% endif %}{% if data_fim %}&data_fim={{ data_fim }}{% endif %}" aria-label="Pr�xima">
                        <span aria-hidden="true">�</span>
                    </a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="?page={{ presencas.paginator.num_pages }}{% if aluno_id %}&aluno={{ aluno_id }}{% endif %}{% if turma_id %}&turma={{ turma_id }}{% endif %}{% if data_inicio %}&data_inicio={{ data_inicio }}{% endif %}{% if data_fim %}&data_fim={{ data_fim }}{% endif %}" aria-label="�ltima">
                        <span aria-hidden="true">��</span>
                    </a>
                </li>
            {% else %}
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="Pr�xima">
                        <span aria-hidden="true">�</span>
                    </a>
                </li>
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="�ltima">
                        <span aria-hidden="true">��</span>
                    </a>
                </li>
            {% endif %}
        </ul>
    </nav>
    {% endif %}
    
    <a href="{% url 'registrar_presenca' %}" class="btn btn-primary">Nova Presen�a</a>
</div>
{% endblock %}





## presencas\templates\presencas\registrar_presenca.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Registrar Presen�a</h1>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Registrar</button>
    </form>
    <a href="{% url 'lista_presencas' %}" class="btn btn-secondary mt-2">Voltar</a>
</div>
{% endblock %}





## presencas\tests\test_forms.py

python
from django.test import TestCase
from presencas.forms import PresencaForm
from alunos.models import Aluno
from turmas.models import Turma
from datetime import date, time, timedelta

class PresencaFormTest(TestCase):
    def setUp(self):
        self.turma = Turma.objects.create(codigo_turma='TURMA001')
        self.aluno = Aluno.objects.create(
            cpf='12345678901',
            nome='Jo�o Silva',
            data_nascimento=date(1990, 1, 1),
            hora_nascimento=time(14, 30),
            email='joao@example.com',
            sexo='M',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Maria Silva',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='M�e',
            nome_segundo_contato='Jos� Silva',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='Pai',
            tipo_sanguineo='A',
            fator_rh='+'
        )

    def test_form_valido(self):
        data = {
            'aluno': self.aluno.id,
            'turma': self.turma.id,
            'data': date.today(),
            'presente': True
        }
        form = PresencaForm(data=data)
        self.assertTrue(form.is_valid())

    def test_form_data_futura(self):
        data = {
            'aluno': self.aluno.id,
            'turma': self.turma.id,
            'data': date.today() + timedelta(days=1),
            'presente': True
        }
        form = PresencaForm(data=data)
        self.assertFalse(form.is_valid())
        self.assertIn('data', form.errors)

    def test_form_duplicado(self):
        # Criar uma presen�a inicial
        data = {
            'aluno': self.aluno.id,
            'turma': self.turma.id,
            'data': date.today(),
            'presente': True
        }
        form = PresencaForm(data=data)
        form.is_valid()





## presencas\tests\test_models.py

python
from django.test import TestCase
from presencas.models import PresencaAcademica
from turmas.models import Turma
from alunos.models import Aluno
from datetime import date, time

class PresencaAcademicaModelTest(TestCase):
    def setUp(self):
        self.turma = Turma.objects.create(codigo_turma='TURMA001')
        self.aluno = Aluno.objects.create(
            cpf='12345678901',
            nome='Jo�o Silva',
            data_nascimento=date(1990, 1, 1),
            hora_nascimento=time(14, 30),
            email='joao@example.com',
            sexo='M',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Maria Silva',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='M�e',
            nome_segundo_contato='Jos� Silva',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='Pai',
            tipo_sanguineo='A',
            fator_rh='+'
        )

    def test_criar_presenca(self):
        presenca = PresencaAcademica.objects.create(
            turma=self.turma,
            aluno=self.aluno,
            data=date(2023, 10, 1),
            presente=True
        )
        self.assertEqual(presenca.presente, True)
        self.assertEqual(presenca.aluno, self.aluno)





## presencas\tests\test_views.py

python
from django.test import TestCase, Client
from django.urls import reverse
from presencas.models import PresencaAcademica
from turmas.models import Turma
from alunos.models import Aluno
from datetime import date, time

class PresencaViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.turma = Turma.objects.create(codigo_turma='TURMA001')
        self.aluno = Aluno.objects.create(
            cpf='12345678901',
            nome='Jo�o Silva',
            data_nascimento=date(1990, 1, 1),
            hora_nascimento=time(14, 30),
            email='joao@example.com',
            sexo='M',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Maria Silva',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='M�e',
            nome_segundo_contato='Jos� Silva',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='Pai',
            tipo_sanguineo='A',
            fator_rh='+'
        )
        self.presenca = PresencaAcademica.objects.create(
            turma=self.turma,
            aluno=self.aluno,
            data=date(2023, 10, 1),
            presente=True
        )

    def test_listar_presencas(self):
        response = self.client.get(reverse('lista_presencas'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Jo�o Silva')



# C�digo da Funcionalidade: omaum
*Gerado automaticamente*



## omaum\asgi.py

python
"""
ASGI config for omaum project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'omaum.settings')

application = get_asgi_application()





## omaum\settings.py

python

"""
Django settings for omaum project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Adjust this path to where gettext is actually installed
GETTEXT_PATH = r'C:\msys64\usr\bin'
os.environ['PATH'] += os.pathsep + GETTEXT_PATH

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1odw#x&ng-if-cpk9zupxzv&)y7sqxe&-(g3isa6l!l6oh(ht%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',  # Certifique-se de que esta linha est� presente
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Your custom apps
    'alunos',
    'atividades',
    'cargos',
    'core',
    'cursos',
    'frequencias',
    'iniciacoes',
    'presencas',
    'punicoes',
    'relatorios',
    'turmas',
    # Other apps as needed
]


MIDDLEWARE = [
    'core.middleware.ManutencaoMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
    INTERNAL_IPS = ['127.0.0.1']

CRISPY_TEMPLATE_PACK = 'bootstrap4'

ROOT_URLCONF = 'omaum.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Make sure this points to your templates directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'omaum.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

USE_I18N = True
USE_L10N = True
LANGUAGE_CODE = 'pt-BR'
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'
LOGIN_URL = 'login'  # Adjust this if your login URL name is different

# Specifies the directory paths for localization (translation) files in the Django project
LOCALE_PATHS = (
    BASE_DIR / 'locale',
)

# Adicione ou verifique estas configura��es
CSRF_COOKIE_AGE = 86400  # Dura��o do cookie CSRF em segundos (24 horas)
CSRF_USE_SESSIONS = False  # Se True, armazena o token na sess�o em vez de cookies
SESSION_COOKIE_AGE = 86400  # Dura��o da sess�o em segundos (24 horas)





## omaum\urls.py

python
from django.contrib import admin
from django.urls import path, include
from django.views.generic import RedirectView
from django.conf import settings  # Adicione esta linha

urlpatterns = [
    path('admin/', admin.site.urls),
    path('alunos/', include('alunos.urls')),
    path('atividades/', include('atividades.urls')),
    path('cargos/', include('cargos.urls')),
    path('core/', include('core.urls')),
    path('cursos/', include('cursos.urls')),
    path('frequencias/', include('frequencias.urls')),
    path('iniciacoes/', include('iniciacoes.urls')),
    path('presencas/', include('presencas.urls')),
    path('punicoes/', include('punicoes.urls')),
    path('relatorios/', include('relatorios.urls')),
    path('turmas/', include('turmas.urls')),
    path('', RedirectView.as_view(pattern_name='core:pagina_inicial'), name='home'),
]

from django.contrib.auth import views as auth_views

urlpatterns += [
    path('accounts/login/', auth_views.LoginView.as_view(template_name='registration/login.html'), name='login'),
    path('accounts/logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),
]

# Adicione este bloco no final do arquivo
if settings.DEBUG:
    import debug_toolbar
    urlpatterns += [
        path('__debug__/', include(debug_toolbar.urls)),
    ]





## omaum\wsgi.py

python
"""
WSGI config for omaum project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'omaum.settings')

application = get_wsgi_application()



# C�digo da Funcionalidade: matriculas
*Gerado automaticamente*



## matriculas\templates\matriculas\detalhes_matricula.html

html
{% extends 'core/base.html' %}

{% block content %}
<!-- Existing content -->

<a href="javascript:history.back()" class="back-button">Voltar</a>
{% endblock %}





## matriculas\templates\matriculas\listar_matriculas.html

html
{% extends 'core/base.html' %}

{% block content %}
<!-- Existing content -->

<a href="javascript:history.back()" class="back-button">Voltar</a>
{% endblock %}





## matriculas\templates\matriculas\realizar_matricula.html

html
{% extends 'core/base.html' %}

{% block content %}
<!-- Existing content -->

<a href="javascript:history.back()" class="back-button">Voltar</a>
{% endblock %}



# C�digo da Funcionalidade: omaum
*Gerado automaticamente*



## omaum\asgi.py

python
"""
ASGI config for omaum project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'omaum.settings')

application = get_asgi_application()





## omaum\settings.py

python

"""
Django settings for omaum project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Adjust this path to where gettext is actually installed
GETTEXT_PATH = r'C:\msys64\usr\bin'
os.environ['PATH'] += os.pathsep + GETTEXT_PATH

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1odw#x&ng-if-cpk9zupxzv&)y7sqxe&-(g3isa6l!l6oh(ht%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',  # Certifique-se de que esta linha est� presente
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Your custom apps
    'alunos',
    'atividades',
    'cargos',
    'core',
    'cursos',
    'frequencias',
    'iniciacoes',
    'presencas',
    'punicoes',
    'relatorios',
    'turmas',
    # Other apps as needed
]


MIDDLEWARE = [
    'core.middleware.ManutencaoMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
    INTERNAL_IPS = ['127.0.0.1']

CRISPY_TEMPLATE_PACK = 'bootstrap4'

ROOT_URLCONF = 'omaum.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Make sure this points to your templates directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'omaum.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

USE_I18N = True
USE_L10N = True
LANGUAGE_CODE = 'pt-BR'
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'
LOGIN_URL = 'login'  # Adjust this if your login URL name is different

# Specifies the directory paths for localization (translation) files in the Django project
LOCALE_PATHS = (
    BASE_DIR / 'locale',
)

# Adicione ou verifique estas configura��es
CSRF_COOKIE_AGE = 86400  # Dura��o do cookie CSRF em segundos (24 horas)
CSRF_USE_SESSIONS = False  # Se True, armazena o token na sess�o em vez de cookies
SESSION_COOKIE_AGE = 86400  # Dura��o da sess�o em segundos (24 horas)





## omaum\urls.py

python
from django.contrib import admin
from django.urls import path, include
from django.views.generic import RedirectView
from django.conf import settings  # Adicione esta linha

urlpatterns = [
    path('admin/', admin.site.urls),
    path('alunos/', include('alunos.urls')),
    path('atividades/', include('atividades.urls')),
    path('cargos/', include('cargos.urls')),
    path('core/', include('core.urls')),
    path('cursos/', include('cursos.urls')),
    path('frequencias/', include('frequencias.urls')),
    path('iniciacoes/', include('iniciacoes.urls')),
    path('presencas/', include('presencas.urls')),
    path('punicoes/', include('punicoes.urls')),
    path('relatorios/', include('relatorios.urls')),
    path('turmas/', include('turmas.urls')),
    path('', RedirectView.as_view(pattern_name='core:pagina_inicial'), name='home'),
]

from django.contrib.auth import views as auth_views

urlpatterns += [
    path('accounts/login/', auth_views.LoginView.as_view(template_name='registration/login.html'), name='login'),
    path('accounts/logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),
]

# Adicione este bloco no final do arquivo
if settings.DEBUG:
    import debug_toolbar
    urlpatterns += [
        path('__debug__/', include(debug_toolbar.urls)),
    ]





## omaum\wsgi.py

python
"""
WSGI config for omaum project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'omaum.settings')

application = get_wsgi_application()



# C�digo da Funcionalidade: iniciacoes
*Gerado automaticamente*



## iniciacoes\admin.py

python
from django.contrib import admin
from .models import Iniciacao

@admin.register(Iniciacao)
class IniciacaoAdmin(admin.ModelAdmin):
    list_display = ('aluno', 'nome_curso', 'data_iniciacao')
    list_filter = ('nome_curso', 'data_iniciacao')
    search_fields = ('aluno__nome', 'nome_curso')
    date_hierarchy = 'data_iniciacao'
    ordering = ('-data_iniciacao',)
    raw_id_fields = ('aluno',)





## iniciacoes\apps.py

python
from django.apps import AppConfig


class IniciacoesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'iniciacoes'





## iniciacoes\forms.py

python
from django import forms
from django.core.exceptions import ValidationError
from datetime import date
from .models import Iniciacao

class IniciacaoForm(forms.ModelForm):
    class Meta:
        model = Iniciacao
        fields = ['aluno', 'nome_curso', 'data_iniciacao', 'observacoes']
        widgets = {
            'data_iniciacao': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'aluno': forms.Select(attrs={'class': 'form-control'}),
            'nome_curso': forms.TextInput(attrs={'class': 'form-control'}),
            'observacoes': forms.Textarea(attrs={'class': 'form-control', 'rows': 4}),
        }
        labels = {
            'aluno': 'Aluno',
            'nome_curso': 'Nome do Curso',
            'data_iniciacao': 'Data de Inicia��o',
            'observacoes': 'Observa��es'
        }
        help_texts = {
            'nome_curso': 'Digite o nome completo do curso de inicia��o',
            'data_iniciacao': 'Selecione a data em que o aluno foi iniciado no curso'
        }

    def clean(self):
        cleaned_data = super().clean()
        aluno = cleaned_data.get('aluno')
        nome_curso = cleaned_data.get('nome_curso')
        data_iniciacao = cleaned_data.get('data_iniciacao')
        
        # Verifica se j� existe uma inicia��o para este aluno neste curso
        if aluno and nome_curso:
            # Exclui a inst�ncia atual em caso de edi��o
            instance_id = self.instance.id if self.instance else None
            
            # Verifica se j� existe outra inicia��o com o mesmo aluno e curso
            if Iniciacao.objects.filter(aluno=aluno, nome_curso=nome_curso).exclude(id=instance_id).exists():
                raise ValidationError(
                    f"O aluno {aluno.nome} j� possui uma inicia��o no curso {nome_curso}."
                )
        
        return cleaned_data

    def clean_data_iniciacao(self):
        data_iniciacao = self.cleaned_data.get('data_iniciacao')
        
        if data_iniciacao and data_iniciacao > date.today():
            raise ValidationError("A data de inicia��o n�o pode ser no futuro.")
        
        return data_iniciacao




## iniciacoes\models.py

python
from django.db import models
from alunos.models import Aluno


class Iniciacao(models.Model):
    """
    Modelo para armazenar informa��es sobre inicia��es de alunos em cursos.
    
    Atributos:
        aluno (ForeignKey): Refer�ncia ao aluno que recebeu a inicia��o
        nome_curso (str): Nome do curso de inicia��o
        data_iniciacao (date): Data em que a inicia��o ocorreu
        observacoes (str, opcional): Observa��es adicionais sobre a inicia��o
    """
    aluno = models.ForeignKey(Aluno, on_delete=models.CASCADE, related_name='iniciacoes')
    nome_curso = models.CharField(max_length=100)
    data_iniciacao = models.DateField()
    observacoes = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"Inicia��o - {self.aluno.nome} - {self.nome_curso}"

    class Meta:
        ordering = ['-data_iniciacao']
        verbose_name = 'Inicia��o'
        verbose_name_plural = 'Inicia��es'





## iniciacoes\tests.py

python
from django.test import TestCase

# Create your tests here.





## iniciacoes\urls.py

python
from django.urls import path
from . import views

app_name = 'iniciacoes'

urlpatterns = [
    path('', views.listar_iniciacoes, name='listar_iniciacoes'),
    path('nova/', views.criar_iniciacao, name='criar_iniciacao'),
    path('<int:id>/editar/', views.editar_iniciacao, name='editar_iniciacao'),
    path('<int:id>/excluir/', views.excluir_iniciacao, name='excluir_iniciacao'),
    path('<int:id>/detalhes/', views.detalhe_iniciacao, name='detalhe_iniciacao'),
]





## iniciacoes\views.py

python
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q
from .models import Iniciacao
from .forms import IniciacaoForm
from alunos.models import Aluno
from django.contrib.auth.decorators import login_required


@login_required
def listar_iniciacoes(request):
    # Par�metros de filtro
    aluno_id = request.GET.get('aluno')
    nome_curso = request.GET.get('curso')
    data_inicio = request.GET.get('data_inicio')
    data_fim = request.GET.get('data_fim')
    
    # Query base
    iniciacoes = Iniciacao.objects.all()
    
    # Aplicar filtros
    if aluno_id:
        iniciacoes = iniciacoes.filter(aluno_id=aluno_id)
    
    if nome_curso:
        iniciacoes = iniciacoes.filter(nome_curso__icontains=nome_curso)
    
    if data_inicio:
        iniciacoes = iniciacoes.filter(data_iniciacao__gte=data_inicio)
    
    if data_fim:
        iniciacoes = iniciacoes.filter(data_iniciacao__lte=data_fim)
    
    # Busca geral
    search_query = request.GET.get('search', '')
    if search_query:
        iniciacoes = iniciacoes.filter(
            Q(aluno__nome__icontains=search_query) |
            Q(nome_curso__icontains=search_query)
        )
    
    # Pagina��o
    paginator = Paginator(iniciacoes, 10)  # 10 itens por p�gina
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    # Lista de alunos para o filtro
    alunos = Aluno.objects.all()
    
    context = {
        'page_obj': page_obj,
        'alunos': alunos,
        'filtros': {
            'aluno_id': aluno_id,
            'nome_curso': nome_curso,
            'data_inicio': data_inicio,
            'data_fim': data_fim,
            'search': search_query
        }
    }
    
    return render(request, 'iniciacoes/listar_iniciacoes.html', context)


@login_required
def criar_iniciacao(request):
    if request.method == 'POST':
        form = IniciacaoForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Inicia��o criada com sucesso.')
            return redirect('iniciacoes:listar_iniciacoes')
    else:
        form = IniciacaoForm()
    return render(request, 'iniciacoes/criar_iniciacao.html', {'form': form})


@login_required
def detalhe_iniciacao(request, id):
    iniciacao = get_object_or_404(Iniciacao, id=id)
    return render(request, 'iniciacoes/detalhe_iniciacao.html', {'iniciacao': iniciacao})


@login_required
def editar_iniciacao(request, id):
    iniciacao = get_object_or_404(Iniciacao, id=id)
    if request.method == 'POST':
        form = IniciacaoForm(request.POST, instance=iniciacao)
        if form.is_valid():
            form.save()
            messages.success(request, 'Inicia��o atualizada com sucesso.')
            return redirect('iniciacoes:listar_iniciacoes')
    else:
        form = IniciacaoForm(instance=iniciacao)
    return render(request, 'iniciacoes/editar_iniciacao.html', {'form': form, 'iniciacao': iniciacao})


@login_required
def excluir_iniciacao(request, id):
    iniciacao = get_object_or_404(Iniciacao, id=id)
    if request.method == 'POST':
        iniciacao.delete()
        messages.success(request, 'Inicia��o exclu�da com sucesso.')
        return redirect('iniciacoes:listar_iniciacoes')
    return render(request, 'iniciacoes/excluir_iniciacao.html', {'iniciacao': iniciacao})

import csv
from django.http import HttpResponse

@login_required
def exportar_iniciacoes_csv(request):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="iniciacoes.csv"'
    
    # Aplicar os mesmos filtros da listagem
    aluno_id = request.GET.get('aluno')
    nome_curso = request.GET.get('curso')
    data_inicio = request.GET.get('data_inicio')
    data_fim = request.GET.get('data_fim')
    search_query = request.GET.get('search', '')
    
    # Query base
    iniciacoes = Iniciacao.objects.all()
    
    # Aplicar filtros (mesmo c�digo da view listar_iniciacoes)
    if aluno_id:
        iniciacoes = iniciacoes.filter(aluno_id=aluno_id)
    
    if nome_curso:
        iniciacoes = iniciacoes.filter(nome_curso__icontains=nome_curso)
    
    if data_inicio:
        iniciacoes = iniciacoes.filter(data_iniciacao__gte=data_inicio)
    
    if data_fim:
        iniciacoes = iniciacoes.filter(data_iniciacao__lte=data_fim)
    
    if search_query:
        iniciacoes = iniciacoes.filter(
            Q(aluno__nome__icontains=search_query) |
            Q(nome_curso__icontains=search_query)
        )
    
    writer = csv.writer(response)
    writer.writerow(['Aluno', 'Curso', 'Data de Inicia��o', 'Observa��es'])
    
    for iniciacao in iniciacoes:
        writer.writerow([
            iniciacao.aluno.nome,
            iniciacao.nome_curso,
            iniciacao.data_iniciacao.strftime('%d/%m/%Y'),
            iniciacao.observacoes or ''
        ])
    
    # Adicionar mensagem de sucesso
    messages.success(request, f'Arquivo CSV com {iniciacoes.count()} inicia��es exportado com sucesso.')
    
    return response





## iniciacoes\migrations\0001_initial.py

python
# Generated by Django 5.1.7 on 2025-03-27 11:39

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('alunos', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Iniciacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_curso', models.CharField(max_length=100)),
                ('data_iniciacao', models.DateField()),
                ('observacoes', models.TextField(blank=True, null=True)),
                ('aluno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='iniciacoes', to='alunos.aluno')),
            ],
            options={
                'verbose_name': 'Inicia��o',
                'verbose_name_plural': 'Inicia��es',
                'ordering': ['-data_iniciacao'],
            },
        ),
    ]





## iniciacoes\templates\iniciacoes\criar_iniciacao.html

html
{% extends 'base.html' %}

{% block title %}Nova Inicia��o{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h1 class="h3 mb-0">Nova Inicia��o</h1>
        </div>
        <div class="card-body">
            <form method="post">
                {% csrf_token %}
                
                {% if form.errors %}
                <div class="alert alert-danger">
                    <strong>Erro ao salvar o formul�rio:</strong>
                    <ul>
                        {% for field, errors in form.errors.items %}
                            {% for error in errors %}
                                <li>{{ error }}</li>
                            {% endfor %}
                        {% endfor %}
                    </ul>
                </div>
                {% endif %}
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="{{ form.aluno.id_for_label }}">{{ form.aluno.label }}</label>
                            {{ form.aluno }}
                            {% if form.aluno.help_text %}
                            <small class="form-text text-muted">{{ form.aluno.help_text }}</small>
                            {% endif %}
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="{{ form.nome_curso.id_for_label }}">{{ form.nome_curso.label }}</label>
                            {{ form.nome_curso }}
                            {% if form.nome_curso.help_text %}
                            <small class="form-text text-muted">{{ form.nome_curso.help_text }}</small>
                            {% endif %}
                        </div>
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="{{ form.data_iniciacao.id_for_label }}">{{ form.data_iniciacao.label }}</label>
                            {{ form.data_iniciacao }}
                            {% if form.data_iniciacao.help_text %}
                            <small class="form-text text-muted">{{ form.data_iniciacao.help_text }}</small>
                            {% endif %}
                        </div>
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label for="{{ form.observacoes.id_for_label }}">{{ form.observacoes.label }}</label>
                            {{ form.observacoes }}
                        </div>
                    </div>
                </div>
                
                <div class="mt-4">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Salvar
                    </button>
                    <a href="{% url 'iniciacoes:listar_iniciacoes' %}" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Cancelar
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## iniciacoes\templates\iniciacoes\detalhe_iniciacao.html

html
{% extends 'base.html' %}

{% block title %}Detalhes da Inicia��o{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-info text-white">
            <h1 class="h3 mb-0">Detalhes da Inicia��o</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h5 class="card-title">Informa��es Gerais</h5>
                    <dl class="row">
                        <dt class="col-sm-4">Aluno:</dt>
                        <dd class="col-sm-8">{{ iniciacao.aluno.nome }}</dd>
                        
                        <dt class="col-sm-4">Curso:</dt>
                        <dd class="col-sm-8">{{ iniciacao.nome_curso }}</dd>
                        
                        <dt class="col-sm-4">Data:</dt>
                        <dd class="col-sm-8">{{ iniciacao.data_iniciacao|date:"d/m/Y" }}</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <h5 class="card-title">Observa��es</h5>
                    <p class="card-text">{{ iniciacao.observacoes|default:"Nenhuma observa��o registrada."|linebreaks }}</p>
                </div>
            </div>
            
            <div class="mt-4">
                <a href="{% url 'iniciacoes:editar_iniciacao' iniciacao.id %}" class="btn btn-warning">
                    <i class="fas fa-edit"></i> Editar
                </a>
                <a href="{% url 'iniciacoes:excluir_iniciacao' iniciacao.id %}" class="btn btn-danger">
                    <i class="fas fa-trash"></i> Excluir
                </a>
                <a href="{% url 'iniciacoes:listar_iniciacoes' %}" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Voltar
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}




## iniciacoes\templates\iniciacoes\editar_iniciacao.html

html
{% extends 'base.html' %}

{% block title %}Editar Inicia��o{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-warning">
            <h1 class="h3 mb-0">Editar Inicia��o</h1>
        </div>
        <div class="card-body">
            <form method="post">
                {% csrf_token %}
               
                {% if form.errors %}
                <div class="alert alert-danger">
                    <strong>Erro ao salvar o formul�rio:</strong>
                    <ul>
                        {% for field, errors in form.errors.items %}
                            {% for error in errors %}
                                <li>{{ error }}</li>
                            {% endfor %}
                        {% endfor %}
                    </ul>
                </div>
                {% endif %}
               
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="{{ form.aluno.id_for_label }}">{{ form.aluno.label }}</label>
                            {{ form.aluno }}
                            {% if form.aluno.help_text %}
                            <small class="form-text text-muted">{{ form.aluno.help_text }}</small>
                            {% endif %}
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="{{ form.nome_curso.id_for_label }}">{{ form.nome_curso.label }}</label>
                            {{ form.nome_curso }}
                            {% if form.nome_curso.help_text %}
                            <small class="form-text text-muted">{{ form.nome_curso.help_text }}</small>
                            {% endif %}
                        </div>
                    </div>
                </div>
               
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="{{ form.data_iniciacao.id_for_label }}">{{ form.data_iniciacao.label }}</label>
                            {{ form.data_iniciacao }}
                            {% if form.data_iniciacao.help_text %}
                            <small class="form-text text-muted">{{ form.data_iniciacao.help_text }}</small>
                            {% endif %}
                        </div>
                    </div>
                </div>
               
                <div class="row mb-3">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label for="{{ form.observacoes.id_for_label }}">{{ form.observacoes.label }}</label>
                            {{ form.observacoes }}
                        </div>
                    </div>
                </div>
               
                <div class="mt-4">
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-save"></i> Salvar Altera��es
                    </button>
                    <a href="{% url 'iniciacoes:listar_iniciacoes' %}" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Cancelar
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}




## iniciacoes\templates\iniciacoes\excluir_iniciacao.html

html
{% extends 'base.html' %}

{% block title %}Excluir Inicia��o{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="card shadow-sm border-danger">
        <div class="card-header bg-danger text-white">
            <h1 class="h3 mb-0">Excluir Inicia��o</h1>
        </div>
        <div class="card-body">
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle"></i> Aten��o: Esta a��o n�o pode ser desfeita!
            </div>
            
            <p class="lead">Tem certeza que deseja excluir a inicia��o abaixo?</p>
            
            <dl class="row">
                <dt class="col-sm-3">Aluno:</dt>
                <dd class="col-sm-9">{{ iniciacao.aluno.nome }}</dd>
                
                <dt class="col-sm-3">Curso:</dt>
                <dd class="col-sm-9">{{ iniciacao.nome_curso }}</dd>
                
                <dt class="col-sm-3">Data:</dt>
                <dd class="col-sm-9">{{ iniciacao.data_iniciacao|date:"d/m/Y" }}</dd>
            </dl>
            
            <form method="post" class="mt-4">
                {% csrf_token %}
                <button type="submit" class="btn btn-danger">
                    <i class="fas fa-trash"></i> Confirmar Exclus�o
                </button>
                <a href="{% url 'iniciacoes:listar_iniciacoes' %}" class="btn btn-secondary">
                    <i class="fas fa-times"></i> Cancelar
                </a>
            </form>
        </div>
    </div>
</div>
{% endblock %}




## iniciacoes\templates\iniciacoes\listar_iniciacoes.html

html
{% extends 'base.html' %}

{% block title %}Lista de Inicia��es{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h1 class="h3 mb-0">Lista de Inicia��es</h1>
        </div>
        <div class="card-body">
            <!-- Bot�o de Nova Inicia��o -->
            <div class="mb-3">
                <a href="{% url 'iniciacoes:criar_iniciacao' %}" class="btn btn-success">
                    <i class="fas fa-plus-circle"></i> Nova Inicia��o
                </a>
            </div>
            
            <!-- Filtros Avan�ados -->
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Filtros</h5>
                </div>
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <!-- Busca geral -->
                        <div class="col-md-12 mb-2">
                            <div class="input-group">
                                <input type="text" name="search" class="form-control" placeholder="Buscar por aluno ou curso" value="{{ filtros.search }}">
                                <button class="btn btn-outline-primary" type="submit">Buscar</button>
                            </div>
                        </div>
                        
                        <!-- Filtros espec�ficos -->
                        <div class="col-md-3">
                            <label for="aluno" class="form-label">Aluno</label>
                            <select name="aluno" id="aluno" class="form-select">
                                <option value="">Todos os alunos</option>
                                {% for aluno in alunos %}
                                <option value="{{ aluno.id }}" {% if filtros.aluno_id == aluno.id|stringformat:"s" %}selected{% endif %}>
                                    {{ aluno.nome }}
                                </option>
                                {% endfor %}
                            </select>
                        </div>
                        
                        <div class="col-md-3">
                            <label for="curso" class="form-label">Curso</label>
                            <input type="text" name="curso" id="curso" class="form-control" value="{{ filtros.nome_curso }}">
                        </div>
                        
                        <div class="col-md-3">
                            <label for="data_inicio" class="form-label">Data Inicial</label>
                            <input type="date" name="data_inicio" id="data_inicio" class="form-control" value="{{ filtros.data_inicio }}">
                        </div>
                        
                        <div class="col-md-3">
                            <label for="data_fim" class="form-label">Data Final</label>
                            <input type="date" name="data_fim" id="data_fim" class="form-control" value="{{ filtros.data_fim }}">
                        </div>
                        
                        <div class="col-12 mt-3">
                            <button type="submit" class="btn btn-primary">Filtrar</button>
                            <a href="{% url 'iniciacoes:listar_iniciacoes' %}" class="btn btn-secondary">Limpar Filtros</a>
                        </div>
                    </form>
                </div>
            </div>
            
            <!-- Tabela de Inicia��es -->
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Aluno</th>
                            <th>Curso</th>
                            <th>Data</th>
                            <th>A��es</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for iniciacao in page_obj %}
                        <tr>
                            <td>{{ iniciacao.aluno.nome }}</td>
                            <td>{{ iniciacao.nome_curso }}</td>
                            <td>{{ iniciacao.data_iniciacao|date:"d/m/Y" }}</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a href="{% url 'iniciacoes:detalhe_iniciacao' iniciacao.id %}" class="btn btn-sm btn-info">
                                        <i class="fas fa-eye"></i> Detalhes
                                    </a>
                                    <a href="{% url 'iniciacoes:editar_iniciacao' iniciacao.id %}" class="btn btn-sm btn-warning">
                                        <i class="fas fa-edit"></i> Editar
                                    </a>
                                    <a href="{% url 'iniciacoes:excluir_iniciacao' iniciacao.id %}" class="btn btn-sm btn-danger">
                                        <i class="fas fa-trash"></i> Excluir
                                    </a>
                                </div>
                            </td>
                        </tr>
                        {% empty %}
                        <tr>
                            <td colspan="4" class="text-center">Nenhuma inicia��o encontrada.</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            
            <!-- Pagina��o -->
            {% if page_obj.has_other_pages %}
            <nav aria-label="Pagina��o">
                <ul class="pagination justify-content-center">
                    {% if page_obj.has_previous %}
                    <li class="page-item">
                        <a class="page-link" href="?page=1{% for key, value in filtros.items %}{% if value %}&{{ key }}={{ value }}{% endif %}{% endfor %}" aria-label="Primeira">
                            <span aria-hidden="true">��</span>
                        </a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="?page={{ page_obj.previous_page_number }}{% for key, value in filtros.items %}{% if value %}&{{ key }}={{ value }}{% endif %}{% endfor %}" aria-label="Anterior">
                            <span aria-hidden="true">�</span>
                        </a>
                    </li>
                    {% else %}
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1" aria-disabled="true">��</a>
                    </li>
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1" aria-disabled="true">�</a>
                    </li>
                    {% endif %}
                    
                    {% for num in page_obj.paginator.page_range %}
                        {% if page_obj.number == num %}
                        <li class="page-item active" aria-current="page">
                            <span class="page-link">{{ num }}</span>
                        </li>
                        {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                        <li class="page-item">
                            <a class="page-link" href="?page={{ num }}{% for key, value in filtros.items %}{% if value %}&{{ key }}={{ value }}{% endif %}{% endfor %}">{{ num }}</a>
                        </li>
                        {% endif %}
                    {% endfor %}
                    
                    {% if page_obj.has_next %}
                    <li class="page-item">
                        <a class="page-link" href="?page={{ page_obj.next_page_number }}{% for key, value in filtros.items %}{% if value %}&{{ key }}={{ value }}{% endif %}{% endfor %}" aria-label="Pr�xima">
                            <span aria-hidden="true">�</span>
                        </a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="?page={{ page_obj.paginator.num_pages }}{% for key, value in filtros.items %}{% if value %}&{{ key }}={{ value }}{% endif %}{% endfor %}" aria-label="�ltima">
                            <span aria-hidden="true">��</span>
                        </a>
                    </li>
                    {% else %}
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1" aria-disabled="true">�</a>
                    </li>
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1" aria-disabled="true">��</a>
                    </li>
                    {% endif %}
                </ul>
            </nav>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}




## iniciacoes\tests\test_forms.py

python
from django.test import TestCase
from iniciacoes.forms import IniciacaoForm
from iniciacoes.models import Iniciacao
from alunos.models import Aluno
from datetime import date, time

class IniciacaoFormTest(TestCase):
    def setUp(self):
        self.aluno = Aluno.objects.create(
            cpf='12345678901',
            nome='Jo�o Silva',
            data_nascimento=date(1990, 1, 1),
            hora_nascimento=time(14, 30),
            email='joao@example.com',
            sexo='M',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Maria Silva',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='M�e',
            nome_segundo_contato='Jos� Silva',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='Pai',
            tipo_sanguineo='A',
            fator_rh='+'
        )
        
        # Criar uma inicia��o para testar a valida��o de duplicidade
        self.iniciacao = Iniciacao.objects.create(
            aluno=self.aluno,
            nome_curso='Curso de Inicia��o',
            data_iniciacao=date(2023, 10, 1)
        )
    
    def test_form_valido(self):
        # Testando um formul�rio com dados v�lidos
        form_data = {
            'aluno': self.aluno.id,
            'nome_curso': 'Curso de Medita��o',  # Curso diferente
            'data_iniciacao': date(2023, 11, 1),
            'observacoes': 'Teste de observa��o'
        }
        form = IniciacaoForm(data=form_data)
        self.assertTrue(form.is_valid())
    
    def test_form_invalido_curso_duplicado(self):
        # Testando um formul�rio com curso duplicado para o mesmo aluno
        form_data = {
            'aluno': self.aluno.id,
            'nome_curso': 'Curso de Inicia��o',  # Mesmo curso que j� existe
            'data_iniciacao': date(2023, 11, 1),
            'observacoes': 'Teste de observa��o'
        }
        form = IniciacaoForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn('__all__', form.errors)
    
    def test_form_campos_obrigatorios(self):
        # Testando um formul�rio sem campos obrigat�rios
        form_data = {
            'observacoes': 'Apenas observa��es'
        }
        form = IniciacaoForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn('aluno', form.errors)
        self.assertIn('nome_curso', form.errors)
        self.assertIn('data_iniciacao', form.errors)





## iniciacoes\tests\test_models.py

python
from django.test import TestCase
from iniciacoes.models import Iniciacao
from alunos.models import Aluno
from datetime import date, time

class IniciacaoModelTest(TestCase):
    def setUp(self):
        self.aluno = Aluno.objects.create(
            cpf='12345678901',
            nome='Jo�o Silva',
            data_nascimento=date(1990, 1, 1),
            hora_nascimento=time(14, 30),
            email='joao@example.com',
            sexo='M',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Maria Silva',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='M�e',
            nome_segundo_contato='Jos� Silva',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='Pai',
            tipo_sanguineo='A',
            fator_rh='+'
        )

    def test_criar_iniciacao(self):
        iniciacao = Iniciacao.objects.create(
            aluno=self.aluno,
            nome_curso='Curso de Inicia��o',
            data_iniciacao=date(2023, 10, 1)
        )
        self.assertEqual(iniciacao.nome_curso, 'Curso de Inicia��o')
        self.assertEqual(iniciacao.aluno, self.aluno)





## iniciacoes\tests\test_views.py

python
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from iniciacoes.models import Iniciacao
from alunos.models import Aluno
from datetime import date, time

class IniciacaoViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        # Criar um usu�rio de teste e fazer login
        self.usuario = User.objects.create_user(username='usuarioteste', password='12345')
        self.client.login(username='usuarioteste', password='12345')
        
        self.aluno = Aluno.objects.create(
            cpf='12345678901',
            nome='Jo�o Silva',
            data_nascimento=date(1990, 1, 1),
            hora_nascimento=time(14, 30),
            email='joao@example.com',
            sexo='M',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Maria Silva',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='M�e',
            nome_segundo_contato='Jos� Silva',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='Pai',
            tipo_sanguineo='A',
            fator_rh='+'
        )
        self.iniciacao = Iniciacao.objects.create(
            aluno=self.aluno,
            nome_curso='Curso de Inicia��o',
            data_iniciacao=date(2023, 10, 1)
        )

    def test_listar_iniciacoes(self):
        response = self.client.get(reverse('iniciacoes:listar_iniciacoes'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Jo�o Silva')
        self.assertContains(response, 'Curso de Inicia��o')





## iniciacoes\tests\test_views_avancado.py

python
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from iniciacoes.models import Iniciacao
from alunos.models import Aluno
from datetime import date, time, timedelta
import json

class IniciacaoViewAvancadoTest(TestCase):
    def setUp(self):
        self.client = Client()
        # Criar um usu�rio de teste e fazer login
        self.usuario = User.objects.create_user(username='usuarioteste', password='12345')
        self.client.login(username='usuarioteste', password='12345')
        
        # Criar v�rios alunos para testar pagina��o e filtros
        self.aluno1 = Aluno.objects.create(
            cpf='12345678901',
            nome='Jo�o Silva',
            data_nascimento=date(1990, 1, 1),
            hora_nascimento=time(14, 30),
            email='joao@example.com',
            sexo='M',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Maria Silva',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='M�e',
            nome_segundo_contato='Jos� Silva',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='Pai',
            tipo_sanguineo='A',
            fator_rh='+'
        )
        
        self.aluno2 = Aluno.objects.create(
            cpf='98765432109',
            nome='Maria Oliveira',
            data_nascimento=date(1992, 5, 15),
            hora_nascimento=time(10, 0),
            email='maria@example.com',
            sexo='F',
            nacionalidade='Brasileira',
            naturalidade='Rio de Janeiro',
            rua='Rua Exemplo',
            numero_imovel='456',
            cidade='Rio de Janeiro',
            estado='RJ',
            bairro='Copacabana',
            cep='22000000',
            nome_primeiro_contato='Pedro Oliveira',
            celular_primeiro_contato='21999999999',
            tipo_relacionamento_primeiro_contato='Pai',
            nome_segundo_contato='Ana Oliveira',
            celular_segundo_contato='21988888888',
            tipo_relacionamento_segundo_contato='M�e',
            tipo_sanguineo='O',
            fator_rh='-'
        )
        
        # Criar v�rias inicia��es para testar pagina��o
        data_base = date(2023, 1, 1)
        cursos = ['Yoga', 'Medita��o', 'Reiki', 'Tai Chi', 'Chi Kung', 
                 'Aromaterapia', 'Cromoterapia', 'Acupuntura', 'Shiatsu', 
                 'Reflexologia', 'Ayurveda', 'Fitoterapia']
        
        for i, curso in enumerate(cursos):
            aluno = self.aluno1 if i % 2 == 0 else self.aluno2
            Iniciacao.objects.create(
                aluno=aluno,
                nome_curso=curso,
                data_iniciacao=data_base + timedelta(days=i*30),
                observacoes=f"Observa��o para o curso de {curso}"
            )
    
    def test_paginacao(self):
        response = self.client.get(reverse('iniciacoes:listar_iniciacoes'))
        self.assertEqual(response.status_code, 200)
        self.assertTrue('page_obj' in response.context)
        self.assertEqual(len(response.context['page_obj']), 10)  # 10 itens por p�gina
        
        # Testar segunda p�gina
        response = self.client.get(f"{reverse('iniciacoes:listar_iniciacoes')}?page=2")
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(response.context['page_obj']), 2)  # 2 itens restantes
    
    def test_filtro_aluno(self):
        url = f"{reverse('iniciacoes:listar_iniciacoes')}?aluno={self.aluno1.id}"
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        
        # Verificar se apenas as inicia��es do aluno1 est�o presentes
        for iniciacao in response.context['page_obj']:
            self.assertEqual(iniciacao.aluno.id, self.aluno1.id)
    
    def test_filtro_curso(self):
        url = f"{reverse('iniciacoes:listar_iniciacoes')}?curso=Yoga"
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        
        # Verificar se apenas as inicia��es com "Yoga" no nome do curso est�o presentes
        for iniciacao in response.context['page_obj']:
            self.assertIn('Yoga', iniciacao.nome_curso)
    
    def test_filtro_data(self):
        data_inicio = date(2023, 3, 1).strftime('%Y-%m-%d')
        data_fim = date(2023, 6, 30).strftime('%Y-%m-%d')
        url = f"{reverse('iniciacoes:listar_iniciacoes')}?data_inicio={data_inicio}&data_fim={data_fim}"
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        
        # Verificar se apenas as inicia��es dentro do per�odo est�o presentes
        for iniciacao in response.context['page_obj']:
            self.assertTrue(iniciacao.data_iniciacao >= date(2023, 3, 1))
            self.assertTrue(iniciacao.data_iniciacao <= date(2023, 6, 30))
    
    def test_busca_geral(self):
        url = f"{reverse('iniciacoes:listar_iniciacoes')}?search=Reiki"
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        
        # Verificar se apenas as inicia��es com "Reiki" no nome do curso est�o presentes
        for iniciacao in response.context['page_obj']:
            self.assertIn('Reiki', iniciacao.nome_curso)
    
    def test_criar_iniciacao_duplicada(self):
        # Tentar criar uma inicia��o duplicada (mesmo aluno e curso)
        iniciacao_existente = Iniciacao.objects.filter(aluno=self.aluno1).first()
        
        form_data = {
            'aluno': self.aluno1.id,
            'nome_curso': iniciacao_existente.nome_curso,
            'data_iniciacao': '2023-12-01',
            'observacoes': 'Tentativa de duplica��o'
        }
        
        response = self.client.post(reverse('iniciacoes:criar_iniciacao'), form_data)
        self.assertEqual(response.status_code, 200)  # Permanece no formul�rio
        self.assertContains(response, "j� possui uma inicia��o no curso")



# C�digo da Funcionalidade: frequencias
*Gerado automaticamente*



## frequencias\admin.py

python
from django.contrib import admin
from .models import Frequencia

@admin.register(Frequencia)
class FrequenciaAdmin(admin.ModelAdmin):
    list_display = ('aluno', 'turma', 'data', 'presente', 'registrado_por', 'data_registro')
    list_filter = ('presente', 'data', 'turma', 'registrado_por')
    search_fields = ('aluno__nome', 'turma__codigo_turma', 'justificativa')
    date_hierarchy = 'data'
    readonly_fields = ('data_registro', 'data_atualizacao')
    fieldsets = (
        ('Informa��es B�sicas', {
            'fields': ('aluno', 'turma', 'data', 'presente')
        }),
        ('Justificativa', {
            'fields': ('justificativa',),
            'classes': ('collapse',),
        }),
        ('Informa��es de Registro', {
            'fields': ('registrado_por', 'data_registro', 'data_atualizacao'),
            'classes': ('collapse',),
        }),
    )





## frequencias\api.py

python
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from .models import Frequencia
from .serializers import FrequenciaSerializer

class FrequenciaViewSet(viewsets.ModelViewSet):
    queryset = Frequencia.objects.all()
    serializer_class = FrequenciaSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        queryset = Frequencia.objects.all()
        aluno_id = self.request.query_params.get('aluno')
        turma_id = self.request.query_params.get('turma')
        
        if aluno_id:
            queryset = queryset.filter(aluno_id=aluno_id)
        if turma_id:
            queryset = queryset.filter(turma_id=turma_id)
            
        return queryset





## frequencias\apps.py

python
from django.apps import AppConfig

class FrequenciasConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'frequencias'
    verbose_name = 'Frequ�ncias'





## frequencias\forms.py

python
from django import forms
from .models import Frequencia
import datetime
from django.core.exceptions import ValidationError

class FrequenciaForm(forms.ModelForm):
    class Meta:
        model = Frequencia
        fields = ['aluno', 'turma', 'data', 'presente', 'justificativa']
        widgets = {
            'aluno': forms.Select(attrs={'class': 'form-select'}),
            'turma': forms.Select(attrs={'class': 'form-select'}),
            'data': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'presente': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
            'justificativa': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),
        }
       
    def clean_data(self):
        data = self.cleaned_data.get('data')
        if data and data > datetime.date.today():
            raise ValidationError("A data da frequ�ncia n�o pode ser no futuro.")
        return data
       
    def clean(self):
        cleaned_data = super().clean()
        aluno = cleaned_data.get('aluno')
        turma = cleaned_data.get('turma')
        data = cleaned_data.get('data')
        
        # Se for uma atualiza��o (inst�ncia existe), precisamos excluir a inst�ncia atual da verifica��o de unicidade
        if self.instance.pk:
            if Frequencia.objects.filter(aluno=aluno, turma=turma, data=data).exclude(pk=self.instance.pk).exists():
                raise ValidationError("J� existe um registro de frequ�ncia para este aluno nesta turma e data.")
        else:
            if aluno and turma and data:
                if Frequencia.objects.filter(aluno=aluno, turma=turma, data=data).exists():
                    raise ValidationError("J� existe um registro de frequ�ncia para este aluno nesta turma e data.")
       
        return cleaned_data





## frequencias\models.py

python
from django.db import models
from django.contrib.auth.models import User
from alunos.models import Aluno
from turmas.models import Turma

class Frequencia(models.Model):
    aluno = models.ForeignKey(Aluno, on_delete=models.CASCADE, related_name='frequencias')
    turma = models.ForeignKey(Turma, on_delete=models.CASCADE)
    data = models.DateField()
    presente = models.BooleanField(default=False)
    justificativa = models.TextField(blank=True, null=True)
    registrado_por = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    data_registro = models.DateTimeField(auto_now_add=True)
    data_atualizacao = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.aluno} - {self.turma} - {self.data}"

    class Meta:
        verbose_name = "Frequ�ncia"
        verbose_name_plural = "Frequ�ncias"
        permissions = [
            ("gerar_relatorio_frequencia", "Pode gerar relat�rio de frequ�ncias"),
        ]
        # Garantir que n�o tenhamos entradas duplicadas para o mesmo aluno, turma e data
        unique_together = ['aluno', 'turma', 'data']





## frequencias\urls.py

python
from django.urls import path
from . import views

app_name = 'frequencias'

urlpatterns = [
    path('', views.listar_frequencias, name='listar_frequencias'),
    path('nova/', views.criar_frequencia, name='criar_frequencia'),
    path('<int:id>/editar/', views.editar_frequencia, name='editar_frequencia'),
    path('<int:id>/excluir/', views.excluir_frequencia, name='excluir_frequencia'),
    path('<int:id>/detalhes/', views.detalhe_frequencia, name='detalhe_frequencia'),
]





## frequencias\views.py

python
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, permission_required
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.contrib import messages
from .models import Frequencia
from .forms import FrequenciaForm
from alunos.models import Aluno
from turmas.models import Turma

def criar_frequencia(request):
    """
    Cria uma nova frequ�ncia no sistema.
    """
    if request.method == 'POST':
        form = FrequenciaForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Frequ�ncia criada com sucesso!')
            return redirect('frequencias:listar_frequencias')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = FrequenciaForm()
    return render(request, 'frequencias/criar_frequencia.html', {'form': form})

@login_required
@permission_required('frequencias.add_frequencia', raise_exception=True)
def registrar_frequencia(request):
    if request.method == 'POST':
        form = FrequenciaForm(request.POST)
        if form.is_valid():
            frequencia = form.save(commit=False)
            frequencia.registrado_por = request.user
            frequencia.save()
            messages.success(request, 'Frequ�ncia registrada com sucesso!')
            return redirect('listar_frequencias')
        else:
            messages.error(request, 'Corrija os erros no formul�rio.')
    else:
        form = FrequenciaForm()
   
    return render(request, 'frequencias/registrar_frequencia.html', {'form': form})

@login_required
@permission_required('frequencias.add_frequencia', raise_exception=True)
def registrar_frequencia_turma(request, turma_id):
    turma = get_object_or_404(Turma, id=turma_id)
    alunos = Aluno.objects.filter(turmas=turma)
    
    if request.method == 'POST':
        data = request.POST.get('data')
        presentes = request.POST.getlist('presentes')
        
        # Create or update attendance records
        for aluno in alunos:
            presente = str(aluno.id) in presentes
            justificativa = request.POST.get(f'justificativa_{aluno.id}', '')
            
            # Check if record exists
            frequencia, created = Frequencia.objects.update_or_create(
                aluno=aluno,
                turma=turma,
                data=data,
                defaults={
                    'presente': presente,
                    'justificativa': justificativa if not presente else '',
                    'registrado_por': request.user
                }
            )
        
        messages.success(request, 'Frequ�ncias registradas com sucesso!')
        return redirect('listar_frequencias')
    
    return render(request, 'frequencias/registrar_frequencia_turma.html', {
        'turma': turma,
        'alunos': alunos,
    })

@login_required
@permission_required('frequencias.view_frequencia', raise_exception=True)
def listar_frequencias(request):
    frequencias_list = Frequencia.objects.all().select_related('aluno', 'turma')
   
    # Filtros
    aluno_id = request.GET.get('aluno')
    turma_id = request.GET.get('turma')
    data_inicio = request.GET.get('data_inicio')
    data_fim = request.GET.get('data_fim')
    status = request.GET.get('status')
   
    if aluno_id:
        frequencias_list = frequencias_list.filter(aluno_id=aluno_id)
    if turma_id:
        frequencias_list = frequencias_list.filter(turma_id=turma_id)
    if data_inicio:
        frequencias_list = frequencias_list.filter(data__gte=data_inicio)
    if data_fim:
        frequencias_list = frequencias_list.filter(data__lte=data_fim)
    if status:
        presente = status == 'presente'
        frequencias_list = frequencias_list.filter(presente=presente)
   
    # Pagina��o
    paginator = Paginator(frequencias_list, 10)  # 10 itens por p�gina
    page = request.GET.get('page')
   
    try:
        frequencias = paginator.page(page)
    except PageNotAnInteger:
        frequencias = paginator.page(1)
    except EmptyPage:
        frequencias = paginator.page(paginator.num_pages)
   
    # Obter listas para os filtros
    alunos = Aluno.objects.all()
    turmas = Turma.objects.all()
   
    return render(request, 'frequencias/listar_frequencias.html', {
        'frequencias': frequencias,
        'aluno_id': aluno_id,
        'turma_id': turma_id,
        'data_inicio': data_inicio,
        'data_fim': data_fim,
        'status': status,
        'alunos': alunos,
        'turmas': turmas
    })

@login_required
@permission_required('frequencias.change_frequencia', raise_exception=True)
def editar_frequencia(request, id):
    frequencia = get_object_or_404(Frequencia, id=id)
   
    if request.method == 'POST':
        form = FrequenciaForm(request.POST, instance=frequencia)
        if form.is_valid():
            form.save()
            messages.success(request, 'Frequ�ncia atualizada com sucesso!')
            return redirect('listar_frequencias')
        else:
            messages.error(request, 'Corrija os erros no formul�rio.')
    else:
        form = FrequenciaForm(instance=frequencia)
   
    return render(request, 'frequencias/editar_frequencia.html', {'form': form, 'frequencia': frequencia})

@login_required
@permission_required('frequencias.view_frequencia', raise_exception=True)
def detalhe_frequencia(request, id):
    frequencia = get_object_or_404(Frequencia, id=id)
    return render(request, 'frequencias/detalhe_frequencia.html', {'frequencia': frequencia})

@login_required
@permission_required('frequencias.delete_frequencia', raise_exception=True)
def excluir_frequencia(request, id):
    frequencia = get_object_or_404(Frequencia, id=id)
   
    if request.method == 'POST':
        frequencia.delete()
        messages.success(request, 'Frequ�ncia exclu�da com sucesso!')
        return redirect('listar_frequencias')
   
    return render(request, 'frequencias/excluir_frequencia.html', {'frequencia': frequencia})

@login_required
@permission_required('frequencias.view_frequencia', raise_exception=True)
def estatisticas_frequencia(request):
    # Get filter parameters
    aluno_id = request.GET.get('aluno')
    turma_id = request.GET.get('turma')
    data_inicio = request.GET.get('data_inicio')
    data_fim = request.GET.get('data_fim')
    
    # Base queryset
    frequencias = Frequencia.objects.all()
    
    # Apply filters
    if aluno_id:
        frequencias = frequencias.filter(aluno_id=aluno_id)
    if turma_id:
        frequencias = frequencias.filter(turma_id=turma_id)
    if data_inicio:
        frequencias = frequencias.filter(data__gte=data_inicio)
    if data_fim:
        frequencias = frequencias.filter(data__lte=data_fim)
    
    # Calculate statistics
    total = frequencias.count()
    presentes = frequencias.filter(presente=True).count()
    ausentes = total - presentes
    
    taxa_presenca = (presentes / total * 100) if total > 0 else 0
    
    # Get lists for filters
    alunos = Aluno.objects.all()
    turmas = Turma.objects.all()
    
    return render(request, 'frequencias/estatisticas_frequencia.html', {
        'total': total,
        'presentes': presentes,
        'ausentes': ausentes,
        'taxa_presenca': taxa_presenca,
        'alunos': alunos,
        'turmas': turmas,
        'aluno_id': aluno_id,
        'turma_id': turma_id,
        'data_inicio': data_inicio,
        'data_fim': data_fim,
    })

@login_required
@permission_required('frequencias.change_frequencia', raise_exception=True)
def bulk_actions(request):
    if request.method == 'POST':
        action = request.POST.get('action')
        selected_ids = request.POST.getlist('selected_ids')
        
        if not selected_ids:
            messages.error(request, 'Nenhum registro selecionado.')
            return redirect('listar_frequencias')
            
        if action == 'delete':
            Frequencia.objects.filter(id__in=selected_ids).delete()
            messages.success(request, f'{len(selected_ids)} registros exclu�dos com sucesso!')
        elif action == 'mark_present':
            Frequencia.objects.filter(id__in=selected_ids).update(presente=True, justificativa='')
            messages.success(request, f'{len(selected_ids)} registros marcados como presente!')
        elif action == 'mark_absent':
            Frequencia.objects.filter(id__in=selected_ids).update(presente=False)
            messages.success(request, f'{len(selected_ids)} registros marcados como ausente!')
            
        return redirect('listar_frequencias')
    
    return redirect('listar_frequencias')





## frequencias\migrations\0001_initial.py

python
# Generated by Django 5.1.7 on 2025-03-27 11:39

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('alunos', '0001_initial'),
        ('turmas', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Frequencia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField()),
                ('presente', models.BooleanField(default=False)),
                ('justificativa', models.TextField(blank=True, null=True)),
                ('data_registro', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('aluno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='frequencias', to='alunos.aluno')),
                ('registrado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('turma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turmas.turma')),
            ],
            options={
                'verbose_name': 'Frequ�ncia',
                'verbose_name_plural': 'Frequ�ncias',
                'permissions': [('gerar_relatorio_frequencia', 'Pode gerar relat�rio de frequ�ncias')],
                'unique_together': {('aluno', 'turma', 'data')},
            },
        ),
    ]





## frequencias\static\js\frequencia_form.js

javascript
// Show/hide justification field based on presence checkbox
document.addEventListener('DOMContentLoaded', function() {
    const presenteCheckbox = document.getElementById('id_presente');
    const justificativaField = document.getElementById('id_justificativa').closest('.mb-3');
    
    function toggleJustificativa() {
        if (presenteCheckbox.checked) {
            justificativaField.style.display = 'none';
        } else {
            justificativaField.style.display = 'block';
        }
    }
    
    if (presenteCheckbox) {
        toggleJustificativa();
        presenteCheckbox.addEventListener('change', toggleJustificativa);
    }
});





## frequencias\templates\frequencias\detalhe_frequencia.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Detalhes da Frequ�ncia</h1>
    
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Informa��es da Frequ�ncia</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <p><strong>Aluno:</strong> {{ frequencia.aluno.nome }}</p>
                    <p><strong>Turma:</strong> {{ frequencia.turma.codigo_turma }}</p>
                    <p><strong>Data:</strong> {{ frequencia.data }}</p>
                </div>
                <div class="col-md-6">
                    <p>
                        <strong>Status:</strong> 
                        {% if frequencia.presente %}
                            <span class="badge bg-success">Presente</span>
                        {% else %}
                            <span class="badge bg-danger">Ausente</span>
                        {% endif %}
                    </p>
                    <p><strong>Registrado por:</strong> {{ frequencia.registrado_por|default:"N�o informado" }}</p>
                    <p><strong>Data de registro:</strong> {{ frequencia.data_registro }}</p>
                </div>
            </div>
            
            {% if not frequencia.presente %}
            <div class="mb-3">
                <h6>Justificativa:</h6>
                <div class="p-3 bg-light rounded">
                    {% if frequencia.justificativa %}
                        {{ frequencia.justificativa|linebreaks }}
                    {% else %}
                        <em>Nenhuma justificativa fornecida.</em>
                    {% endif %}
                </div>
            </div>
            {% endif %}
            
            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                <a href="{% url 'editar_frequencia' frequencia.id %}" class="btn btn-warning">Editar</a>
                <a href="{% url 'excluir_frequencia' frequencia.id %}" class="btn btn-danger">Excluir</a>
                <a href="{% url 'listar_frequencias' %}" class="btn btn-secondary">Voltar</a>
            </div>
        </div>
    </div>
</div>
{% endblock %}





## frequencias\templates\frequencias\editar_frequencia.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Editar Frequ�ncia</h1>
    
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    
    <div class="card">
        <div class="card-body">
            <form method="post">
                {% csrf_token %}
                
                {% if form.non_field_errors %}
                    <div class="alert alert-danger">
                        {% for error in form.non_field_errors %}
                            {{ error }}
                        {% endfor %}
                    </div>
                {% endif %}
                
                <div class="mb-3">
                    <label for="{{ form.aluno.id_for_label }}" class="form-label">{{ form.aluno.label }}</label>
                    {{ form.aluno }}
                    {% if form.aluno.errors %}
                        <div class="text-danger">
                            {% for error in form.aluno.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="mb-3">
                    <label for="{{ form.turma.id_for_label }}" class="form-label">{{ form.turma.label }}</label>
                    {{ form.turma }}
                    {% if form.turma.errors %}
                        <div class="text-danger">
                            {% for error in form.turma.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="mb-3">
                    <label for="{{ form.data.id_for_label }}" class="form-label">{{ form.data.label }}</label>
                    {{ form.data }}
                    {% if form.data.errors %}
                        <div class="text-danger">
                            {% for error in form.data.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="mb-3 form-check">
                    {{ form.presente }}
                    <label for="{{ form.presente.id_for_label }}" class="form-check-label">{{ form.presente.label }}</label>
                    {% if form.presente.errors %}
                        <div class="text-danger">
                            {% for error in form.presente.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="mb-3">
                    <label for="{{ form.justificativa.id_for_label }}" class="form-label">{{ form.justificativa.label }}</label>
                    {{ form.justificativa }}
                    {% if form.justificativa.errors %}
                        <div class="text-danger">
                            {% for error in form.justificativa.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                    <small class="form-text text-muted">Preencha apenas se o aluno estiver ausente e tiver justificativa.</small>
                </div>
                
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="submit" class="btn btn-primary">Atualizar Frequ�ncia</button>
                    <a href="{% url 'listar_frequencias' %}" class="btn btn-secondary">Cancelar</a>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## frequencias\templates\frequencias\estatisticas_frequencia.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Estat�sticas de Frequ�ncia</h1>
   
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
   
    <!-- Filtros -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtros</h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-3">
                    <label for="aluno" class="form-label">Aluno</label>
                    <select name="aluno" id="aluno" class="form-select">
                        <option value="">Todos</option>
                        {% for aluno in alunos %}
                            <option value="{{ aluno.id }}" {% if aluno_id == aluno.id|stringformat:"s" %}selected{% endif %}>{{ aluno.nome }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="turma" class="form-label">Turma</label>
                    <select name="turma" id="turma" class="form-select">
                        <option value="">Todas</option>
                        {% for turma in turmas %}
                            <option value="{{ turma.id }}" {% if turma_id == turma.id|stringformat:"s" %}selected{% endif %}>{{ turma.codigo_turma }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="data_inicio" class="form-label">Data In�cio</label>
                    <input type="date" class="form-control" id="data_inicio" name="data_inicio" value="{{ data_inicio }}">
                </div>
                <div class="col-md-3">
                    <label for="data_fim" class="form-label">Data Fim</label>
                    <input type="date" class="form-control" id="data_fim" name="data_fim" value="{{ data_fim }}">
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">Filtrar</button>
                    <a href="{% url 'estatisticas_frequencia' %}" class="btn btn-secondary">Limpar Filtros</a>
                </div>
            </form>
        </div>
    </div>
   
    <!-- Resumo Estat�stico -->
    <div class="row">
        <div class="col-md-4">
            <div class="card text-white bg-primary mb-4">
                <div class="card-header">Total de Registros</div>
                <div class="card-body">
                    <h5 class="card-title">{{ total }}</h5>
                    <p class="card-text">registros de frequ�ncia</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-white bg-success mb-4">
                <div class="card-header">Presen�as</div>
                <div class="card-body">
                    <h5 class="card-title">{{ presentes }}</h5>
                    <p class="card-text">alunos presentes ({{ taxa_presenca|floatformat:2 }}%)</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-white bg-danger mb-4">
                <div class="card-header">Aus�ncias</div>
                <div class="card-body">
                    <h5 class="card-title">{{ ausentes }}</h5>
                    <p class="card-text">alunos ausentes ({{ 100|sub:taxa_presenca|floatformat:2 }}%)</p>
                </div>
            </div>
        </div>
    </div>
   
    <!-- Gr�fico (pode ser implementado com Chart.js) -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Gr�fico de Frequ�ncia</h5>
        </div>
        <div class="card-body">
            <canvas id="graficoFrequencia" width="400" height="200"></canvas>
        </div>
    </div>
   
    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
        <a href="{% url 'listar_frequencias' %}" class="btn btn-secondary">Voltar para Lista</a>
    </div>
</div>

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var ctx = document.getElementById('graficoFrequencia').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['Presentes', 'Ausentes'],
                datasets: [{
                    label: 'Frequ�ncia',
                    data: [{{ presentes }}, {{ ausentes }}],
                    backgroundColor: [
                        'rgba(40, 167, 69, 0.8)',
                        'rgba(220, 53, 69, 0.8)'
                    ],
                    borderColor: [
                        'rgba(40, 167, 69, 1)',
                        'rgba(220, 53, 69, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Distribui��o de Frequ�ncia'
                    }
                }
            }
        });
    });
</script>
{% endblock %}
{% endblock %}





## frequencias\templates\frequencias\excluir_frequencia.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Excluir Frequ�ncia</h1>
    
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    
    <div class="card">
        <div class="card-body">
            <h5 class="card-title text-danger">Confirma��o de Exclus�o</h5>
            <p class="card-text">Voc� tem certeza que deseja excluir este registro de frequ�ncia?</p>
            
            <div class="alert alert-warning">
                <p><strong>Aluno:</strong> {{ frequencia.aluno.nome }}</p>
                <p><strong>Turma:</strong> {{ frequencia.turma.codigo_turma }}</p>
                <p><strong>Data:</strong> {{ frequencia.data }}</p>
                <p>
                    <strong>Status:</strong> 
                    {% if frequencia.presente %}
                        <span class="badge bg-success">Presente</span>
                    {% else %}
                        <span class="badge bg-danger">Ausente</span>
                    {% endif %}
                </p>
            </div>
            
            <p class="text-danger"><strong>Aten��o:</strong> Esta a��o n�o pode ser desfeita!</p>
            
            <form method="post">
                {% csrf_token %}
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="submit" class="btn btn-danger">Confirmar Exclus�o</button>
                    <a href="{% url 'listar_frequencias' %}" class="btn btn-secondary">Cancelar</a>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## frequencias\templates\frequencias\listar_frequencias.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <!-- Adicionar ap�s o t�tulo da p�gina -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Lista de Frequ�ncias</h1>
        <div>
            <a href="{% url 'registrar_frequencia' %}" class="btn btn-primary">Registrar Frequ�ncia Individual</a>
            {% if turma_id %}
            <a href="{% url 'registrar_frequencia_turma' turma_id %}" class="btn btn-success">Registrar Frequ�ncia da Turma</a>
            {% endif %}
        </div>
    </div>
    
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    
    <!-- Filtros -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Filtros</h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-3">
                    <label for="aluno" class="form-label">Aluno</label>
                    <select name="aluno" id="aluno" class="form-select">
                        <option value="">Todos</option>
                        {% for aluno in alunos %}
                            <option value="{{ aluno.id }}" {% if aluno_id == aluno.id|stringformat:"s" %}selected{% endif %}>{{ aluno.nome }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="turma" class="form-label">Turma</label>
                    <select name="turma" id="turma" class="form-select">
                        <option value="">Todas</option>
                        {% for turma in turmas %}
                            <option value="{{ turma.id }}" {% if turma_id == turma.id|stringformat:"s" %}selected{% endif %}>{{ turma.codigo_turma }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="data_inicio" class="form-label">Data In�cio</label>
                    <input type="date" class="form-control" id="data_inicio" name="data_inicio" value="{{ data_inicio }}">
                </div>
                <div class="col-md-2">
                    <label for="data_fim" class="form-label">Data Fim</label>
                    <input type="date" class="form-control" id="data_fim" name="data_fim" value="{{ data_fim }}">
                </div>
                <div class="col-md-2">
                    <label for="status" class="form-label">Status</label>
                    <select name="status" id="status" class="form-select">
                        <option value="">Todos</option>
                        <option value="presente" {% if status == 'presente' %}selected{% endif %}>Presente</option>
                        <option value="ausente" {% if status == 'ausente' %}selected{% endif %}>Ausente</option>
                    </select>
                </div>
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">Filtrar</button>
                    <a href="{% url 'listar_frequencias' %}" class="btn btn-secondary">Limpar Filtros</a>
                </div>
            </form>
        </div>
    </div>
    
    <table class="table">
        <thead>
            <tr>
                <th>Aluno</th>
                <th>Turma</th>
                <th>Data</th>
                <th>Status</th>
                <th>A��es</th>
            </tr>
        </thead>
        <tbody>
            {% for frequencia in frequencias %}
            <tr>
                <td>{{ frequencia.aluno }}</td>
                <td>{{ frequencia.turma }}</td>
                <td>{{ frequencia.data }}</td>
                <td>
                    {% if frequencia.presente %}
                        <span class="badge bg-success">Presente</span>
                    {% else %}
                        <span class="badge bg-danger">Ausente</span>
                    {% endif %}
                </td>
                <td>
                    <a href="{% url 'detalhe_frequencia' frequencia.id %}" class="btn btn-sm btn-info">Detalhes</a>
                    <a href="{% url 'editar_frequencia' frequencia.id %}" class="btn btn-sm btn-warning">Editar</a>
                    <a href="{% url 'excluir_frequencia' frequencia.id %}" class="btn btn-sm btn-danger">Excluir</a>
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="5">Nenhuma frequ�ncia registrada.</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    
    <!-- Pagina��o -->
    {% if frequencias.paginator.num_pages > 1 %}
    <nav aria-label="Navega��o de p�gina">
        <ul class="pagination justify-content-center">
            {% if frequencias.has_previous %}
                <li class="page-item">
                    <a class="page-link" href="?page=1{% if aluno_id %}&aluno={{ aluno_id }}{% endif %}{% if turma_id %}&turma={{ turma_id }}{% endif %}{% if data_inicio %}&data_inicio={{ data_inicio }}{% endif %}{% if data_fim %}&data_fim={{ data_fim }}{% endif %}{% if status %}&status={{ status }}{% endif %}" aria-label="Primeira">
                        <span aria-hidden="true">��</span>
                    </a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="?page={{ frequencias.previous_page_number }}{% if aluno_id %}&aluno={{ aluno_id }}{% endif %}{% if turma_id %}&turma={{ turma_id }}{% endif %}{% if data_inicio %}&data_inicio={{ data_inicio }}{% endif %}{% if data_fim %}&data_fim={{ data_fim }}{% endif %}{% if status %}&status={{ status }}{% endif %}" aria-label="Anterior">
                        <span aria-hidden="true">�</span>
                    </a>
                </li>
            {% else %}
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="Primeira">
                        <span aria-hidden="true">��</span>
                    </a>
                </li>
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="Anterior">
                        <span aria-hidden="true">�</span>
                    </a>
                </li>
            {% endif %}
           
            {% for i in frequencias.paginator.page_range %}
                {% if frequencias.number == i %}
                    <li class="page-item active"><a class="page-link" href="#">{{ i }}</a></li>
                {% elif i > frequencias.number|add:'-3' and i < frequencias.number|add:'3' %}
                    <li class="page-item">
                        <a class="page-link" href="?page={{ i }}{% if aluno_id %}&aluno={{ aluno_id }}{% endif %}{% if turma_id %}&turma={{ turma_id }}{% endif %}{% if data_inicio %}&data_inicio={{ data_inicio }}{% endif %}{% if data_fim %}&data_fim={{ data_fim }}{% endif %}{% if status %}&status={{ status }}{% endif %}">{{ i }}</a>
                    </li>
                {% endif %}
            {% endfor %}
           
            {% if frequencias.has_next %}
                <li class="page-item">
                    <a class="page-link" href="?page={{ frequencias.next_page_number }}{% if aluno_id %}&aluno={{ aluno_id }}{% endif %}{% if turma_id %}&turma={{ turma_id }}{% endif %}{% if data_inicio %}&data_inicio={{ data_inicio }}{% endif %}{% if data_fim %}&data_fim={{ data_fim }}{% endif %}{% if status %}&status={{ status }}{% endif %}" aria-label="Pr�ximo">
                        <span aria-hidden="true">�</span>
                    </a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="?page={{ frequencias.paginator.num_pages }}{% if aluno_id %}&aluno={{ aluno_id }}{% endif %}{% if turma_id %}&turma={{ turma_id }}{% endif %}{% if data_inicio %}&data_inicio={{ data_inicio }}{% endif %}{% if data_fim %}&data_fim={{ data_fim }}{% endif %}{% if status %}&status={{ status }}{% endif %}" aria-label="�ltima">
                        <span aria-hidden="true">��</span>
                    </a>
                </li>
            {% else %}
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="Pr�ximo">
                        <span aria-hidden="true">�</span>
                    </a>
                </li>
                <li class="page-item disabled">
                    <a class="page-link" href="#" aria-label="�ltima">
                        <span aria-hidden="true">��</span>
                    </a>
                </li>
            {% endif %}
        </ul>
    </nav>
    {% endif %}
</div>
{% endblock %}





## frequencias\templates\frequencias\registrar_frequencia.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Registrar Frequ�ncia</h1>
    
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    
    <div class="card">
        <div class="card-body">
            <form method="post">
                {% csrf_token %}
                
                {% if form.non_field_errors %}
                    <div class="alert alert-danger">
                        {% for error in form.non_field_errors %}
                            {{ error }}
                        {% endfor %}
                    </div>
                {% endif %}
                
                <div class="mb-3">
                    <label for="{{ form.aluno.id_for_label }}" class="form-label">{{ form.aluno.label }}</label>
                    {{ form.aluno }}
                    {% if form.aluno.errors %}
                        <div class="text-danger">
                            {% for error in form.aluno.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="mb-3">
                    <label for="{{ form.turma.id_for_label }}" class="form-label">{{ form.turma.label }}</label>
                    {{ form.turma }}
                    {% if form.turma.errors %}
                        <div class="text-danger">
                            {% for error in form.turma.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="mb-3">
                    <label for="{{ form.data.id_for_label }}" class="form-label">{{ form.data.label }}</label>
                    {{ form.data }}
                    {% if form.data.errors %}
                        <div class="text-danger">
                            {% for error in form.data.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="mb-3 form-check">
                    {{ form.presente }}
                    <label for="{{ form.presente.id_for_label }}" class="form-check-label">{{ form.presente.label }}</label>
                    {% if form.presente.errors %}
                        <div class="text-danger">
                            {% for error in form.presente.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="mb-3">
                    <label for="{{ form.justificativa.id_for_label }}" class="form-label">{{ form.justificativa.label }}</label>
                    {{ form.justificativa }}
                    {% if form.justificativa.errors %}
                        <div class="text-danger">
                            {% for error in form.justificativa.errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}
                    <small class="form-text text-muted">Preencha apenas se o aluno estiver ausente e tiver justificativa.</small>
                </div>
                
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="submit" class="btn btn-primary">Registrar Frequ�ncia</button>
                    <a href="{% url 'listar_frequencias' %}" class="btn btn-secondary">Cancelar</a>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## frequencias\templates\frequencias\registrar_frequencia_turma.html

html
{% extends 'core/base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Registrar Frequ�ncia da Turma: {{ turma.codigo_turma }}</h1>
   
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
   
    <div class="card">
        <div class="card-body">
            <form method="post">
                {% csrf_token %}
               
                <div class="mb-3">
                    <label for="data" class="form-label">Data</label>
                    <input type="date" class="form-control" id="data" name="data" required>
                </div>
               
                <table class="table">
                    <thead>
                        <tr>
                            <th>Aluno</th>
                            <th>Presente</th>
                            <th>Justificativa (se ausente)</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for aluno in alunos %}
                        <tr>
                            <td>{{ aluno.nome }}</td>
                            <td>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="presentes" value="{{ aluno.id }}" id="presente_{{ aluno.id }}" checked>
                                    <label class="form-check-label" for="presente_{{ aluno.id }}">
                                        Presente
                                    </label>
                                </div>
                            </td>
                            <td>
                                <textarea class="form-control" name="justificativa_{{ aluno.id }}" rows="2" placeholder="Justificativa para aus�ncia"></textarea>
                            </td>
                        </tr>
                        {% empty %}
                        <tr>
                            <td colspan="3" class="text-center">Nenhum aluno encontrado nesta turma.</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
               
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="submit" class="btn btn-primary">Registrar Frequ�ncias</button>
                    <a href="{% url 'listar_frequencias' %}" class="btn btn-secondary">Cancelar</a>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## frequencias\templatetags\frequencia_extras.py

python
from django import template

register = template.Library()

@register.filter
def sub(value, arg):
    """Subtrai o argumento do valor"""
    return value - arg





## frequencias\templatetags\__init__.py

python
# Arquivo vazio para marcar o diret�rio como um pacote Python



# C�digo da Funcionalidade: cursos
*Gerado automaticamente*



## cursos\admin.py

python
from django.contrib import admin
from .models import Curso

@admin.register(Curso)
class CursoAdmin(admin.ModelAdmin):
    list_display = ['codigo_curso', 'nome', 'duracao']
    search_fields = ('codigo_curso', 'nome')
    list_filter = ('duracao',)





## cursos\apps.py

python
from django.apps import AppConfig


class CursosConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cursos'





## cursos\forms.py

python
from django import forms
from .models import Curso
from django.core.exceptions import ValidationError

class CursoForm(forms.ModelForm):
    class Meta:
        model = Curso
        fields = ['codigo_curso', 'nome', 'descricao', 'duracao']

    def clean_codigo_curso(self):
        codigo = self.cleaned_data.get('codigo_curso')
        if len(codigo) != 5:
            raise ValidationError("O c�digo do curso deve ter exatamente 5 caracteres.")
        return codigo

    def clean_nome(self):
        nome = self.cleaned_data.get('nome')
        if len(nome) < 3:
            raise ValidationError("O nome do curso deve ter pelo menos 3 caracteres.")
        return nome




## cursos\models.py

python
from django.db import models

class Curso(models.Model):
    codigo_curso = models.CharField(max_length=5, unique=True)
    nome = models.CharField(max_length=100)
    descricao = models.TextField()
    duracao = models.PositiveIntegerField(verbose_name="Dura��o (meses)", null=True, blank=True)

    def __str__(self):
        return self.nome

    class Meta:
        verbose_name = "Curso"
        verbose_name_plural = "Cursos"





## cursos\tests.py

python
from django.test import TestCase

# Create your tests here.





## cursos\urls.py

python
from django.urls import path
from . import views

app_name = 'cursos'  # Adicione esta linha

urlpatterns = [
    path('', views.listar_cursos, name='listar_cursos'),
    path('novo/', views.criar_curso, name='criar_curso'),
    path('<int:id>/editar/', views.editar_curso, name='editar_curso'),
    path('<int:id>/excluir/', views.excluir_curso, name='excluir_curso'),
    path('<int:id>/detalhes/', views.detalhes_curso, name='detalhes_curso'),
]




## cursos\views.py

python
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from .models import Curso
from .forms import CursoForm

def listar_cursos(request):
    cursos = Curso.objects.all()
    return render(request, 'cursos/listar_cursos.html', {'cursos': cursos})

def criar_curso(request):
    if request.method == 'POST':
        form = CursoForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Curso criado com sucesso!')
            return redirect('listar_cursos')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = CursoForm()
    return render(request, 'cursos/criar_curso.html', {'form': form})

def editar_curso(request, id):
    curso = get_object_or_404(Curso, id=id)
    if request.method == 'POST':
        form = CursoForm(request.POST, instance=curso)
        if form.is_valid():
            form.save()
            messages.success(request, 'Curso atualizado com sucesso!')
            return redirect('listar_cursos')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = CursoForm(instance=curso)
    return render(request, 'cursos/editar_curso.html', {'form': form, 'curso': curso})

def excluir_curso(request, id):
    curso = get_object_or_404(Curso, id=id)
    if request.method == 'POST':
        curso.delete()
        messages.success(request, 'Curso exclu�do com sucesso!')
        return redirect('listar_cursos')
    return render(request, 'cursos/excluir_curso.html', {'curso': curso})

def detalhes_curso(request, id):
    curso = get_object_or_404(Curso, id=id)
    return render(request, 'cursos/detalhes_curso.html', {'curso': curso})




## cursos\migrations\0001_initial.py

python
# Generated by Django 5.1.7 on 2025-03-25 23:45

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Curso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_curso', models.CharField(max_length=5, unique=True)),
                ('nome', models.CharField(max_length=100)),
                ('descricao', models.TextField()),
                ('duracao', models.PositiveIntegerField(blank=True, null=True, verbose_name='Dura��o (meses)')),
            ],
            options={
                'verbose_name': 'Curso',
                'verbose_name_plural': 'Cursos',
            },
        ),
    ]





## cursos\templates\cursos\criar_curso.html

html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Criar Novo Curso</h1>
    <form method="post">
        {% csrf_token %}
        {% include 'includes/form_errors.html' %}
        {% for field in form %}
            {% include 'includes/form_field.html' %}
        {% endfor %}
        <button type="submit" class="btn btn-primary">Criar Curso</button>
        <a href="{% url 'listar_cursos' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}




## cursos\templates\cursos\detalhes_curso.html

html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
  <h1>Detalhes do Curso</h1>
  
  <div class="card">
    <div class="card-header">
      <h2>{{ curso.nome }}</h2>
    </div>
    <div class="card-body">
      <p><strong>C�digo:</strong> {{ curso.codigo_curso }}</p>
      <p><strong>Descri��o:</strong> {{ curso.descricao }}</p>
      <p><strong>Dura��o:</strong> {{ curso.duracao }} meses</p>
    </div>
    <div class="card-footer">
      <a href="{% url 'editar_curso' curso.id %}" class="btn btn-warning">Editar</a>
      <a href="{% url 'excluir_curso' curso.id %}" class="btn btn-danger">Excluir</a>
      <a href="{% url 'listar_cursos' %}" class="btn btn-secondary">Voltar</a>
    </div>
  </div>
</div>
{% endblock %}





## cursos\templates\cursos\editar_curso.html

html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Editar Curso</h1>
    <form method="post">
        {% csrf_token %}
        {% include 'includes/form_errors.html' %}
        {% for field in form %}
            {% include 'includes/form_field.html' %}
        {% endfor %}
        <button type="submit" class="btn btn-primary">Atualizar Curso</button>
        <a href="{% url 'listar_cursos' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}




## cursos\templates\cursos\excluir_curso.html

html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Excluir Curso</h1>
    <p>Tem certeza que deseja excluir o curso "{{ curso.nome }}"?</p>
    
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Sim, excluir</button>
        <a href="{% url 'listar_cursos' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}





## cursos\templates\cursos\listar_cursos.html

html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
  <h1>Cursos</h1>
  
  <a href="{% url 'criar_curso' %}" class="btn btn-primary mb-3">Novo Curso</a>
  
  <table class="table table-striped">
    <thead>
      <tr>
        <th>C�digo</th>
        <th>Nome</th>
        <th>Descri��o</th>
        <th>Dura��o</th>
        <th>A��es</th>
      </tr>
    </thead>
    <tbody>
      {% for curso in cursos %}
      <tr>
        <td>{{ curso.codigo_curso }}</td>
        <td>{{ curso.nome }}</td>
        <td>{{ curso.descricao|truncatechars:50 }}</td>
        <td>{{ curso.duracao }} meses</td>
        <td>
          <a href="{% url 'detalhes_curso' curso.id %}" class="btn btn-sm btn-info">Detalhes</a>
          <a href="{% url 'editar_curso' curso.id %}" class="btn btn-sm btn-warning">Editar</a>
          <a href="{% url 'excluir_curso' curso.id %}" class="btn btn-sm btn-danger">Excluir</a>
        </td>
      </tr>
      {% empty %}
      <tr>
        <td colspan="5">Nenhum curso cadastrado.</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>
{% endblock %}



# C�digo da Funcionalidade: core
*Gerado automaticamente*



## core\admin.py

python
from django.contrib import admin
from .models import ConfiguracaoSistema, LogAtividade

@admin.register(ConfiguracaoSistema)
class ConfiguracaoSistemaAdmin(admin.ModelAdmin):
    list_display = ('nome_sistema', 'versao', 'data_atualizacao', 'manutencao_ativa')
    list_editable = ('manutencao_ativa',)
    readonly_fields = ('data_atualizacao',)

@admin.register(LogAtividade)
class LogAtividadeAdmin(admin.ModelAdmin):
    list_display = ('tipo', 'acao', 'usuario', 'data')
    list_filter = ('tipo', 'data', 'usuario')
    search_fields = ('acao', 'usuario', 'detalhes')
    readonly_fields = ('data',)





## core\apps.py

python
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'





## core\forms.py

python
from django import forms
from core.models import Aluno, Curso, Turma, AtividadeAcademica, AtividadeRitualistica
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm

class AlunoForm(forms.ModelForm):
    class Meta:
        model = Aluno
        fields = ('nome', 'matricula', 'curso')

class CursoForm(forms.ModelForm):
    class Meta:
        model = Curso
        fields = ('nome', 'descricao')

class TurmaForm(forms.ModelForm):
    class Meta:
        model = Turma
        fields = ('nome', 'curso', 'data_inicio', 'data_fim', 'vagas')

class AtividadeAcademicaForm(forms.ModelForm):
    class Meta:
        model = AtividadeAcademica
        # Corrigir para usar os campos corretos
        fields = ('nome', 'descricao', 'data_inicio', 'data_fim', 'turma')

class AtividadeRitualisticaForm(forms.ModelForm):
    class Meta:
        model = AtividadeRitualistica
        fields = ['nome', 'descricao', 'turma', 'alunos']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['turma'].queryset = Turma.objects.all()
        self.fields['alunos'].queryset = Aluno.objects.all()
        self.fields['alunos'].widget = forms.CheckboxSelectMultiple()

class AlunoTurmaForm(forms.Form):
    aluno = forms.ModelChoiceField(queryset=Aluno.objects.all(), label="Aluno")

    def __init__(self, *args, **kwargs):
        turma = kwargs.pop('turma', None)
        super().__init__(*args, **kwargs)
        if turma:
            self.fields['aluno'].queryset = Aluno.objects.exclude(turmas=turma)

class RegistroForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')

    def save(self, commit=True):
        user = super(RegistroForm, self).save(commit=False)
        user.email = self.cleaned_data['email']
        if commit:
            user.save()
        return user




## core\middleware.py

python
from django.shortcuts import render
from .utils import garantir_configuracao_sistema

class ManutencaoMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # Verificar se o sistema est� em manuten��o
        config = garantir_configuracao_sistema()
        
        # Ignorar verifica��o para staff e para a p�gina de login
        if (config.manutencao_ativa and 
            not request.user.is_staff and 
            not request.path.startswith('/admin') and
            not request.path.endswith('/entrar/')):
            return render(request, 'core/manutencao.html', {
                'mensagem': config.mensagem_manutencao
            })
            
        response = self.get_response(request)
        return response





## core\models.py

python
from django.db import models
from django.utils import timezone

class ConfiguracaoSistema(models.Model):
    """Configura��es globais do sistema"""
    nome_sistema = models.CharField(max_length=100, default="OMAUM")
    versao = models.CharField(max_length=20, default="1.0.0")
    data_atualizacao = models.DateTimeField(default=timezone.now)
    manutencao_ativa = models.BooleanField(default=False)
    mensagem_manutencao = models.TextField(blank=True, null=True)
    
    def __str__(self):
        return f"{self.nome_sistema} v{self.versao}"
    
    class Meta:
        verbose_name = 'Configura��o do Sistema'
        verbose_name_plural = 'Configura��es do Sistema'

class LogAtividade(models.Model):
    """Registro de atividades do sistema"""
    TIPO_CHOICES = [
        ('INFO', 'Informa��o'),
        ('AVISO', 'Aviso'),
        ('ERRO', 'Erro'),
        ('DEBUG', 'Depura��o'),
    ]
    
    usuario = models.CharField(max_length=100)
    acao = models.CharField(max_length=255)
    tipo = models.CharField(max_length=10, choices=TIPO_CHOICES, default='INFO')
    data = models.DateTimeField(default=timezone.now)
    detalhes = models.TextField(blank=True, null=True)
    
    def __str__(self):
        return f"{self.tipo}: {self.acao} por {self.usuario}"
    
    class Meta:
        verbose_name = 'Log de Atividade'
        verbose_name_plural = 'Logs de Atividades'
        ordering = ['-data']




## core\tests.py

python
from django.test import TestCase, Client, RequestFactory
from django.urls import reverse
from django.contrib.auth.models import User, AnonymousUser
from django.contrib.messages.storage.fallback import FallbackStorage
from django.contrib.sessions.middleware import SessionMiddleware

from .models import ConfiguracaoSistema, LogAtividade
from .views import pagina_inicial, entrar, painel_controle, atualizar_configuracao
from .utils import registrar_log, adicionar_mensagem, garantir_configuracao_sistema
from .middleware import ManutencaoMiddleware


class ConfiguracaoSistemaTests(TestCase):
    """Testes para o modelo ConfiguracaoSistema"""
    
    def test_criacao_configuracao(self):
        """Testa a cria��o de uma configura��o do sistema"""
        config = ConfiguracaoSistema.objects.create(
            nome_sistema="Sistema de Teste",
            versao="1.0.0",
            manutencao_ativa=False
        )
        self.assertEqual(config.nome_sistema, "Sistema de Teste")
        self.assertEqual(config.versao, "1.0.0")
        self.assertFalse(config.manutencao_ativa)
    
    def test_str_representation(self):
        """Testa a representa��o string do modelo"""
        config = ConfiguracaoSistema.objects.create(
            nome_sistema="Sistema de Teste",
            versao="1.0.0"
        )
        self.assertEqual(str(config), "Sistema de Teste v1.0.0")


class LogAtividadeTests(TestCase):
    """Testes para o modelo LogAtividade"""
    
    def test_criacao_log(self):
        """Testa a cria��o de um log de atividade"""
        log = LogAtividade.objects.create(
            usuario="usuario_teste",
            acao="A��o de teste",
            tipo="INFO",
            detalhes="Detalhes da a��o de teste"
        )
        self.assertEqual(log.usuario, "usuario_teste")
        self.assertEqual(log.acao, "A��o de teste")
        self.assertEqual(log.tipo, "INFO")
        self.assertEqual(log.detalhes, "Detalhes da a��o de teste")
    
    def test_str_representation(self):
        """Testa a representa��o string do modelo"""
        log = LogAtividade.objects.create(
            usuario="usuario_teste",
            acao="A��o de teste",
            tipo="INFO"
        )
        self.assertEqual(str(log), "INFO: A��o de teste por usuario_teste")
    
    def test_ordering(self):
        """Testa a ordena��o dos logs (mais recentes primeiro)"""
        log1 = LogAtividade.objects.create(usuario="user1", acao="acao1")
        log2 = LogAtividade.objects.create(usuario="user2", acao="acao2")
        logs = LogAtividade.objects.all()
        self.assertEqual(logs[0], log2)  # O segundo log deve aparecer primeiro


class UtilsTests(TestCase):
    """Testes para as fun��es utilit�rias"""
    
    def setUp(self):
        self.factory = RequestFactory()
        self.user = User.objects.create_user(
            username='testuser', 
            email='test@example.com', 
            password='testpassword'
        )
    
    def test_registrar_log(self):
        """Testa o registro de logs"""
        request = self.factory.get('/')
        request.user = self.user
        
        # Registra um log
        registrar_log(request, "Teste de log", "INFO", "Detalhes do teste")
        
        # Verifica se o log foi criado
        log = LogAtividade.objects.last()
        self.assertEqual(log.usuario, "testuser")
        self.assertEqual(log.acao, "Teste de log")
        self.assertEqual(log.tipo, "INFO")
        self.assertEqual(log.detalhes, "Detalhes do teste")
    
    def test_registrar_log_anonimo(self):
        """Testa o registro de logs para usu�rios an�nimos"""
        request = self.factory.get('/')
        request.user = AnonymousUser()
        
        # Registra um log
        registrar_log(request, "Teste de log an�nimo")
        
        # Verifica se o log foi criado
        log = LogAtividade.objects.last()
        self.assertEqual(log.usuario, "An�nimo")
        self.assertEqual(log.acao, "Teste de log an�nimo")
    
    def test_garantir_configuracao_sistema(self):
        """Testa a fun��o que garante a exist�ncia de uma configura��o"""
        # Inicialmente n�o deve haver configura��es
        self.assertEqual(ConfiguracaoSistema.objects.count(), 0)
        
        # Chama a fun��o para garantir uma configura��o
        config = garantir_configuracao_sistema()
        
        # Deve haver exatamente uma configura��o
        self.assertEqual(ConfiguracaoSistema.objects.count(), 1)
        self.assertEqual(config.nome_sistema, "OMAUM")
        
        # Chamar novamente n�o deve criar outra configura��o
        config2 = garantir_configuracao_sistema()
        self.assertEqual(ConfiguracaoSistema.objects.count(), 1)
        self.assertEqual(config, config2)


class ViewsTests(TestCase):
    """Testes para as views"""
    
    def setUp(self):
        self.client = Client()
        self.factory = RequestFactory()
        
        # Cria um usu�rio normal
        self.user = User.objects.create_user(
            username='testuser', 
            email='test@example.com', 
            password='testpassword'
        )
        
        # Cria um usu�rio staff
        self.staff_user = User.objects.create_user(
            username='staffuser', 
            email='staff@example.com', 
            password='staffpassword',
            is_staff=True
        )
        
        # Garante que existe uma configura��o
        self.config = garantir_configuracao_sistema()
    
    def test_pagina_inicial(self):
        """Testa a p�gina inicial"""
        response = self.client.get(reverse('core:pagina_inicial'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/home.html')
        self.assertContains(response, self.config.nome_sistema)
    
    def test_pagina_inicial_em_manutencao(self):
        """Testa a p�gina inicial quando o sistema est� em manuten��o"""
        # Ativa o modo de manuten��o
        self.config.manutencao_ativa = True
        self.config.mensagem_manutencao = "Sistema em manuten��o para testes"
        self.config.save()
        
        # Usu�rio an�nimo deve ver a p�gina de manuten��o
        response = self.client.get(reverse('core:pagina_inicial'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/manutencao.html')
        self.assertContains(response, "Sistema em manuten��o para testes")
        
        # Usu�rio staff deve ver a p�gina normal mesmo em manuten��o
        self.client.login(username='staffuser', password='staffpassword')
        response = self.client.get(reverse('core:pagina_inicial'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/home.html')
    
    def test_entrar_get(self):
        """Testa a p�gina de login (GET)"""
        response = self.client.get(reverse('core:entrar'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/login.html')
    
    def test_entrar_post_sucesso(self):
        """Testa o login com sucesso"""
        response = self.client.post(reverse('core:entrar'), {
            'username': 'testuser',
            'password': 'testpassword'
        })
        self.assertRedirects(response, reverse('core:pagina_inicial'))
        
        # Verifica se o log foi registrado
        log = LogAtividade.objects.last()
        self.assertEqual(log.usuario, "testuser")
        self.assertEqual(log.acao, "Login realizado com sucesso")
    
    def test_entrar_post_falha(self):
        """Testa o login com credenciais inv�lidas"""
        response = self.client.post(reverse('core:entrar'), {
            'username': 'testuser',
            'password': 'senhaerrada'
        })
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/login.html')
    
    def test_sair(self):
        """Testa o logout"""
        # Primeiro faz login
        self.client.login(username='testuser', password='testpassword')
        
        # Depois faz logout
        response = self.client.get(reverse('core:sair'))
        self.assertRedirects(response, reverse('core:pagina_inicial'))
        
        # Verifica se o usu�rio est� deslogado
        response = self.client.get(reverse('core:painel_controle'))
        self.assertRedirects(response, f'/accounts/login/?next={reverse("core:painel_controle")}')
    
    def test_painel_controle_sem_permissao(self):
        """Testa acesso ao painel de controle sem permiss�o"""
        # Usu�rio n�o autenticado deve ser redirecionado para login
        response = self.client.get(reverse('core:painel_controle'))
        self.assertRedirects(response, f'/accounts/login/?next={reverse("core:painel_controle")}')
        
        # Usu�rio normal n�o deve ter acesso
        self.client.login(username='testuser', password='testpassword')
        response = self.client.get(reverse('core:painel_controle'))
        self.assertRedirects(response, reverse('core:pagina_inicial'))
    
    def test_painel_controle_com_permissao(self):
        """Testa acesso ao painel de controle com permiss�o"""
        self.client.login(username='staffuser', password='staffpassword')
        response = self.client.get(reverse('core:painel_controle'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/painel_controle.html')
    
    def test_atualizar_configuracao_sem_permissao(self):
        """Testa atualiza��o de configura��o sem permiss�o"""
        # Usu�rio n�o autenticado deve ser redirecionado para login
        response = self.client.get(reverse('core:atualizar_configuracao'))
        self.assertRedirects(response, f'/accounts/login/?next={reverse("core:atualizar_configuracao")}')
        
        # Usu�rio normal n�o deve ter acesso
        self.client.login(username='testuser', password='testpassword')
        response = self.client.get(reverse('core:atualizar_configuracao'))
        self.assertRedirects(response, reverse('core:pagina_inicial'))
    
    def test_atualizar_configuracao_get(self):
        """Testa a p�gina de atualiza��o de configura��o (GET)"""
        self.client.login(username='staffuser', password='staffpassword')
        response = self.client.get(reverse('core:atualizar_configuracao'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/atualizar_configuracao.html')
    
    def test_atualizar_configuracao_post(self):
        """Testa a atualiza��o de configura��o (POST)"""
        self.client.login(username='staffuser', password='staffpassword')
        response = self.client.post(reverse('core:atualizar_configuracao'), {
            'nome_sistema': 'Sistema Atualizado',
            'versao': '2.0.0',
            'manutencao_ativa': 'on',
            'mensagem_manutencao': 'Mensagem de manuten��o atualizada'
        })
        self.assertRedirects(response, reverse('core:painel_controle'))
        
        # Verifica se a configura��o foi atualizada
        config = ConfiguracaoSistema.objects.get(pk=1)
        self.assertEqual(config.nome_sistema, 'Sistema Atualizado')
        self.assertEqual(config.versao, '2.0.0')
        self.assertTrue(config.manutencao_ativa)
        self.assertEqual(config.mensagem_manutencao, 'Mensagem de manuten��o atualizada')
        
        # Verifica se o log foi registrado
        log = LogAtividade.objects.last()
        self.assertEqual(log.acao, 'Configura��es do sistema atualizadas')


class MiddlewareTests(TestCase):
    """Testes para o middleware de manuten��o"""
    
    def setUp(self):
        self.factory = RequestFactory()
        
        # Cria um usu�rio normal
        self.user = User.objects.create_user(
            username='testuser', 
            email='test@example.com', 
            password='testpassword'
        )
        
        # Cria um usu�rio staff
        self.staff_user = User.objects.create_user(
            username='staffuser', 
            email='staff@example.com', 
            password='staffpassword',
            is_staff=True
        )
        
        # Garante que existe uma configura��o
        self.config = garantir_configuracao_sistema()
        
        # Define uma fun��o simples para o middleware chamar
        def get_response(request):
            return "response"
        
        self.middleware = ManutencaoMiddleware(get_response)
    
    def test_middleware_sem_manutencao(self):
        """Testa o middleware quando o sistema n�o est� em manuten��o"""
        self.config.manutencao_ativa = False
        self.config.save()
        
        request = self.factory.get('/')
        request.user = self.user
        
        response = self.middleware(request)
        self.assertEqual(response, "response")
    
    def test_middleware_com_manutencao_usuario_normal(self):
        """Testa o middleware quando o sistema est� em manuten��o para usu�rio normal"""
        self.config.manutencao_ativa = True
        self.config.mensagem_manutencao = "Sistema em manuten��o para testes"
        self.config.save()
        
        request = self.factory.get('/')
        request.user = self.user
        
        #




## core\urls.py

python
from django.urls import path
from . import views

app_name = 'core'

urlpatterns = [
    path('', views.pagina_inicial, name='pagina_inicial'),
    path('entrar/', views.entrar, name='entrar'),
    path('sair/', views.sair, name='sair'),
    path('painel-controle/', views.painel_controle, name='painel_controle'),
    path('atualizar-configuracao/', views.atualizar_configuracao, name='atualizar_configuracao'),
    path('csrf_check/', views.csrf_check, name='csrf_check'),
]




## core\utils.py

python
from django.contrib import messages
from .models import LogAtividade

def registrar_log(request, acao, tipo='INFO', detalhes=None):
    """
    Registra uma a��o no log de atividades do sistema
    
    Args:
        request: O objeto request do Django
        acao: Descri��o da a��o realizada
        tipo: Tipo de log (INFO, AVISO, ERRO, DEBUG)
        detalhes: Detalhes adicionais sobre a a��o
    """
    usuario = request.user.username if request.user.is_authenticated else 'An�nimo'
    
    LogAtividade.objects.create(
        usuario=usuario,
        acao=acao,
        tipo=tipo,
        detalhes=detalhes
    )

def adicionar_mensagem(request, tipo, texto):
    """
    Adiciona uma mensagem para o usu�rio
    
    Args:
        request: O objeto request do Django
        tipo: Tipo de mensagem (success, error, warning, info)
        texto: Texto da mensagem
    """
    tipos_mensagem = {
        'sucesso': messages.SUCCESS,
        'erro': messages.ERROR,
        'aviso': messages.WARNING,
        'info': messages.INFO,
    }
    
    nivel = tipos_mensagem.get(tipo, messages.INFO)
    messages.add_message(request, nivel, texto)

def garantir_configuracao_sistema():
    """
    Garante que exista pelo menos uma configura��o do sistema.
    Retorna a configura��o existente ou cria uma nova.
    """
    from .models import ConfiguracaoSistema
    
    config, criado = ConfiguracaoSistema.objects.get_or_create(
        pk=1,
        defaults={
            'nome_sistema': 'Sistema de Gest�o de Iniciados da OmAum',
            'versao': '1.0.0',
            'manutencao_ativa': False,
            'mensagem_manutencao': 'Sistema em manuten��o. Tente novamente mais tarde.'
        }
    )
    
    return config





## core\views.py

python
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.forms import AuthenticationForm
from .utils import registrar_log, adicionar_mensagem, garantir_configuracao_sistema
from .models import ConfiguracaoSistema
from django.utils import timezone
from django.http import JsonResponse
from django.views.decorators.csrf import ensure_csrf_cookie

def pagina_inicial(request):
    # Change this to use your original template
    return render(request, 'core/home.html', {})

def entrar(request):
    """P�gina de login do sistema"""
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                registrar_log(request, f'Login realizado com sucesso')
                adicionar_mensagem(request, 'sucesso', 'Login realizado com sucesso!')
                return redirect('core:pagina_inicial')
            else:
                adicionar_mensagem(request, 'erro', 'Nome de usu�rio ou senha inv�lidos.')
        else:
            adicionar_mensagem(request, 'erro', 'Nome de usu�rio ou senha inv�lidos.')
    else:
        form = AuthenticationForm()
    return render(request, 'core/login.html', {'form': form})

@login_required
def painel_controle(request):
    """Painel de controle do sistema (apenas para staff)"""
    if not request.user.is_staff:
        adicionar_mensagem(request, 'erro', 'Voc� n�o tem permiss�o para acessar esta p�gina.')
        return redirect('core:pagina_inicial')
    
    config = ConfiguracaoSistema.objects.first()
    logs_recentes = LogAtividade.objects.all()[:10]
    return render(request, 'core/painel_controle.html', {
        'config': config,
        'logs_recentes': logs_recentes
    })

@login_required
def atualizar_configuracao(request):
    """Atualiza as configura��es do sistema"""
    if not request.user.is_staff:
        adicionar_mensagem(request, 'erro', 'Voc� n�o tem permiss�o para acessar esta p�gina.')
        return redirect('core:pagina_inicial')
    
    config = garantir_configuracao_sistema()
    if request.method == 'POST':
        nome_sistema = request.POST.get('nome_sistema')
        versao = request.POST.get('versao')
        manutencao_ativa = request.POST.get('manutencao_ativa') == 'on'
        mensagem_manutencao = request.POST.get('mensagem_manutencao')
        
        config.nome_sistema = nome_sistema
        config.versao = versao
        config.manutencao_ativa = manutencao_ativa
        config.mensagem_manutencao = mensagem_manutencao
        config.data_atualizacao = timezone.now()
        config.save()
        
        registrar_log(request, 'Configura��es do sistema atualizadas', 'INFO')
        adicionar_mensagem(request, 'sucesso', 'Configura��es atualizadas com sucesso!')
        return redirect('core:painel_controle')
    
    return render(request, 'core/atualizar_configuracao.html', {
        'config': config
    })

def sair(request):
    """Realiza o logout do usu�rio"""
    if request.user.is_authenticated:
        registrar_log(request, 'Logout realizado com sucesso')
        logout(request)
        adicionar_mensagem(request, 'info', 'Voc� saiu do sistema com sucesso.')
    return redirect('core:pagina_inicial')

@ensure_csrf_cookie
def csrf_check(request):
    """
    View para verificar se o token CSRF ainda � v�lido.
    Retorna status 200 se o token for v�lido, caso contr�rio retorna 403.
    """
    if request.is_ajax() or request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse({'status': 'ok'})
    return JsonResponse({'status': 'error'}, status=403)





## core\migrations\0001_initial.py

python
# Generated by Django 5.1.7 on 2025-03-25 23:45

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ConfiguracaoSistema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_sistema', models.CharField(default='OMAUM', max_length=100)),
                ('versao', models.CharField(default='1.0.0', max_length=20)),
                ('data_atualizacao', models.DateTimeField(default=django.utils.timezone.now)),
                ('manutencao_ativa', models.BooleanField(default=False)),
                ('mensagem_manutencao', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Configura��o do Sistema',
                'verbose_name_plural': 'Configura��es do Sistema',
            },
        ),
        migrations.CreateModel(
            name='LogAtividade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usuario', models.CharField(max_length=100)),
                ('acao', models.CharField(max_length=255)),
                ('tipo', models.CharField(choices=[('INFO', 'Informa��o'), ('AVISO', 'Aviso'), ('ERRO', 'Erro'), ('DEBUG', 'Depura��o')], default='INFO', max_length=10)),
                ('data', models.DateTimeField(default=django.utils.timezone.now)),
                ('detalhes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Log de Atividade',
                'verbose_name_plural': 'Logs de Atividades',
                'ordering': ['-data'],
            },
        ),
    ]





## core\templates\core\atualizar_configuracao.html

html
{% extends "core/base.html" %}

{% block title %}Atualizar Configura��es do Sistema{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Atualizar Configura��es do Sistema</h1>
    
    <div class="card mt-4">
        <div class="card-body">
            <form method="post">
                {% csrf_token %}
                
                <div class="mb-3">
                    <label for="nome_sistema" class="form-label">Nome do Sistema</label>
                    <input type="text" class="form-control" id="nome_sistema" name="nome_sistema" value="{{ config.nome_sistema }}" required>
                </div>
                
                <div class="mb-3">
                    <label for="versao" class="form-label">Vers�o</label>
                    <input type="text" class="form-control" id="versao" name="versao" value="{{ config.versao }}" required>
                </div>
                
                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="manutencao_ativa" name="manutencao_ativa" {% if config.manutencao_ativa %}checked{% endif %}>
                    <label class="form-check-label" for="manutencao_ativa">Sistema em Manuten��o</label>
                </div>
                
                <div class="mb-3">
                    <label for="mensagem_manutencao" class="form-label">Mensagem de Manuten��o</label>
                    <textarea class="form-control" id="mensagem_manutencao" name="mensagem_manutencao" rows="3">{{ config.mensagem_manutencao }}</textarea>
                </div>
                
                <div class="d-flex justify-content-between">
                    <a href="{% url 'core:painel_controle' %}" class="btn btn-secondary">Cancelar</a>
                    <button type="submit" class="btn btn-primary">Salvar Altera��es</button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## core\templates\core\base.html

html
{% load static %}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Sistema{% endblock %}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="{% url 'core:pagina_inicial' %}">OMAUM</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" title="Menu de navega��o">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    {% if user.is_authenticated %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'alunos:listar' %}">Alunos</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'atividades:atividade_academica_list' %}">Atividades Acad�micas</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'atividades:atividade_ritualistica_list' %}">Atividades Ritual�sticas</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'turmas:listar_turmas' %}">Turmas</a>   
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/presencas/lista/">Presen�as</a>
                        </li>
                        <!-- Add more navigation items for other functionalities -->
                        {% if user.is_staff %}
                            <li class="nav-item">
                                <a class="nav-link" href="{% url 'core:painel_controle' %}">Painel de Controle</a>
                            </li>
                        {% endif %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'core:sair' %}">Sair</a>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'core:entrar' %}">Entrar</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endif %}
        
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    {% block extra_js %}{% endblock %}
    <!-- Adicione esta linha antes do fechamento do body -->
    <script src="{% static 'js/csrf_refresh.js' %}"></script>
</body>
</html>




## core\templates\core\home.html

html
{% extends "core/base.html" %}

{% block title %}{{ titulo }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Bem-vindo ao {{ titulo }}</h1>
    {% if user.is_authenticated %}    
        <div class="row mt-4">
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Alunos</h5>
                        <a href="{% url 'alunos:listar' %}" class="btn btn-primary">Gerenciar Alunos</a>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Atividades Acad�micas</h5>
                        <a href="{% url 'atividades:atividade_academica_list' %}" class="btn btn-primary">Gerenciar Atividades Acad�micas</a>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Atividades Ritual�sticas</h5>
                        <a href="{% url 'atividades:atividade_ritualistica_list' %}" class="btn btn-primary">Gerenciar Atividades Ritual�sticas</a>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Turmas</h5>
                        <a href="{% url 'turmas:listar_turmas' %}" class="btn btn-primary">Gerenciar Turmas</a>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Presen�as</h5>
                        <a href="/presencas/lista/" class="btn btn-primary">Gerenciar Presen�as</a>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Relat�rios</h5>
                        <a href="{% url 'relatorios_index' %}" class="btn btn-primary">Gerar Relat�rios</a>
                    </div>
                </div>
            </div>
            {% if user.is_staff %}
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Painel de Controle</h5>
                        <a href="{% url 'core:painel_controle' %}" class="btn btn-primary">Acessar Painel</a>
                    </div>
                </div>
            </div>
            {% endif %}
        </div>
    {% else %}
        <p>Por favor, fa�a login para acessar as funcionalidades do sistema.</p>
        <a href="{% url 'core:entrar' %}" class="btn btn-primary">Entrar</a>
    {% endif %}
</div>
{% endblock %}





## core\templates\core\lista_categorias.html

html
{% extends "core/base.html" %}

{% block title %}Categorias{% endblock %}

{% block content %}
    <h1>Categorias</h1>
    
    <div class="row mt-4">
        {% for categoria in categorias %}
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">{{ categoria.nome }}</h5>
                        <p class="card-text">{{ categoria.descricao|truncatewords:20 }}</p>
                        <a href="{% url 'core:detalhe_categoria' categoria.id %}" class="btn btn-primary">Ver detalhes</a>
                    </div>
                </div>
            </div>
        {% empty %}
            <div class="col-12">
                <p>Nenhuma categoria encontrada.</p>
            </div>
        {% endfor %}
    </div>
{% endblock %}





## core\templates\core\login.html

html
{% extends "core/base.html" %}

{% block title %}Entrar no Sistema{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">Entrar no Sistema</h4>
                </div>
                <div class="card-body">
                    <form method="post" class="needs-validation" novalidate>
                        {% csrf_token %}
                        
                        {% if form.errors %}
                            <div class="alert alert-danger">
                                Seu nome de usu�rio e senha n�o correspondem. Por favor, tente novamente.
                            </div>
                        {% endif %}
                        
                        <div class="mb-3">
                            <label for="id_username" class="form-label">Nome de usu�rio</label>
                            <input type="text" name="username" id="id_username" class="form-control" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="id_password" class="form-label">Senha</label>
                            <input type="password" name="password" id="id_password" class="form-control" required>
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Entrar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}





## core\templates\core\manutencao.html

html
{% extends "core/base.html" %}

{% block title %}Sistema em Manuten��o{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 text-center">
            <div class="alert alert-warning">
                <h2><i class="fas fa-tools"></i> Sistema em Manuten��o</h2>
                <p class="lead mt-3">
                    Estamos realizando melhorias no sistema. Por favor, tente novamente mais tarde.
                </p>
                {% if mensagem %}
                    <div class="mt-4">
                        <p>{{ mensagem }}</p>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}





## core\templates\core\painel_controle.html

html
{% extends "core/base.html" %}

{% block title %}Painel de Controle{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Painel de Controle</h1>
    
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Configura��es do Sistema</h5>
                </div>
                <div class="card-body">
                    <p><strong>Nome do Sistema:</strong> {{ config.nome_sistema }}</p>
                    <p><strong>Vers�o:</strong> {{ config.versao }}</p>
                    <p><strong>�ltima Atualiza��o:</strong> {{ config.data_atualizacao|date:"d/m/Y H:i" }}</p>
                    <p>
                        <strong>Status:</strong> 
                        {% if config.manutencao_ativa %}
                            <span class="badge bg-warning">Em Manuten��o</span>
                        {% else %}
                            <span class="badge bg-success">Operacional</span>
                        {% endif %}
                    </p>
                    
                    <a href="{% url 'core:atualizar_configuracao' %}" class="btn btn-primary">
                        Editar Configura��es
                    </a>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Logs Recentes</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Tipo</th>
                                    <th>A��o</th>
                                    <th>Usu�rio</th>
                                    <th>Data</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for log in logs_recentes %}
                                <tr>
                                    <td>
                                        {% if log.tipo == 'INFO' %}
                                            <span class="badge bg-info">INFO</span>
                                        {% elif log.tipo == 'AVISO' %}
                                            <span class="badge bg-warning">AVISO</span>
                                        {% elif log.tipo == 'ERRO' %}
                                            <span class="badge bg-danger">ERRO</span>
                                        {% else %}
                                            <span class="badge bg-secondary">{{ log.tipo }}</span>
                                        {% endif %}
                                    </td>
                                    <td>{{ log.acao }}</td>
                                    <td>{{ log.usuario }}</td>
                                    <td>{{ log.data|date:"d/m/Y H:i" }}</td>
                                </tr>
                                {% empty %}
                                <tr>
                                    <td colspan="4" class="text-center">Nenhum log encontrado</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    
                    <a href="{% url 'admin:core_logatividade_changelist' %}" class="btn btn-primary">
                        Ver Todos os Logs
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}



# C�digo da Funcionalidade: cargos
*Gerado automaticamente*



## cargos\admin.py

python
from django.contrib import admin
from .models import CargoAdministrativo

@admin.register(CargoAdministrativo)
class CargoAdministrativoAdmin(admin.ModelAdmin):
    list_display = ['codigo_cargo', 'nome', 'descricao']
    search_fields = ['codigo_cargo', 'nome']
    list_filter = ['codigo_cargo']





## cargos\apps.py

python
from django.apps import AppConfig


class CargosConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cargos'





## cargos\forms.py

python
from django import forms
from .models import CargoAdministrativo

class CargoAdministrativoForm(forms.ModelForm):
    """
    Formul�rio para cria��o e edi��o de Cargos Administrativos.
    """
    class Meta:
        model = CargoAdministrativo
        fields = ['codigo_cargo', 'nome', 'descricao']
        widgets = {
            'codigo_cargo': forms.TextInput(attrs={'class': 'form-control'}),
            'nome': forms.TextInput(attrs={'class': 'form-control'}),
            'descricao': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }
        labels = {
            'codigo_cargo': 'C�digo do Cargo',
            'nome': 'Nome',
            'descricao': 'Descri��o',
        }
        help_texts = {
            'codigo_cargo': 'C�digo �nico que identifica o cargo (ex: COORD, DIR, etc.)',
            'nome': 'Nome completo do cargo administrativo',
            'descricao': 'Descri��o detalhada das responsabilidades do cargo',
        }
        error_messages = {
            'codigo_cargo': {
                'unique': 'Este c�digo de cargo j� est� em uso. Por favor, escolha outro.',
                'required': 'O c�digo do cargo � obrigat�rio.',
                'max_length': 'O c�digo do cargo n�o pode ter mais de 10 caracteres.',
            },
            'nome': {
                'required': 'O nome do cargo � obrigat�rio.',
                'max_length': 'O nome do cargo n�o pode ter mais de 100 caracteres.',
            },
        }

    def clean_codigo_cargo(self):
        """
        Valida��o personalizada para o campo codigo_cargo.
        Converte o c�digo para mai�sculas e remove espa�os extras.
        """
        codigo = self.cleaned_data.get('codigo_cargo')
        if codigo:
            return codigo.upper().strip()
        return codigo

    def clean_nome(self):
        """
        Valida��o personalizada para o campo nome.
        Capitaliza a primeira letra de cada palavra e remove espa�os extras.
        """
        nome = self.cleaned_data.get('nome')
        if nome:
            return ' '.join(word.capitalize() for word in nome.split())
        return nome





## cargos\formulario_cargo.py

python
from django import forms
from .models import CargoAdministrativo

class CargoAdministrativoForm(forms.ModelForm):
    class Meta:
        model = CargoAdministrativo
        fields = ['codigo_cargo', 'nome', 'descricao']
        widgets = {
            'codigo_cargo': forms.TextInput(attrs={'class': 'form-control'}),
            'nome': forms.TextInput(attrs={'class': 'form-control'}),
            'descricao': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }





## cargos\formulario_cargos.py

python
from django import forms
from .models import CargoAdministrativo

class CargoAdministrativoForm(forms.ModelForm):
    class Meta:
        model = CargoAdministrativo
        fields = ['codigo_cargo', 'nome', 'descricao']
        widgets = {
            'codigo_cargo': forms.TextInput(attrs={'class': 'form-control'}),
            'nome': forms.TextInput(attrs={'class': 'form-control'}),
            'descricao': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }





## cargos\models.py

python
from django.db import models

class CargoAdministrativo(models.Model):
    """
    Representa um cargo administrativo no sistema. O cargo administrativo possui um c�digo �nico, 
    um nome e uma descri��o opcional.
    """
    codigo_cargo = models.CharField(max_length=10, unique=True, verbose_name="C�digo do Cargo")
    nome = models.CharField(max_length=100, verbose_name="Nome")
    descricao = models.TextField(blank=True, null=True, verbose_name="Descri��o")

    def __str__(self):
        return self.nome
        
    class Meta:
        verbose_name = "Cargo Administrativo"
        verbose_name_plural = "Cargos Administrativos"
        ordering = ['nome']





## cargos\tests.py

python
# Alterar esta linha:
# from .form_cargo import CargoAdministrativoForm
# Para:
from .formulario_cargo import CargoAdministrativoForm





## cargos\urls.py

python
from django.urls import path
from . import views

app_name = 'cargos'

urlpatterns = [
    path('', views.listar_cargos, name='listar_cargos'),
    path('novo/', views.criar_cargo, name='criar_cargo'),
    path('<int:id>/editar/', views.editar_cargo, name='editar_cargo'),
    path('<int:id>/excluir/', views.excluir_cargo, name='excluir_cargo'),
    path('<int:id>/detalhes/', views.detalhes_cargo, name='detalhes_cargo'),
]




## cargos\views.py

python
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from .models import CargoAdministrativo
from .formulario_cargo import CargoAdministrativoForm

def listar_cargos(request):
    cargos = CargoAdministrativo.objects.all()
    return render(request, 'cargos/listar_cargos.html', {'cargos': cargos})

def criar_cargo(request):
    if request.method == 'POST':
        form = CargoAdministrativoForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Cargo administrativo criado com sucesso!')
            return redirect('cargos:listar_cargos')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = CargoAdministrativoForm()
    return render(request, 'cargos/criar_cargo.html', {'form': form})

def editar_cargo(request, id):
    cargo = get_object_or_404(CargoAdministrativo, id=id)
    if request.method == 'POST':
        form = CargoAdministrativoForm(request.POST, instance=cargo)
        if form.is_valid():
            form.save()
            messages.success(request, 'Cargo administrativo atualizado com sucesso!')
            return redirect('cargos:listar_cargos')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = CargoAdministrativoForm(instance=cargo)
    return render(request, 'cargos/editar_cargo.html', {'form': form, 'cargo': cargo})

def excluir_cargo(request, id):
    cargo = get_object_or_404(CargoAdministrativo, id=id)
    if request.method == 'POST':
        cargo.delete()
        messages.success(request, 'Cargo administrativo exclu�do com sucesso!')
        return redirect('cargos:listar_cargos')
    return render(request, 'cargos/excluir_cargo.html', {'cargo': cargo})

def detalhes_cargo(request, id):
    cargo = get_object_or_404(CargoAdministrativo, id=id)
    return render(request, 'cargos/detalhes_cargo.html', {'cargo': cargo})





## cargos\migrations\0001_initial.py

python
# Generated by Django 5.1.7 on 2025-03-27 11:38

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CargoAdministrativo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_cargo', models.CharField(max_length=10, unique=True, verbose_name='C�digo do Cargo')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('descricao', models.TextField(blank=True, null=True, verbose_name='Descri��o')),
            ],
            options={
                'verbose_name': 'Cargo Administrativo',
                'verbose_name_plural': 'Cargos Administrativos',
                'ordering': ['nome'],
            },
        ),
    ]





## cargos\templates\cargos\confirmar_exclusao.html

html
{% extends 'base.html' %}

{% block title %}Confirmar Exclus�o{% endblock %}

{% block content %}
<div class="container">
    <h1 class="my-4">Confirmar Exclus�o</h1>
    
    <div class="card">
        <div class="card-body">
            <p class="lead">Tem certeza que deseja excluir o cargo administrativo "{{ cargo.nome }}"?</p>
            <p class="text-danger">Esta a��o n�o pode ser desfeita.</p>
            
            <form method="post">
                {% csrf_token %}
                <button type="submit" class="btn btn-danger">Sim, excluir</button>
                <a href="{% url 'cargos:listar_cargos_administrativos' %}" class="btn btn-secondary">Cancelar</a>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## cargos\templates\cargos\criar_cargo.html

html
{% extends 'base.html' %}

{% block title %}Criar Novo Cargo Administrativo{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Criar Novo Cargo Administrativo</h1>
    
    <form method="post">
        {% csrf_token %}
        {% include 'includes/form_errors.html' %}
        
        {% for field in form %}
            {% include 'includes/form_field.html' %}
        {% endfor %}
        
        <button type="submit" class="btn btn-primary">Criar Cargo</button>
        <a href="{% url 'cargos:listar_cargos' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}





## cargos\templates\cargos\detalhes_cargo.html

html
{% extends 'base.html' %}

{% block title %}Detalhes do Cargo Administrativo{% endblock %}

{% block content %}
<div class="container mt-4">
  <h1>Detalhes do Cargo Administrativo</h1>
  
  <div class="card">
    <div class="card-header">
      <h2>{{ cargo.nome }}</h2>
    </div>
    <div class="card-body">
      <p><strong>C�digo:</strong> {{ cargo.codigo_cargo }}</p>
      <p><strong>Descri��o:</strong> {{ cargo.descricao|default:"N�o informada" }}</p>
    </div>
    <div class="card-footer">
      <a href="{% url 'cargos:editar_cargo' cargo.id %}" class="btn btn-warning">Editar</a>
      <a href="{% url 'cargos:excluir_cargo' cargo.id %}" class="btn btn-danger">Excluir</a>
      <a href="{% url 'cargos:listar_cargos' %}" class="btn btn-secondary">Voltar</a>
    </div>
  </div>
</div>
{% endblock %}





## cargos\templates\cargos\detalhe_cargo.html

html
{% extends 'base.html' %}

{% block title %}Detalhes do Cargo{% endblock %}

{% block content %}
<div class="container">
    <h1 class="my-4">Detalhes do Cargo Administrativo</h1>
    
    <div class="card">
        <div class="card-body">
            <h2>{{ cargo.nome }}</h2>
            <p><strong>C�digo:</strong> {{ cargo.codigo_cargo }}</p>
            <p><strong>Descri��o:</strong> {{ cargo.descricao }}</p>
            
            <div class="mt-3">
                <a href="{% url 'cargos:editar_cargo' cargo.codigo_cargo %}" class="btn btn-warning">Editar</a>
                <a href="{% url 'cargos:excluir_cargo' cargo.codigo_cargo %}" class="btn btn-danger">Excluir</a>
                <a href="{% url 'cargos:listar_cargos_administrativos' %}" class="btn btn-secondary">Voltar para a Lista</a>
            </div>
        </div>
    </div>
</div>
{% endblock %}





## cargos\templates\cargos\editar_cargo.html

html
{% extends 'base.html' %}

{% block title %}Editar Cargo Administrativo{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Editar Cargo Administrativo</h1>
    
    <form method="post">
        {% csrf_token %}
        {% include 'includes/form_errors.html' %}
        
        {% for field in form %}
            {% include 'includes/form_field.html' %}
        {% endfor %}
        
        <button type="submit" class="btn btn-primary">Atualizar Cargo</button>
        <a href="{% url 'cargos:listar_cargos' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}





## cargos\templates\cargos\excluir_cargo.html

html
{% extends 'base.html' %}

{% block title %}Excluir Cargo Administrativo{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Excluir Cargo Administrativo</h1>
    <p>Tem certeza que deseja excluir o cargo administrativo "{{ cargo.nome }}" ({{ cargo.codigo_cargo }})?</p>
    
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Sim, excluir</button>
        <a href="{% url 'cargos:listar_cargos' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}





## cargos\templates\cargos\formulario_cargo.html

html
{% extends 'base.html' %}

{% block title %}{{ titulo }}{% endblock %}

{% block content %}
<div class="container">
    <h1 class="my-4">{{ titulo }}</h1>
    
    <form method="post">
        {% csrf_token %}
        
        <div class="card">
            <div class="card-body">
                {% for field in form %}
                <div class="mb-3">
                    <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
                    {{ field }}
                    {% if field.errors %}
                    <div class="text-danger">
                        {{ field.errors }}
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>
        </div>
        
        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Salvar</button>
            <a href="{% url 'cargos:listar_cargos_administrativos' %}" class="btn btn-secondary">Cancelar</a>
        </div>
    </form>
</div>
{% endblock %}





## cargos\templates\cargos\listar_cargos.html

html
{% extends 'base.html' %}

{% block title %}Cargos Administrativos{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Cargos Administrativos</h1>
  
    <a href="{% url 'cargos:criar_cargo' %}" class="btn btn-primary mb-3">Novo Cargo</a>
  
    <table class="table table-striped">
      <thead>
        <tr>
          <th>C�digo</th>
          <th>Nome</th>
          <th>Descri��o</th>
          <th>A��es</th>
        </tr>
      </thead>
      <tbody>
        {% for cargo in cargos %}
        <tr>
          <td>{{ cargo.codigo_cargo }}</td>
          <td>{{ cargo.nome }}</td>
          <td>{{ cargo.descricao|truncatechars:50|default:"-" }}</td>
          <td>
            <a href="{% url 'cargos:detalhes_cargo' cargo.id %}" class="btn btn-sm btn-info">Detalhes</a>
            <a href="{% url 'cargos:editar_cargo' cargo.id %}" class="btn btn-sm btn-warning">Editar</a>
            <a href="{% url 'cargos:excluir_cargo' cargo.id %}" class="btn btn-sm btn-danger">Excluir</a>
          </td>
        </tr>
        {% empty %}
        <tr>
          <td colspan="4" class="text-center">Nenhum cargo administrativo cadastrado.</td>
        </tr>
        {% endfor %}
      </tbody>
    </table>
</div>
{% endblock %}




## cargos\tests\test_models.py

python
from django.test import TestCase
from cargos.models import CargoAdministrativo

class CargoAdministrativoTest(TestCase):
    def test_criar_cargo(self):
        cargo = CargoAdministrativo.objects.create(
            codigo_cargo='CARGO001',
            nome='Coordenador',
            descricao='Respons�vel pela coordena��o do curso.'
        )
        self.assertEqual(cargo.nome, 'Coordenador')
        self.assertEqual(cargo.codigo_cargo, 'CARGO001')





## cargos\tests\test_views.py

python
from django.test import TestCase, Client
from django.urls import reverse
from cargos.models import CargoAdministrativo

class CargoViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.cargo = CargoAdministrativo.objects.create(
            codigo_cargo='CARGO001',
            nome='Coordenador',
            descricao='Respons�vel pela coordena��o do curso.'
        )

    def test_listar_cargos(self):
        response = self.client.get(reverse('cargos:listar_cargos_administrativos'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Coordenador')

    def test_detalhe_cargo(self):
        response = self.client.get(reverse('cargos:detalhe_cargo', args=[self.cargo.codigo_cargo]))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Coordenador')
        
    def test_criar_cargo(self):
        response = self.client.post(
            reverse('cargos:criar_cargo'),
            {
                'codigo_cargo': 'CARGO002',
                'nome': 'diretor',
                'descricao': 'Respons�vel pela dire��o do departamento.'
            }
        )
        self.assertEqual(response.status_code, 302)  # Redirecionamento ap�s sucesso
        
        # Verifica se o cargo foi criado e se o nome foi capitalizado corretamente
        cargo = CargoAdministrativo.objects.get(codigo_cargo='CARGO002')
        self.assertEqual(cargo.nome, 'Diretor')

    def test_editar_cargo(self):
        response = self.client.post(
            reverse('cargos:editar_cargo', args=[self.cargo.codigo_cargo]),
            {
                'codigo_cargo': 'CARGO001',
                'nome': 'coordenador s�nior',
                'descricao': 'Coordenador com experi�ncia avan�ada.'
            }
        )
        self.assertEqual(response.status_code, 302)  # Redirecionamento ap�s sucesso
        
        # Verifica se o cargo foi atualizado
        cargo = CargoAdministrativo.objects.get(codigo_cargo='CARGO001')
        self.assertEqual(cargo.nome, 'Coordenador S�nior')
        self.assertEqual(cargo.descricao, 'Coordenador com experi�ncia avan�ada.')

    def test_excluir_cargo(self):
        response = self.client.post(
            reverse('cargos:excluir_cargo', args=[self.cargo.codigo_cargo])
        )
        self.assertEqual(response.status_code, 302)  # Redirecionamento ap�s sucesso
        
        # Verifica se o cargo foi exclu�do
        with self.assertRaises(CargoAdministrativo.DoesNotExist):
            CargoAdministrativo.objects.get(codigo_cargo='CARGO001')



# C�digo da Funcionalidade: atividades
*Gerado automaticamente*



## atividades\admin.py

python
from django.contrib import admin
from .models import AtividadeAcademica, AtividadeRitualistica

@admin.register(AtividadeAcademica)
class AtividadeAcademicaAdmin(admin.ModelAdmin):
    list_display = ('nome', 'descricao', 'data_inicio', 'data_fim', 'turma')
    list_filter = ('turma',)
    search_fields = ('nome', 'descricao')

@admin.register(AtividadeRitualistica)
class AtividadeRitualisticaAdmin(admin.ModelAdmin):
    list_display = ('nome', 'descricao', 'data_inicio', 'data_fim', 'turma')
    list_filter = ('turma',)
    search_fields = ('nome', 'descricao')
    filter_horizontal = ('alunos',)





## atividades\apps.py

python
from django.apps import AppConfig


class AtividadesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'atividades'





## atividades\forms.py

python
from django import forms
import importlib

def criar_form_atividade_academica():
    """
    Cria o formul�rio para atividades acad�micas usando importa��o din�mica
    para evitar refer�ncias circulares.
    """
    class AtividadeAcademicaForm(forms.ModelForm):
        class Meta:
            model = None  # Ser� definido no __init__
            fields = ('nome', 'descricao', 'data_inicio', 'data_fim', 'turma')
            
        def __init__(self, *args, **kwargs):
            # Importa��o din�mica do modelo
            from .models import AtividadeAcademica
            self.Meta.model = AtividadeAcademica
            super().__init__(*args, **kwargs)
            
            # Importa��o din�mica da turma
            turmas_module = importlib.import_module('turmas.models')
            Turma = getattr(turmas_module, 'Turma')
            
            # Configurar queryset
            self.fields['turma'].queryset = Turma.objects.all()
    
    return AtividadeAcademicaForm

def criar_form_atividade_ritualistica():
    """
    Cria o formul�rio para atividades ritual�sticas usando importa��o din�mica
    para evitar refer�ncias circulares.
    """
    class AtividadeRitualisticaForm(forms.ModelForm):
        todos_alunos = forms.BooleanField(required=False, label="Incluir todos os alunos da turma")
        
        class Meta:
            model = None  # Ser� definido no __init__
            fields = ['nome', 'descricao', 'data_inicio', 'data_fim', 'turma', 'alunos', 'todos_alunos']

        def __init__(self, *args, **kwargs):
            # Importa��o din�mica dos modelos
            from .models import AtividadeRitualistica
            self.Meta.model = AtividadeRitualistica
            
            super().__init__(*args, **kwargs)
            
            # Importa��o din�mica usando importlib
            turmas_module = importlib.import_module('turmas.models')
            alunos_module = importlib.import_module('alunos.models')
            
            Turma = getattr(turmas_module, 'Turma')
            Aluno = getattr(alunos_module, 'Aluno')
            
            # Configurar os querysets
            self.fields['turma'].queryset = Turma.objects.all()
            self.fields['alunos'].queryset = Aluno.objects.all()
            self.fields['alunos'].widget = forms.CheckboxSelectMultiple()
            self.fields['alunos'].required = False
   
    return AtividadeRitualisticaForm




## atividades\models.py

python
from django.db import models
from django.utils import timezone

class AtividadeAcademica(models.Model):
    nome = models.CharField(max_length=100)
    descricao = models.TextField(blank=True, null=True)
    # Substituir o campo data por data_inicio e data_fim
    data_inicio = models.DateTimeField(default=timezone.now)
    data_fim = models.DateTimeField(blank=True, null=True)
    # Refer�ncia ao app correto
    turma = models.ForeignKey('turmas.Turma', on_delete=models.CASCADE, related_name='atividades_academicas')
    
    def __str__(self):
        return self.nome
    
    class Meta:
        verbose_name = 'Atividade Acad�mica'
        verbose_name_plural = 'Atividades Acad�micas'

class AtividadeRitualistica(models.Model):
    nome = models.CharField(max_length=100)
    descricao = models.TextField(blank=True, null=True)
    # Substituir o campo data por data_inicio e data_fim
    data_inicio = models.DateTimeField(default=timezone.now)
    data_fim = models.DateTimeField(blank=True, null=True)
    # Refer�ncia ao app correto
    turma = models.ForeignKey('turmas.Turma', on_delete=models.CASCADE, related_name='atividades_ritualisticas')
    # Refer�ncia ao app correto
    alunos = models.ManyToManyField('alunos.Aluno', related_name='atividades_ritualisticas')
    
    def __str__(self):
        return self.nome
    
    class Meta:
        verbose_name = 'Atividade Ritual�stica'
        verbose_name_plural = 'Atividades Ritual�sticas'





## atividades\tests.py

python
from django.test import TestCase

# Create your tests here.





## atividades\urls.py

python
from django.urls import path
from . import views

app_name = 'atividades'

urlpatterns = [
    path('academicas/', views.atividade_academica_list, name='atividade_academica_list'),
    path('ritualisticas/', views.listar_atividades_ritualisticas, name='atividade_ritualistica_list'),
    
    # URLs para atividades acad�micas
    path('academicas/criar/', views.criar_atividade_academica, name='academica_criar'),
    path('academicas/editar/<int:pk>/', views.editar_atividade_academica, name='academica_editar'),
    path('academicas/excluir/<int:pk>/', views.excluir_atividade_academica, name='academica_excluir'),
    path('academicas/lista/', views.atividade_academica_list, name='academica_lista'),
    
    # URLs para atividades ritual�sticas
    path('ritualisticas/criar/', views.criar_atividade_ritualistica, name='ritualistica_criar'),
    path('ritualisticas/editar/<int:pk>/', views.editar_atividade_ritualistica, name='ritualistica_editar'),
    path('ritualisticas/excluir/<int:pk>/', views.excluir_atividade_ritualistica, name='ritualistica_excluir'),
    path('ritualisticas/lista/', views.listar_atividades_ritualisticas, name='ritualistica_lista'),
]




## atividades\views.py

python
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.core.paginator import Paginator
import importlib

# Importa��o din�mica dos modelos
from .models import AtividadeAcademica, AtividadeRitualistica
from .forms import criar_form_atividade_academica, criar_form_atividade_ritualistica

from django.shortcuts import render
from .models import AtividadeAcademica

def atividade_academica_list(request):
    atividades = AtividadeAcademica.objects.all()
    return render(request, 'atividades/atividade_academica_list.html', {'atividades': atividades})

def criar_atividade_academica(request):
    """Cria uma nova atividade acad�mica"""
    AtividadeAcademicaForm = criar_form_atividade_academica()
   
    if request.method == 'POST':
        form = AtividadeAcademicaForm(request.POST)
        if form.is_valid():
            try:
                atividade = form.save()
                messages.success(request, 'Atividade acad�mica criada com sucesso!')
                return redirect('atividades:academica_lista')
            except Exception as e:
                messages.error(request, f'Erro ao criar atividade: {str(e)}')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'Erro no campo {field}: {error}')
    else:
        form = AtividadeAcademicaForm()
   
    return render(request, 'atividades/academica_formulario.html', {'form': form})

def editar_atividade_academica(request, pk):
    """Edita uma atividade acad�mica existente"""
    AtividadeAcademicaForm = criar_form_atividade_academica()
    atividade = get_object_or_404(AtividadeAcademica, pk=pk)
    
    if request.method == 'POST':
        form = AtividadeAcademicaForm(request.POST, instance=atividade)
        if form.is_valid():
            form.save()
            messages.success(request, 'Atividade acad�mica atualizada com sucesso!')
            return redirect('atividades:academica_lista')
    else:
        form = AtividadeAcademicaForm(instance=atividade)
    
    return render(request, 'atividades/academica_formulario.html', {'form': form})

def excluir_atividade_academica(request, pk):
    """Exclui uma atividade acad�mica"""
    atividade = get_object_or_404(AtividadeAcademica, pk=pk)
    
    if request.method == 'POST':
        atividade.delete()
        messages.success(request, 'Atividade acad�mica exclu�da com sucesso!')
        return redirect('atividades:academica_lista')
    
    return render(request, 'atividades/academica_confirmar_exclusao.html', {'object': atividade})

# Views para Atividades Ritual�sticas
def listar_atividades_ritualisticas(request):
    """Exibe a lista de atividades ritual�sticas com filtros e pagina��o"""
    # Importa��o din�mica
    turmas_module = importlib.import_module('turmas.models')
    Turma = getattr(turmas_module, 'Turma')
    
    # Obter todas as atividades
    atividades = AtividadeRitualistica.objects.all()
    
    # Busca por nome
    search_query = request.GET.get('search', '')
    if search_query:
        atividades = atividades.filter(nome__icontains=search_query)
    
    # Filtro por turma
    turma_id = request.GET.get('turma', '')
    if turma_id:
        atividades = atividades.filter(turma_id=turma_id)
    
    # Ordena��o
    order_by = request.GET.get('order_by', 'nome')
    order_dir = request.GET.get('order_dir', 'asc')
    
    if order_dir == 'desc':
        order_by = f'-{order_by}'
        
    atividades = atividades.order_by(order_by)
    
    # Pagina��o
    paginator = Paginator(atividades, 10)  # 10 itens por p�gina
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    # Contexto para o template
    context = {
        'atividades_ritualisticas': page_obj,
        'search_query': search_query,
        'turmas': Turma.objects.all(),
        'is_paginated': page_obj.has_other_pages(),
        'page_obj': page_obj,
    }
    
    return render(request, 'atividades/ritualistica_lista.html', context)

def criar_atividade_ritualistica(request):
    """Cria uma nova atividade ritual�stica"""
    AtividadeRitualisticaForm = criar_form_atividade_ritualistica()
    
    if request.method == 'POST':
        form = AtividadeRitualisticaForm(request.POST)
        if form.is_valid():
            instance = form.save(commit=False)
            instance.save()
            
            # Tratar a op��o de incluir todos os alunos
            if form.cleaned_data.get('todos_alunos'):
                turma = form.cleaned_data.get('turma')
                if turma:
                    # Importa��o din�mica usando importlib
                    alunos_module = importlib.import_module('alunos.models')
                    Aluno = getattr(alunos_module, 'Aluno')
                    
                    # Adicionar todos os alunos da turma
                    alunos = Aluno.objects.filter(turmas=turma)
                    instance.alunos.set(alunos)
            else:
                # Salvar os alunos selecionados no formul�rio
                form.save_m2m()
            
            messages.success(request, 'Atividade ritual�stica criada com sucesso!')
            return redirect('atividades:ritualistica_lista')
    else:
        form = AtividadeRitualisticaForm()
    
    return render(request, 'atividades/atividade_ritualistica_form.html', {'form': form})

def editar_atividade_ritualistica(request, pk):
    """Edita uma atividade ritual�stica existente"""
    AtividadeRitualisticaForm = criar_form_atividade_ritualistica()
    atividade = get_object_or_404(AtividadeRitualistica, pk=pk)
    
    if request.method == 'POST':
        form = AtividadeRitualisticaForm(request.POST, instance=atividade)
        if form.is_valid():
            instance = form.save(commit=False)
            instance.save()
            
            # Tratar a op��o de incluir todos os alunos
            if form.cleaned_data.get('todos_alunos'):
                turma = form.cleaned_data.get('turma')
                if turma:
                    # Importa��o din�mica usando importlib
                    alunos_module = importlib.import_module('alunos.models')
                    Aluno = getattr(alunos_module, 'Aluno')
                    
                    # Adicionar todos os alunos da turma
                    alunos = Aluno.objects.filter(turmas=turma)
                    instance.alunos.set(alunos)
            else:
                # Salvar os alunos selecionados no formul�rio
                form.save_m2m()
            
            messages.success(request, 'Atividade ritual�stica atualizada com sucesso!')
            return redirect('atividades:ritualistica_lista')
    else:
        form = AtividadeRitualisticaForm(instance=atividade)
    
    return render(request, 'atividades/atividade_ritualistica_form.html', {'form': form})

def excluir_atividade_ritualistica(request, pk):
    """Exclui uma atividade ritual�stica"""
    atividade = get_object_or_404(AtividadeRitualistica, pk=pk)
    
    if request.method == 'POST':
        atividade.delete()
        messages.success(request, 'Atividade ritual�stica exclu�da com sucesso!')
        return redirect('atividades:ritualistica_lista')
    
    return render(request, 'atividades/ritualistica_confirmar_exclusao.html', {'object': atividade})





## atividades\migrations\0001_initial.py

python
# Generated by Django 5.1.7 on 2025-03-25 23:45

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AtividadeAcademica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('descricao', models.TextField(blank=True, null=True)),
                ('data_inicio', models.DateTimeField(default=django.utils.timezone.now)),
                ('data_fim', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Atividade Acad�mica',
                'verbose_name_plural': 'Atividades Acad�micas',
            },
        ),
        migrations.CreateModel(
            name='AtividadeRitualistica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('descricao', models.TextField(blank=True, null=True)),
                ('data_inicio', models.DateTimeField(default=django.utils.timezone.now)),
                ('data_fim', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Atividade Ritual�stica',
                'verbose_name_plural': 'Atividades Ritual�sticas',
            },
        ),
    ]





## atividades\migrations\0002_initial.py

python
# Generated by Django 5.1.7 on 2025-03-25 23:45

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('alunos', '__first__'),
        ('atividades', '0001_initial'),
        ('turmas', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='atividadeacademica',
            name='turma',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='atividades_academicas', to='turmas.turma'),
        ),
        migrations.AddField(
            model_name='atividaderitualistica',
            name='alunos',
            field=models.ManyToManyField(related_name='atividades_ritualisticas', to='alunos.aluno'),
        ),
        migrations.AddField(
            model_name='atividaderitualistica',
            name='turma',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='atividades_ritualisticas', to='turmas.turma'),
        ),
    ]





## atividades\templates\atividades\academica_confirmar_exclusao.html

html
{% extends "base.html" %}

{% block title %}Confirmar Exclus�o{% endblock %}

{% block content %}
<div class="container">
    <h1 class="my-4">Confirmar Exclus�o</h1>
    
    <div class="card">
        <div class="card-body">
            <p class="lead">Tem certeza que deseja excluir a atividade acad�mica "{{ object.nome }}"?</p>
            <p class="text-danger">Esta a��o n�o pode ser desfeita.</p>
            
            <form method="post">
                {% csrf_token %}
                <button type="submit" class="btn btn-danger">Sim, excluir</button>
                <a href="{% url 'atividades:academica_lista' %}" class="btn btn-secondary">Cancelar</a>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## atividades\templates\atividades\academica_formulario.html

html
{% extends "base.html" %}

{% block title %}
    {% if form.instance.pk %}Editar{% else %}Nova{% endif %} Atividade Acad�mica
{% endblock %}

{% block content %}
<div class="container">
    <h1 class="my-4">
        {% if form.instance.pk %}Editar{% else %}Nova{% endif %} Atividade Acad�mica
    </h1>
    
    <form method="post">
        {% csrf_token %}
        
        <div class="card">
            <div class="card-body">
                {% for field in form %}
                <div class="mb-3">
                    <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
                    {{ field }}
                    {% if field.errors %}
                    <div class="text-danger">
                        {{ field.errors }}
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>
        </div>
        
        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Salvar</button>
            <a href="{% url 'atividades:academica_lista' %}" class="btn btn-secondary">Cancelar</a>
        </div>
    </form>
</div>
{% endblock %}





## atividades\templates\atividades\academica_lista.html

html
{% extends "base.html" %}

{% block title %}Atividades Acad�micas{% endblock %}

{% block content %}
<div class="container">
    <h1 class="my-4">Atividades Acad�micas</h1>
    
    <div class="d-flex justify-content-between mb-3">
        <a href="{% url 'atividades:academica_criar' %}" class="btn btn-primary">Nova Atividade</a>
        
        <form class="d-flex" method="get">
            <input class="form-control me-2" type="search" placeholder="Buscar atividades" 
                   name="search" value="{{ search_query }}">
            <button class="btn btn-outline-primary" type="submit">Buscar</button>
        </form>
    </div>
    
    <div class="mb-3">
        <form method="get" class="d-flex flex-wrap gap-2">
            {% if search_query %}
            <input type="hidden" name="search" value="{{ search_query }}">
            {% endif %}
            
            <div class="form-group">
                <label for="turma_filter">Filtrar por Turma:</label>
                <select name="turma" id="turma_filter" class="form-control">
                    <option value="">Todas as Turmas</option>
                    {% for turma in turmas %}
                    <option value="{{ turma.id }}" {% if request.GET.turma == turma.id|stringformat:"i" %}selected{% endif %}>{{ turma.nome }}</option>
                    {% endfor %}
                </select>
            </div>
            
            <div class="form-group">
                <label for="data_inicio_filter">Data de In�cio (a partir de):</label>
                <input type="date" name="data_inicio_min" id="data_inicio_filter" class="form-control" value="{{ request.GET.data_inicio_min }}">
            </div>
            
            <div class="form-group">
                <label for="data_fim_filter">Data de Fim (at�):</label>
                <input type="date" name="data_fim_max" id="data_fim_filter" class="form-control" value="{{ request.GET.data_fim_max }}">
            </div>
            
            <div class="form-group d-flex align-items-end">
                <button type="submit" class="btn btn-primary">Filtrar</button>
                <a href="{% url 'atividades:academica_lista' %}" class="btn btn-secondary ms-2">Limpar Filtros</a>
            </div>
        </form>
    </div>
    
    <div class="card">
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>
                            <a href="?{% if request.GET.order_by == 'nome' and request.GET.order_dir == 'asc' %}order_by=nome&order_dir=desc{% else %}order_by=nome&order_dir=asc{% endif %}{% if search_query %}&search={{ search_query }}{% endif %}">
                                Nome
                                {% if request.GET.order_by == 'nome' %}
                                    {% if request.GET.order_dir == 'asc' %}
                                        <i class="fas fa-sort-up"></i>
                                    {% else %}
                                        <i class="fas fa-sort-down"></i>
                                    {% endif %}
                                {% endif %}
                            </a>
                        </th>
                        <th>
                            <a href="?{% if request.GET.order_by == 'turma' and request.GET.order_dir == 'asc' %}order_by=turma&order_dir=desc{% else %}order_by=turma&order_dir=asc{% endif %}{% if search_query %}&search={{ search_query }}{% endif %}">
                                Turma
                                {% if request.GET.order_by == 'turma' %}
                                    {% if request.GET.order_dir == 'asc' %}
                                        <i class="fas fa-sort-up"></i>
                                    {% else %}
                                        <i class="fas fa-sort-down"></i>
                                    {% endif %}
                                {% endif %}
                            </a>
                        </th>
                        <th>
                            <a href="?{% if request.GET.order_by == 'data_inicio' and request.GET.order_dir == 'asc' %}order_by=data_inicio&order_dir=desc{% else %}order_by=data_inicio&order_dir=asc{% endif %}{% if search_query %}&search={{ search_query }}{% endif %}">
                                Data de In�cio
                                {% if request.GET.order_by == 'data_inicio' %}
                                    {% if request.GET.order_dir == 'asc' %}
                                        <i class="fas fa-sort-up"></i>
                                    {% else %}
                                        <i class="fas fa-sort-down"></i>
                                    {% endif %}
                                {% endif %}
                            </a>
                        </th>
                        <th>
                            <a href="?{% if request.GET.order_by == 'data_fim' and request.GET.order_dir == 'asc' %}order_by=data_fim&order_dir=desc{% else %}order_by=data_fim&order_dir=asc{% endif %}{% if search_query %}&search={{ search_query }}{% endif %}">
                                Data de Fim
                                {% if request.GET.order_by == 'data_fim' %}
                                    {% if request.GET.order_dir == 'asc' %}
                                        <i class="fas fa-sort-up"></i>
                                    {% else %}
                                        <i class="fas fa-sort-down"></i>
                                    {% endif %}
                                {% endif %}
                            </a>
                        </th>
                        <th>A��es</th>
                    </tr>
                </thead>
                <tbody>
                    {% for atividade in atividades %}
                    <tr>
                        <td>{{ atividade.nome }}</td>
                        <td>{{ atividade.turma }}</td>
                        <td>{{ atividade.data_inicio|date:"d/m/Y" }}</td>
                        <td>{{ atividade.data_fim|date:"d/m/Y" }}</td>
                        <td>
                            <a href="{% url 'atividades:academica_editar' atividade.id %}" class="btn btn-sm btn-warning">Editar</a>
                            <button type="button" class="btn btn-sm btn-danger" 
                                    data-bs-toggle="modal" 
                                    data-bs-target="#deleteModal{{ atividade.id }}">
                                Excluir
                            </button>
                        </td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="5" class="text-center">Nenhuma atividade acad�mica encontrada.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    {% if is_paginated %}
    <nav aria-label="Pagina��o">
        <ul class="pagination justify-content-center">
            {% if page_obj.has_previous %}
            <li class="page-item">
                <a class="page-link" href="?page=1{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}" aria-label="Primeira">
                    <span aria-hidden="true">��</span>
                </a>
            </li>
            <li class="page-item">
                <a class="page-link" href="?page={{ page_obj.previous_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}" aria-label="Anterior">
                    <span aria-hidden="true">�</span>
                </a>
            </li>
            {% else %}
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="Primeira">
                    <span aria-hidden="true">��</span>
                </a>
            </li>
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="Anterior">
                    <span aria-hidden="true">�</span>
                </a>
            </li>
            {% endif %}
            
            {% for num in page_obj.paginator.page_range %}
                {% if page_obj.number == num %}
                <li class="page-item active"><a class="page-link" href="?page={{ num }}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}">{{ num }}</a></li>
                {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                <li class="page-item"><a class="page-link" href="?page={{ num }}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}">{{ num }}</a></li>
                {% endif %}
            {% endfor %}
            
            {% if page_obj.has_next %}
            <li class="page-item">
                <a class="page-link" href="?page={{ page_obj.next_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}" aria-label="Pr�xima">
                    <span aria-hidden="true">�</span>
                </a>
            </li>
            <li class="page-item">
                <a class="page-link" href="?page={{ page_obj.paginator.num_pages }}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}" aria-label="�ltima">
                    <span aria-hidden="true">��</span>
                </a>
            </li>
            {% else %}
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="Pr�xima">
                    <span aria-hidden="true">�</span>
                </a>
            </li>
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="�ltima">
                    <span aria-hidden="true">��</span>
                </a>
            </li>
            {% endif %}
        </ul>
    </nav>
    {% endif %}
</div>
{% for atividade in atividades %}
<!-- Modal de confirma��o para cada atividade -->
<div class="modal fade" id="deleteModal{{ atividade.id }}" tabindex="-1" aria-labelledby="deleteModalLabel{{ atividade.id }}" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel{{ atividade.id }}">Confirmar Exclus�o</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <div class="modal-body">
                <p>Tem certeza que deseja excluir a atividade acad�mica <strong>"{{ atividade.nome }}"</strong>?</p>
                <p class="text-danger">Esta a��o n�o pode ser desfeita.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <a href="{% url 'atividades:academica_excluir' atividade.id %}" class="btn btn-danger">Sim, excluir</a>
            </div>
        </div>
    </div>
</div>
{% endfor %}
{% endblock %}





## atividades\templates\atividades\atividade_ritualistica_form.html

html
{% extends 'base.html' %}

{% block title %}
    {% if form.instance.pk %}Editar{% else %}Nova{% endif %} Atividade Ritual�stica
{% endblock %}

{% block content %}
<div class="container">
    <h1 class="my-4">
        {% if form.instance.pk %}Editar{% else %}Nova{% endif %} Atividade Ritual�stica
    </h1>
    
    <form method="post">
        {% csrf_token %}
        
        <div class="card">
            <div class="card-body">
                {% for field in form %}
                <div class="mb-3">
                    <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
                    {{ field }}
                    {% if field.errors %}
                    <div class="text-danger">
                        {{ field.errors }}
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>
        </div>
        
        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Salvar</button>
            <a href="{% url 'atividades:ritualistica_lista' %}" class="btn btn-secondary">Cancelar</a>
        </div>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const todosAlunosCheckbox = document.getElementById('id_todos_alunos');
        const alunosField = document.getElementById('id_alunos');
        const alunosContainer = alunosField.closest('.mb-3');
        const turmaSelect = document.getElementById('id_turma');
        
        // Function to toggle the visibility and state of the alunos field
        function toggleAlunosField() {
            if (todosAlunosCheckbox.checked) {
                alunosContainer.style.opacity = '0.5';
                alunosField.disabled = true;
                
                // Add a visual indicator that the field is disabled
                const helpText = document.createElement('small');
                helpText.id = 'alunos-help-text';
                helpText.className = 'form-text text-muted';
                helpText.textContent = 'Todos os alunos da turma ser�o inclu�dos automaticamente';
                
                // Remove existing help text if any
                const existingHelpText = document.getElementById('alunos-help-text');
                if (existingHelpText) {
                    existingHelpText.remove();
                }
                
                alunosContainer.appendChild(helpText);
            } else {
                alunosContainer.style.opacity = '1';
                alunosField.disabled = false;
                
                // Remove the help text
                const helpText = document.getElementById('alunos-help-text');
                if (helpText) {
                    helpText.remove();
                }
            }
        }
        
        // Function to update available students based on selected turma
        function updateAlunosList() {
            const turmaId = turmaSelect.value;
            if (!turmaId) return;
            
            // Show loading indicator
            alunosContainer.style.opacity = '0.5';
            
            // Fetch students for the selected turma via AJAX
            fetch(`/api/turmas/${turmaId}/alunos/`)
                .then(response => response.json())
                .then(data => {
                    // Clear current options
                    while (alunosField.firstChild) {
                        alunosField.removeChild(alunosField.firstChild);
                    }
                    
                    // Add new options
                    data.forEach(aluno => {
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.name = 'alunos';
                        checkbox.value = aluno.id;
                        checkbox.id = `aluno_${aluno.id}`;
                        
                        const label = document.createElement('label');
                        label.htmlFor = `aluno_${aluno.id}`;
                        label.textContent = aluno.nome;
                        
                        const div = document.createElement('div');
                        div.className = 'form-check';
                        div.appendChild(checkbox);
                        div.appendChild(label);
                        
                        alunosField.appendChild(div);
                    });
                    
                    alunosContainer.style.opacity = '1';
                })
                .catch(error => {
                    console.error('Error fetching students:', error);
                    alunosContainer.style.opacity = '1';
                });
        }
        
        // Event listeners
        todosAlunosCheckbox.addEventListener('change', toggleAlunosField);
        turmaSelect.addEventListener('change', function() {
            if (!todosAlunosCheckbox.checked) {
                updateAlunosList();
            }
        });
        
        // Initial setup
        toggleAlunosField();
        if (turmaSelect.value && !todosAlunosCheckbox.checked) {
            updateAlunosList();
        }
    });
</script>
{% endblock %}




## atividades\templates\atividades\ritualistica_confirmar_exclusao.html

html
{% extends "base.html" %}

{% block title %}Confirmar Exclus�o{% endblock %}

{% block content %}
<div class="container">
    <h1 class="my-4">Confirmar Exclus�o</h1>
    
    <div class="card">
        <div class="card-body">
            <p class="lead">Tem certeza que deseja excluir a atividade ritual�stica "{{ object.nome }}"?</p>
            <p class="text-danger">Esta a��o n�o pode ser desfeita.</p>
            
            <form method="post">
                {% csrf_token %}
                <button type="submit" class="btn btn-danger">Sim, excluir</button>
                <a href="{% url 'atividades:ritualistica_lista' %}" class="btn btn-secondary">Cancelar</a>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## atividades\templates\atividades\ritualistica_lista.html

html
{% extends 'base.html' %}

{% block title %}Atividades Ritual�sticas{% endblock %}

{% block content %}
<div class="container">
    <h1 class="my-4">Atividades Ritual�sticas</h1>
    
    <div class="d-flex justify-content-between mb-3">
        <a href="{% url 'atividades:ritualistica_criar' %}" class="btn btn-primary">Nova Atividade Ritual�stica</a>
        
        <form class="d-flex" method="get">
            <input class="form-control me-2" type="search" placeholder="Buscar atividades"
                   name="search" value="{{ search_query }}">
            <button class="btn btn-outline-primary" type="submit">Buscar</button>
        </form>
    </div>
    
    <!-- Filtros adicionais -->
    <div class="mb-3">
        <form method="get" class="d-flex flex-wrap gap-2">
            {% if search_query %}
            <input type="hidden" name="search" value="{{ search_query }}">
            {% endif %}
            
            <div class="form-group me-2">
                <label for="turma_filter">Filtrar por Turma:</label>
                <select name="turma" id="turma_filter" class="form-control">
                    <option value="">Todas as Turmas</option>
                    {% for turma in turmas %}
                    <option value="{{ turma.id }}" {% if request.GET.turma == turma.id|stringformat:"i" %}selected{% endif %}>{{ turma.nome }}</option>
                    {% endfor %}
                </select>
            </div>
            
            <div class="form-group me-2">
                <label for="data_inicio_filter">Data de In�cio (a partir de):</label>
                <input type="date" name="data_inicio_min" id="data_inicio_filter" class="form-control" value="{{ request.GET.data_inicio_min }}">
            </div>
            
            <div class="form-group me-2">
                <label for="data_fim_filter">Data de Fim (at�):</label>
                <input type="date" name="data_fim_max" id="data_fim_filter" class="form-control" value="{{ request.GET.data_fim_max }}">
            </div>
            
            <div class="form-group d-flex align-items-end">
                <button type="submit" class="btn btn-primary">Filtrar</button>
                <a href="{% url 'atividades:ritualistica_lista' %}" class="btn btn-secondary ms-2">Limpar Filtros</a>
            </div>
        </form>
    </div>
    
    <div class="card">
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>
                            <a href="?{% if request.GET.order_by == 'nome' and request.GET.order_dir == 'asc' %}order_by=nome&order_dir=desc{% else %}order_by=nome&order_dir=asc{% endif %}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.turma %}&turma={{ request.GET.turma }}{% endif %}{% if request.GET.data_inicio_min %}&data_inicio_min={{ request.GET.data_inicio_min }}{% endif %}{% if request.GET.data_fim_max %}&data_fim_max={{ request.GET.data_fim_max }}{% endif %}">
                                Nome
                                {% if request.GET.order_by == 'nome' %}
                                    {% if request.GET.order_dir == 'asc' %}
                                        <i class="fas fa-sort-up"></i>
                                    {% else %}
                                        <i class="fas fa-sort-down"></i>
                                    {% endif %}
                                {% endif %}
                            </a>
                        </th>
                        <th>
                            <a href="?{% if request.GET.order_by == 'turma' and request.GET.order_dir == 'asc' %}order_by=turma&order_dir=desc{% else %}order_by=turma&order_dir=asc{% endif %}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.turma %}&turma={{ request.GET.turma }}{% endif %}{% if request.GET.data_inicio_min %}&data_inicio_min={{ request.GET.data_inicio_min }}{% endif %}{% if request.GET.data_fim_max %}&data_fim_max={{ request.GET.data_fim_max }}{% endif %}">
                                Turma
                                {% if request.GET.order_by == 'turma' %}
                                    {% if request.GET.order_dir == 'asc' %}
                                        <i class="fas fa-sort-up"></i>
                                    {% else %}
                                        <i class="fas fa-sort-down"></i>
                                    {% endif %}
                                {% endif %}
                            </a>
                        </th>
                        <th>
                            <a href="?{% if request.GET.order_by == 'data_inicio' and request.GET.order_dir == 'asc' %}order_by=data_inicio&order_dir=desc{% else %}order_by=data_inicio&order_dir=asc{% endif %}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.turma %}&turma={{ request.GET.turma }}{% endif %}{% if request.GET.data_inicio_min %}&data_inicio_min={{ request.GET.data_inicio_min }}{% endif %}{% if request.GET.data_fim_max %}&data_fim_max={{ request.GET.data_fim_max }}{% endif %}">
                                Data de In�cio
                                {% if request.GET.order_by == 'data_inicio' %}
                                    {% if request.GET.order_dir == 'asc' %}
                                        <i class="fas fa-sort-up"></i>
                                    {% else %}
                                        <i class="fas fa-sort-down"></i>
                                    {% endif %}
                                {% endif %}
                            </a>
                        </th>
                        <th>
                            <a href="?{% if request.GET.order_by == 'data_fim' and request.GET.order_dir == 'asc' %}order_by=data_fim&order_dir=desc{% else %}order_by=data_fim&order_dir=asc{% endif %}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.turma %}&turma={{ request.GET.turma }}{% endif %}{% if request.GET.data_inicio_min %}&data_inicio_min={{ request.GET.data_inicio_min }}{% endif %}{% if request.GET.data_fim_max %}&data_fim_max={{ request.GET.data_fim_max }}{% endif %}">
                                Data de Fim
                                {% if request.GET.order_by == 'data_fim' %}
                                    {% if request.GET.order_dir == 'asc' %}
                                        <i class="fas fa-sort-up"></i>
                                    {% else %}
                                        <i class="fas fa-sort-down"></i>
                                    {% endif %}
                                {% endif %}
                            </a>
                        </th>
                        <th>A��es</th>
                    </tr>
                </thead>
                <tbody>
                    {% for atividade in atividades_ritualisticas %}
                    <tr>
                        <td>{{ atividade.nome }}</td>
                        <td>{{ atividade.turma }}</td>
                        <td>{{ atividade.data_inicio|date:"d/m/Y" }}</td>
                        <td>{{ atividade.data_fim|date:"d/m/Y" }}</td>
                        <td>
                            <a href="{% url 'atividades:ritualistica_editar' atividade.id %}" class="btn btn-sm btn-warning">Editar</a>
                            <a href="{% url 'atividades:ritualistica_excluir' atividade.id %}" 
                               class="btn btn-sm btn-danger"
                               onclick="return confirm('Tem certeza que deseja excluir a atividade ritual�stica \'{{ atividade.nome }}\'? Esta a��o n�o pode ser desfeita.')">
                                Excluir
                            </a>
                        </td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="5" class="text-center">Nenhuma atividade ritual�stica encontrada.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Pagina��o -->
    {% if is_paginated %}
    <nav aria-label="Pagina��o" class="mt-3">
        <ul class="pagination justify-content-center">
            {% if page_obj.has_previous %}
            <li class="page-item">
                <a class="page-link" href="?page=1{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}{% if request.GET.turma %}&turma={{ request.GET.turma }}{% endif %}{% if request.GET.data_inicio_min %}&data_inicio_min={{ request.GET.data_inicio_min }}{% endif %}{% if request.GET.data_fim_max %}&data_fim_max={{ request.GET.data_fim_max }}{% endif %}" aria-label="Primeira">
                    <span aria-hidden="true">&laquo;&laquo;</span>
                </a>
            </li>
            <li class="page-item">
                <a class="page-link" href="?page={{ page_obj.previous_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}{% if request.GET.turma %}&turma={{ request.GET.turma }}{% endif %}{% if request.GET.data_inicio_min %}&data_inicio_min={{ request.GET.data_inicio_min }}{% endif %}{% if request.GET.data_fim_max %}&data_fim_max={{ request.GET.data_fim_max }}{% endif %}" aria-label="Anterior">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            {% else %}
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="Primeira">
                    <span aria-hidden="true">&laquo;&laquo;</span>
                </a>
            </li>
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="Anterior">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            {% endif %}
            
            {% for num in page_obj.paginator.page_range %}
                {% if page_obj.number == num %}
                <li class="page-item active"><a class="page-link" href="?page={{ num }}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}{% if request.GET.turma %}&turma={{ request.GET.turma }}{% endif %}{% if request.GET.data_inicio_min %}&data_inicio_min={{ request.GET.data_inicio_min }}{% endif %}{% if request.GET.data_fim_max %}&data_fim_max={{ request.GET.data_fim_max }}{% endif %}">{{ num }}</a></li>
                {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                <li class="page-item"><a class="page-link" href="?page={{ num }}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}{% if request.GET.turma %}&turma={{ request.GET.turma }}{% endif %}{% if request.GET.data_inicio_min %}&data_inicio_min={{ request.GET.data_inicio_min }}{% endif %}{% if request.GET.data_fim_max %}&data_fim_max={{ request.GET.data_fim_max }}{% endif %}">{{ num }}</a></li>
                {% endif %}
            {% endfor %}
            
            {% if page_obj.has_next %}
            <li class="page-item">
                <a class="page-link" href="?page={{ page_obj.next_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}{% if request.GET.turma %}&turma={{ request.GET.turma }}{% endif %}{% if request.GET.data_inicio_min %}&data_inicio_min={{ request.GET.data_inicio_min }}{% endif %}{% if request.GET.data_fim_max %}&data_fim_max={{ request.GET.data_fim_max }}{% endif %}" aria-label="Pr�xima">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
            <li class="page-item">
                <a class="page-link" href="?page={{ page_obj.paginator.num_pages }}{% if search_query %}&search={{ search_query }}{% endif %}{% if request.GET.order_by %}&order_by={{ request.GET.order_by }}{% endif %}{% if request.GET.order_dir %}&order_dir={{ request.GET.order_dir }}{% endif %}{% if request.GET.turma %}&turma={{ request.GET.turma }}{% endif %}{% if request.GET.data_inicio_min %}&data_inicio_min={{ request.GET.data_inicio_min }}{% endif %}{% if request.GET.data_fim_max %}&data_fim_max={{ request.GET.data_fim_max }}{% endif %}" aria-label="�ltima">
                    <span aria-hidden="true">&raquo;&raquo;</span>
                </a>
            </li>
            {% else %}
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="Pr�xima">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
            <li class="page-item





## atividades\tests\test_models.py

python
from django.test import TestCase
from atividades.models import AtividadeAcademica, AtividadeRitualistica
from turmas.models import Turma
from cursos.models import Curso
from alunos.models import Aluno
from datetime import date, timedelta
from django.utils import timezone

class AtividadeAcademicaModelTest(TestCase):
    def setUp(self):
        self.curso = Curso.objects.create(
            nome='Curso de Teste',
            descricao='Descri��o do curso de teste'
        )
        self.turma = Turma.objects.create(
            nome='Turma de Teste',
            curso=self.curso,
            data_inicio=date(2023, 1, 1),
            data_fim=date(2023, 12, 31)
        )
        
    def test_criar_atividade(self):
        data_inicio = timezone.now()
        data_fim = data_inicio + timedelta(days=7)
        
        atividade = AtividadeAcademica.objects.create(
            nome='Aula de Matem�tica',
            descricao='Aula introdut�ria sobre �lgebra.',
            data_inicio=data_inicio,
            data_fim=data_fim,
            turma=self.turma
        )
        
        self.assertEqual(atividade.nome, 'Aula de Matem�tica')
        self.assertEqual(atividade.descricao, 'Aula introdut�ria sobre �lgebra.')
        self.assertEqual(atividade.data_inicio, data_inicio)
        self.assertEqual(atividade.data_fim, data_fim)
        self.assertEqual(atividade.turma, self.turma)
        self.assertEqual(str(atividade), 'Aula de Matem�tica')

class AtividadeRitualisticaModelTest(TestCase):
    def setUp(self):
        self.curso = Curso.objects.create(
            nome='Curso de Teste',
            descricao='Descri��o do curso de teste'
        )
        self.turma = Turma.objects.create(
            nome='Turma de Teste',
            curso=self.curso,
            data_inicio=date(2023, 1, 1),
            data_fim=date(2023, 12, 31)
        )
        self.aluno1 = Aluno.objects.create(
            nome='Aluno 1',
            email='aluno1@teste.com'
        )
        self.aluno1.turmas.add(self.turma)
        self.aluno2 = Aluno.objects.create(
            nome='Aluno 2',
            email='aluno2@teste.com'
        )
        self.aluno2.turmas.add(self.turma)
        
    def test_criar_atividade_ritualistica(self):
        data_inicio = timezone.now()
        data_fim = data_inicio + timedelta(days=7)
        
        atividade = AtividadeRitualistica.objects.create(
            nome='Ritual de Inicia��o',
            descricao='Ritual para novos membros',
            data_inicio=data_inicio,
            data_fim=data_fim,
            turma=self.turma
        )
        atividade.alunos.add(self.aluno1, self.aluno2)
        
        self.assertEqual(atividade.nome, 'Ritual de Inicia��o')
        self.assertEqual(atividade.descricao, 'Ritual para novos membros')
        self.assertEqual(atividade.data_inicio, data_inicio)
        self.assertEqual(atividade.data_fim, data_fim)
        self.assertEqual(atividade.turma, self.turma)
        self.assertEqual(atividade.alunos.count(), 2)
        self.assertTrue(self.aluno1 in atividade.alunos.all())
        self.assertTrue(self.aluno2 in atividade.alunos.all())
        self.assertEqual(str(atividade), 'Ritual de Inicia��o')





## atividades\tests\test_views.py

python
from django.test import TestCase, Client
from django.urls import reverse
from atividades.models import AtividadeAcademica, AtividadeRitualistica
from turmas.models import Turma
from cursos.models import Curso
from alunos.models import Aluno
from datetime import date, timedelta
from django.utils import timezone

class AtividadeAcademicaViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.curso = Curso.objects.create(
            codigo_curso='CUR01',
            nome='Curso de Teste',
            descricao='Descri��o do curso de teste'
        )
        self.turma = Turma.objects.create(
            nome='Turma de Teste',
            curso=self.curso,
            data_inicio=date(2023, 1, 1),
            data_fim=date(2023, 12, 31)
        )
        self.data_inicio = timezone.now()
        self.data_fim = self.data_inicio + timedelta(days=7)
        self.atividade = AtividadeAcademica.objects.create(
            nome='Aula de Matem�tica',
            descricao='Aula introdut�ria sobre �lgebra.',
            data_inicio=self.data_inicio,
            data_fim=self.data_fim,
            turma=self.turma
        )

    def test_listar_atividades(self):
        response = self.client.get(reverse('atividades:academica_lista'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Aula de Matem�tica')
        
    def test_filtrar_atividades_por_turma(self):
        # Criar outra turma e atividade
        turma2 = Turma.objects.create(
            nome='Turma 2',
            curso=self.curso,
            data_inicio=date(2023, 1, 1),
            data_fim=date(2023, 12, 31)
        )
        AtividadeAcademica.objects.create(
            nome='Aula de F�sica',
            descricao='Introdu��o � f�sica',
            data_inicio=self.data_inicio,
            data_fim=self.data_fim,
            turma=turma2
        )
        
        # Filtrar por turma1
        response = self.client.get(f"{reverse('atividades:academica_lista')}?turma={self.turma.id}")
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Aula de Matem�tica')
        self.assertNotContains(response, 'Aula de F�sica')
        
        # Filtrar por turma2
        response = self.client.get(f"{reverse('atividades:academica_lista')}?turma={turma2.id}")
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Aula de F�sica')
        self.assertNotContains(response, 'Aula de Matem�tica')

    def test_criar_atividade(self):
        response = self.client.get(reverse('atividades:academica_criar'))
        self.assertEqual(response.status_code, 200)
        
        # Testar POST para criar atividade
        data = {
            'nome': 'Nova Atividade',
            'descricao': 'Descri��o da nova atividade',
            'data_inicio': timezone.now().strftime('%Y-%m-%d %H:%M:%S'),
            'data_fim': (timezone.now() + timedelta(days=7)).strftime('%Y-%m-%d %H:%M:%S'),
            'turma': self.turma.id
        }
        response = self.client.post(reverse('atividades:academica_criar'), data)
        self.assertEqual(response.status_code, 302)  # Redirecionamento ap�s sucesso
        
        # Verificar se a atividade foi criada
        self.assertTrue(AtividadeAcademica.objects.filter(nome='Nova Atividade').exists())
    
    def test_editar_atividade(self):
        response = self.client.get(reverse('atividades:academica_editar', args=[self.atividade.id]))
        self.assertEqual(response.status_code, 200)
        
        # Testar POST para editar atividade
        data = {
            'nome': 'Aula de Matem�tica Atualizada',
            'descricao': 'Descri��o atualizada',
            'data_inicio': self.data_inicio.strftime('%Y-%m-%d %H:%M:%S'),
            'data_fim': self.data_fim.strftime('%Y-%m-%d %H:%M:%S'),
            'turma': self.turma.id
        }
        response = self.client.post(reverse('atividades:academica_editar', args=[self.atividade.id]), data)
        self.assertEqual(response.status_code, 302)  # Redirecionamento ap�s sucesso
        
        # Verificar se a atividade foi atualizada
        self.atividade.refresh_from_db()
        self.assertEqual(self.atividade.nome, 'Aula de Matem�tica Atualizada')
        self.assertEqual(self.atividade.descricao, 'Descri��o atualizada')
    
    def test_excluir_atividade(self):
        response = self.client.get(reverse('atividades:academica_excluir',



# C�digo da Funcionalidade: alunos
*Gerado automaticamente*



## alunos\admin.py

python
from django.contrib import admin
from .models import Aluno

@admin.register(Aluno)
class AlunoAdmin(admin.ModelAdmin):
    list_display = ['nome', 'email', 'cpf']
    search_fields = ['nome', 'email', 'cpf']
    list_filter = ['sexo', 'status']





## alunos\apps.py

python
from django.apps import AppConfig

class AlunosConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'alunos'





## alunos\forms.py

python
from django import forms
from alunos.models import Aluno  # Corrigido: importar do m�dulo alunos
from django.core.exceptions import ValidationError


class AlunoForm(forms.ModelForm):
    class Meta:
        model = Aluno
        fields = [
            'cpf', 'nome', 'data_nascimento', 'hora_nascimento', 'email', 
            'sexo', 'nacionalidade', 'naturalidade', 'rua', 'numero_imovel', 
            'cidade', 'estado', 'bairro', 'cep', 'nome_primeiro_contato', 
            'celular_primeiro_contato', 'tipo_relacionamento_primeiro_contato', 
            'nome_segundo_contato', 'celular_segundo_contato', 
            'tipo_relacionamento_segundo_contato', 'tipo_sanguineo', 'fator_rh',
            'curso'
        ]
        # Voc� pode adicionar widgets personalizados aqui se necess�rio

    def clean(self):
        cleaned_data = super().clean()
        # Adicionar valida��es cruzadas aqui se necess�rio
        return cleaned_data


class ImportForm(forms.Form):
    file = forms.FileField()





## alunos\models.py

python
from django.db import models
from django.core.validators import EmailValidator, RegexValidator
from django.utils.translation import gettext_lazy as _
from datetime import date
from django.utils import timezone

class Aluno(models.Model):
    SEXO_CHOICES = [
        ('M', _('Masculino')),
        ('F', _('Feminino')),
        ('O', _('Outro')),
    ]

    TIPO_SANGUINEO_CHOICES = [
        ('A', 'A'),
        ('B', 'B'),
        ('AB', 'AB'),
        ('O', 'O'),
    ]

    FATOR_RH_CHOICES = [
        ('+', 'Positivo'),
        ('-', 'Negativo'),
    ]

    ESTADO_CIVIL_CHOICES = [
        ('S', _('Solteiro(a)')),
        ('C', _('Casado(a)')),
        ('D', _('Divorciado(a)')),
        ('V', _('Vi�vo(a)')),
        ('U', _('Uni�o Est�vel')),
    ]

    ESCOLARIDADE_CHOICES = [
        ('EF', _('Ensino Fundamental')),
        ('EM', _('Ensino M�dio')),
        ('ES', _('Ensino Superior')),
        ('PG', _('P�s-Gradua��o')),
        ('ME', _('Mestrado')),
        ('DO', _('Doutorado')),
    ]

    STATUS_CHOICES = [
        ('A', _('Ativo')),
        ('I', _('Inativo')),
        ('S', _('Suspenso')),
    ]
    cpf_validator = RegexValidator(
        regex=r'^\d{11}$',
        message=_('CPF deve conter 11 d�gitos num�ricos')
    )

    celular_validator = RegexValidator(
        regex=r'^\d{10,11}$',
        message=_('N�mero de celular inv�lido')
    )

    cep_validator = RegexValidator(
        regex=r'^\d{8}$',
        message=_('CEP deve conter 8 d�gitos num�ricos')
    )

    telefone_fixo_validator = RegexValidator(
        regex=r'^\d{10,11}$',
        message=_('N�mero de telefone fixo inv�lido')
    )
    cpf = models.CharField(
        _('CPF'),
        max_length=11,
        primary_key=True,
        validators=[cpf_validator],
        help_text=_('Digite apenas n�meros')
    )
    foto = models.ImageField(
        _('Foto'),
        upload_to='alunos/',
        null=True,
        blank=True
    )
    nome = models.CharField(
        _('Nome completo'),
        max_length=100
    )
    data_nascimento = models.DateField(_('Data de nascimento'))
    hora_nascimento = models.TimeField(_('Hora de nascimento'))
    numero_iniciatico = models.CharField(
        _('N�mero inici�tico'),
        max_length=20,
        blank=True,
        null=True
    )
    nome_iniciatico = models.CharField(
        _('Nome inici�tico'),
        max_length=100,
        blank=True,
        null=True
    )
    data_iniciacao = models.DateField(_('Data de inicia��o'), null=True, blank=True)

    sexo = models.CharField(
        _('Sexo'),
        max_length=1,
        choices=SEXO_CHOICES
    )
    estado_civil = models.CharField(
        _('Estado Civil'),
        max_length=1,
        choices=ESTADO_CIVIL_CHOICES,
        null=True,  # Adicione esta linha
        blank=True,  # Adicione esta linha
        default='S'  # Adicione esta linha (S para Solteiro como padr�o)
    )

    profissao = models.CharField(
        _('Profiss�o'), 
        max_length=100,
        null=True,  # Adicione esta linha
        blank=True  # Adicione esta linha
    )
    escolaridade = models.CharField(
        _('Escolaridade'),
        max_length=2,
        choices=ESCOLARIDADE_CHOICES,
        null=True,  # Adicione esta linha
        blank=True  # Adicione esta linha
    )

    email = models.EmailField(
        _('E-mail'),
        validators=[EmailValidator()]
    )
    telefone_fixo = models.CharField(
        _('Telefone Fixo'),
        max_length=11,
        validators=[telefone_fixo_validator],
        blank=True,
        null=True
    )
    nacionalidade = models.CharField(_('Nacionalidade'), max_length=50)
    naturalidade = models.CharField(_('Naturalidade'), max_length=50)
    cep = models.CharField(
        _('CEP'),
        max_length=8,
        validators=[cep_validator]
    )
    rua = models.CharField(_('Rua'), max_length=100)
    numero_imovel = models.CharField(_('N�mero'), max_length=10)
    complemento = models.CharField(
        _('Complemento'),
        max_length=50,
        blank=True,
        null=True
    )
    bairro = models.CharField(_('Bairro'), max_length=50)
    cidade = models.CharField(_('Cidade'), max_length=50)
    estado = models.CharField(_('Estado'), max_length=2)
    nome_primeiro_contato = models.CharField(
        _('Nome do primeiro contato'),
        max_length=100
    )
    celular_primeiro_contato = models.CharField(
        _('Celular do primeiro contato'),
        max_length=11,
        validators=[celular_validator]
    )
    tipo_relacionamento_primeiro_contato = models.CharField(
        _('Relacionamento do primeiro contato'),
        max_length=50
    )
    nome_segundo_contato = models.CharField(
        _('Nome do segundo contato'),
        max_length=100
    )
    celular_segundo_contato = models.CharField(
        _('Celular do segundo contato'),
        max_length=11,
        validators=[celular_validator]
    )
    tipo_relacionamento_segundo_contato = models.CharField(
        _('Relacionamento do segundo contato'),
        max_length=50
    )
    tipo_sanguineo = models.CharField(
        _('Tipo sangu�neo'),
        max_length=2,
        choices=TIPO_SANGUINEO_CHOICES
    )
    fator_rh = models.CharField(
        _('Fator RH'),
        max_length=1,
        choices=FATOR_RH_CHOICES
    )
    alergias = models.TextField(
        _('Alergias'),
        blank=True,
        null=True
    )
    condicoes_medicas_gerais = models.TextField(
        _('Condi��es m�dicas'),
        blank=True,
        null=True
    )
    convenio_medico = models.CharField(
        _('Conv�nio m�dico'),
        max_length=100,
        blank=True,
        null=True
    )
    hospital = models.CharField(
        _('Hospital de prefer�ncia'),
        max_length=100,
        blank=True,
        null=True
    )
    status = models.CharField(
        _('Status'),
        max_length=1,
        choices=STATUS_CHOICES,
        default='A'
    )

    created_at = models.DateTimeField(null=True, blank=True)
    updated_at = models.DateTimeField(
        _('Atualizado em'),
        auto_now=True
    )

    curso = models.ForeignKey(
        'cursos.Curso',  # Use string reference to avoid circular imports
        on_delete=models.SET_NULL,  # Prevent deletion of Curso if students are enrolled
        verbose_name=_('Curso'),
        related_name='alunos',  # This allows curso.alunos.all() to get all students in a course
        null=True,
        blank=True
    )

    class Meta:
        verbose_name = _('Aluno')
        verbose_name_plural = _('Alunos')
        ordering = ['nome']

    def __str__(self):
        return f"{self.nome} (CPF: {self.cpf})"

    def get_absolute_url(self):
        from django.urls import reverse
        return reverse('aluno-detail', args=[str(self.cpf)])

    def save(self, *args, **kwargs):
        if not self.created_at:
            self.created_at = timezone.now()
        super().save(*args, **kwargs)

    def clean(self):
        super().clean()
        if not self.curso_id:
            raise ValidationError({'curso': _('Todo aluno deve estar associado a um curso.')})

    @property
    def idade(self):
        today = date.today()
        return today.year - self.data_nascimento.year - (
            (today.month, today.day) <
            (self.data_nascimento.month, self.data_nascimento.day)
        )

    @property
    def tempo_desde_iniciacao(self):
        if self.data_iniciacao:
            today = date.today()
            delta = today - self.data_iniciacao
            return delta.days
        return None





## alunos\tests.py

python
from django.test import TestCase
from alunos.models import Aluno
from datetime import date, time
from django.core.exceptions import ValidationError  # Adicionada importa��o faltante


class AlunoTest(TestCase):
    def test_criar_aluno(self):
        aluno = Aluno.objects.create(
            cpf='12345678901',
            nome='Jo�o Test',
            data_nascimento=date(1995, 5, 15),
            hora_nascimento=time(14, 30),
            email='joao@test.com',
            sexo='M',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Maria Test',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='M�e',
            nome_segundo_contato='Jos� Test',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='Pai',
            tipo_sanguineo='A',
            fator_rh='+'
        )
        self.assertEqual(aluno.nome, 'Jo�o Test')

class AlunoValidationTest(TestCase):
    def setUp(self):
        self.valid_data = {
            'cpf': '12345678901',
            'nome': 'Carlos Souza',
            'data_nascimento': date(1975, 12, 25),
            'hora_nascimento': time(8, 30),
            'email': 'carlos@example.com',
            'sexo': 'M',
            'nacionalidade': 'Brasileira',
            'naturalidade': 'S�o Paulo',
            'rua': 'Rua Augusta',
            'numero_imovel': '789',
            'cidade': 'S�o Paulo',
            'estado': 'SP',
            'bairro': 'Consola��o',
            'cep': '01234567',
            'nome_primeiro_contato': 'Pedro Souza',
            'celular_primeiro_contato': '11999999999',
            'tipo_relacionamento_primeiro_contato': 'Pai',
            'nome_segundo_contato': 'Julia Souza',
            'celular_segundo_contato': '11988888888',
            'tipo_relacionamento_segundo_contato': 'M�e',
            'tipo_sanguineo': 'B',
            'fator_rh': '+'
        }

    def test_cpf_invalido(self):
        self.valid_data['cpf'] = '123'
        aluno = Aluno(**self.valid_data)
        with self.assertRaises(ValidationError):
            aluno.full_clean()

    def test_email_invalido(self):
        self.valid_data['email'] = 'email_invalido'
        aluno = Aluno(**self.valid_data)
        with self.assertRaises(ValidationError):
            aluno.full_clean()

    def test_sexo_invalido(self):
        self.valid_data['sexo'] = 'X'
        aluno = Aluno(**self.valid_data)
        with self.assertRaises(ValidationError):
            aluno.full_clean()

    def test_data_futura_invalida(self):
        self.valid_data['data_nascimento'] = date(2025, 1, 1)
        aluno = Aluno(**self.valid_data)
        with self.assertRaises(ValidationError):
            aluno.full_clean()

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By

class SeleniumTestCase(TestCase):
    def setUp(self):
        service = Service('chromedriver.exe')  # Path to your chromedriver
        self.driver = webdriver.Chrome(service=service)
        
    def tearDown(self):
        self.driver.quit()




## alunos\test_models.py

python
from django.test import TestCase
from alunos.models import Aluno
from datetime import date, time

class AlunoModelTest(TestCase):
    def test_criar_aluno(self):
        aluno = Aluno.objects.create(
            cpf='12345678901',
            nome='Jo�o Test',
            data_nascimento=date(1995, 5, 15),
            hora_nascimento=time(14, 30),
            email='joao@test.com',
            sexo='M',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Maria Test',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='M�e',
            nome_segundo_contato='Jos� Test',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='Pai',
            tipo_sanguineo='A',
            fator_rh='+'
        )
        self.assertEqual(aluno.nome, 'Jo�o Test')





## alunos\test_ui.py

python
from django.test import LiveServerTestCase
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from alunos.models import Aluno
from datetime import date, time

class AlunoUITest(LiveServerTestCase):
    def setUp(self):
        service = Service('chromedriver.exe')
        self.browser = webdriver.Chrome(service=service)
        
        # Create a test student
        self.aluno = Aluno.objects.create(
            cpf='12345678901',
            nome='Maria Test',
            data_nascimento=date(1995, 5, 15),
            hora_nascimento=time(14, 30),
            email='maria@test.com',
            sexo='F',
            nacionalidade='Brasileira',
            naturalidade='S�o Paulo',
            rua='Rua Test',
            numero_imovel='123',
            cidade='S�o Paulo',
            estado='SP',
            bairro='Centro',
            cep='01234567',
            nome_primeiro_contato='Jo�o Test',
            celular_primeiro_contato='11999999999',
            tipo_relacionamento_primeiro_contato='Pai',
            nome_segundo_contato='Ana Test',
            celular_segundo_contato='11988888888',
            tipo_relacionamento_segundo_contato='M�e',
            tipo_sanguineo='A',
            fator_rh='+'
        )

    def tearDown(self):
        self.browser.quit()

    def test_listar_alunos(self):
        # Access the student listing page
        self.browser.get(f'{self.live_server_url}/alunos/')
        
        # Check page title
        self.assertIn('Lista de Alunos', self.browser.title)
        
        # Check header
        header = self.browser.find_element(By.TAG_NAME, 'h1')
        self.assertEqual(header.text, 'Lista de Alunos')
        
        # Check if test student is listed
        student_element = self.browser.find_element(By.CLASS_NAME, 'aluno-nome')
        self.assertEqual(student_element.text, 'Maria Test')





## alunos\urls.py

python
from django.urls import path
from . import views

app_name = 'alunos'

urlpatterns = [
    path('', views.listar_alunos, name='listar'),
    path('buscar/', views.buscar_alunos, name='buscar'),
    path('cadastrar/', views.cadastrar_aluno, name='cadastrar'),
    path('editar/<str:cpf>/', views.editar_aluno, name='editar'),
    path('excluir/<str:cpf>/', views.excluir_aluno, name='excluir'),
    path('detalhes/<str:cpf>/', views.detalhar_aluno, name='detalhes'),
    path('exportar/', views.exportar_alunos, name='exportar'),
    path('importar/', views.importar_alunos, name='importar'),
    path('relatorio/', views.relatorio_alunos, name='relatorio'),
    path('dashboard/', views.dashboard, name='dashboard'),
]





## alunos\views.py

python
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator
from django.db.models import Q
from django.contrib import messages
from django.utils.translation import gettext as _
from django.http import HttpResponse
import csv
from io import StringIO
from importlib import import_module

# Importar modelos e formul�rios
Aluno = import_module('alunos.models').Aluno
AlunoForm = import_module('alunos.forms').AlunoForm
ImportForm = import_module('alunos.forms').ImportForm
# Obter o modelo Curso de onde estiver definido
Curso = import_module('cursos.models').Curso

@login_required
def listar_alunos(request):
    query = request.GET.get('q')
    curso_id = request.GET.get('curso')

    queryset = Aluno.objects.all()

    if query:
        queryset = queryset.filter(
            Q(nome__icontains=query) | 
            Q(cpf__icontains=query) | 
            Q(email__icontains=query)
        )

    if curso_id:
        queryset = queryset.filter(curso_id=curso_id)

    queryset = queryset.select_related('curso')

    paginator = Paginator(queryset, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    cursos = Curso.objects.all()

    return render(request, 'alunos/listar_alunos.html', {
        'page_obj': page_obj,
        'alunos': page_obj,
        'query': query,
        'cursos': cursos,
        'curso_selecionado': curso_id
    })

@login_required
def cadastrar_aluno(request):
    if request.method == 'POST':
        form = AlunoForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            messages.success(request, _('Aluno cadastrado com sucesso!'))
            return redirect('alunos:listar')
        else:
            messages.error(request, _('Erro ao cadastrar aluno. Verifique os dados.'))
    else:
        form = AlunoForm()
    return render(request, 'alunos/aluno_form.html', {'form': form})

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from django.utils.translation import gettext as _
from .models import Aluno
from .forms import AlunoForm
@login_required
def editar_aluno(request, cpf):
    aluno = get_object_or_404(Aluno, cpf=cpf)
    if request.method == 'POST':
        form = AlunoForm(request.POST, request.FILES, instance=aluno)
        if form.is_valid():
            form.save()
            messages.success(request, _('Dados do aluno atualizados com sucesso!'))
            return redirect('alunos:detalhes', cpf=aluno.cpf)
        else:
            messages.error(request, _('Erro ao atualizar dados do aluno. Por favor, verifique os dados.'))
    else:
        form = AlunoForm(instance=aluno)
    return render(request, 'alunos/editar_aluno.html', {'form': form, 'aluno': aluno})

@login_required
def detalhar_aluno(request, cpf):
    aluno = get_object_or_404(Aluno, cpf=cpf)
    return render(request, 'alunos/detalhar_aluno.html', {'aluno': aluno})

@login_required
def excluir_aluno(request, cpf):
    aluno = get_object_or_404(Aluno, cpf=cpf)
    if request.method == 'POST':
        if request.POST.get('confirmar') == 'sim':
            aluno.delete()
            messages.success(request, _('Aluno exclu�do com sucesso!'))
            return redirect('alunos:listar')
        else:
            messages.info(request, _('Exclus�o cancelada.'))
            return redirect('alunos:detalhes', cpf=cpf)
    return render(request, 'alunos/excluir_aluno.html', {'aluno': aluno})

@login_required
def buscar_alunos(request):
    query = request.GET.get('q', '')
    alunos = Aluno.objects.filter(
        Q(nome__icontains=query) |
        Q(cpf__icontains=query) |
        Q(email__icontains=query)
    ) if query else Aluno.objects.none()
    return render(request, 'alunos/buscar.html', {'alunos': alunos, 'query': query})

@login_required
def exportar_alunos(request):
    alunos = Aluno.objects.all()
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="alunos.csv"'

    writer = csv.writer(response)
    writer.writerow(['Nome', 'CPF', 'Email', 'Data de Nascimento'])

    for aluno in alunos:
        writer.writerow([aluno.nome, aluno.cpf, aluno.email, aluno.data_nascimento])
    return response

@login_required
def importar_alunos(request):
    if request.method == 'POST':
        form = ImportForm(request.POST, request.FILES)
        if form.is_valid():
            csv_file = request.FILES['file']
            decoded_file = csv_file.read().decode('utf-8')
            io_string = StringIO(decoded_file)
            next(io_string)  # Pular o cabe�alho
            for row in csv.reader(io_string, delimiter=','):
                _, created = Aluno.objects.update_or_create(
                    cpf=row[1],
                    defaults={
                        'nome': row[0],
                        'email': row[2],
                        'data_nascimento': row[3],
                    }
                )
            messages.success(request, _('Alunos importados com sucesso!'))
            return redirect('alunos:listar')
    else:
        form = ImportForm()
    return render(request, 'alunos/importar.html', {'form': form})

@login_required
def relatorio_alunos(request):
    alunos = Aluno.objects.all()
    total_alunos = alunos.count()
    # Remover refer�ncia a curso se n�o existir no modelo
    context = {
        'alunos': alunos,
        'total_alunos': total_alunos,
    }
    return render(request, 'alunos/relatorio.html', context)

@login_required
def dashboard(request):
    context = {
        'total_alunos': Aluno.objects.count(),
        'alunos_ativos': Aluno.objects.filter(status='A').count(),
        'alunos_recentes': Aluno.objects.order_by('-created_at')[:5],
    }
    
    try:
        Curso = apps.get_model('core', 'Curso')
        context['total_cursos'] = Curso.objects.count()
        
        # Dados para o gr�fico
        cursos = Curso.objects.all()
        context['cursos_labels'] = [curso.nome for curso in cursos]
        context['alunos_por_curso_data'] = [0] * len(cursos)  # Placeholder
    except:
        context['total_cursos'] = 0
        context['cursos_labels'] = []
        context['alunos_por_curso_data'] = []

    return render(request, 'alunos/dashboard.html', context)




## alunos\migrations\0001_initial.py

python
# Generated by Django 5.1.7 on 2025-03-26 11:49

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cursos', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('cpf', models.CharField(help_text='Digite apenas n�meros', max_length=11, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='CPF deve conter 11 d�gitos num�ricos', regex='^\\d{11}$')], verbose_name='CPF')),
                ('foto', models.ImageField(blank=True, null=True, upload_to='alunos/', verbose_name='Foto')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome completo')),
                ('data_nascimento', models.DateField(verbose_name='Data de nascimento')),
                ('hora_nascimento', models.TimeField(verbose_name='Hora de nascimento')),
                ('numero_iniciatico', models.CharField(blank=True, max_length=20, null=True, verbose_name='N�mero inici�tico')),
                ('nome_iniciatico', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome inici�tico')),
                ('data_iniciacao', models.DateField(blank=True, null=True, verbose_name='Data de inicia��o')),
                ('sexo', models.CharField(choices=[('M', 'Masculino'), ('F', 'Feminino'), ('O', 'Outro')], max_length=1, verbose_name='Sexo')),
                ('estado_civil', models.CharField(blank=True, choices=[('S', 'Solteiro(a)'), ('C', 'Casado(a)'), ('D', 'Divorciado(a)'), ('V', 'Vi�vo(a)'), ('U', 'Uni�o Est�vel')], default='S', max_length=1, null=True, verbose_name='Estado Civil')),
                ('profissao', models.CharField(blank=True, max_length=100, null=True, verbose_name='Profiss�o')),
                ('escolaridade', models.CharField(blank=True, choices=[('EF', 'Ensino Fundamental'), ('EM', 'Ensino M�dio'), ('ES', 'Ensino Superior'), ('PG', 'P�s-Gradua��o'), ('ME', 'Mestrado'), ('DO', 'Doutorado')], max_length=2, null=True, verbose_name='Escolaridade')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='E-mail')),
                ('telefone_fixo', models.CharField(blank=True, max_length=11, null=True, validators=[django.core.validators.RegexValidator(message='N�mero de telefone fixo inv�lido', regex='^\\d{10,11}$')], verbose_name='Telefone Fixo')),
                ('nacionalidade', models.CharField(max_length=50, verbose_name='Nacionalidade')),
                ('naturalidade', models.CharField(max_length=50, verbose_name='Naturalidade')),
                ('cep', models.CharField(max_length=8, validators=[django.core.validators.RegexValidator(message='CEP deve conter 8 d�gitos num�ricos', regex='^\\d{8}$')], verbose_name='CEP')),
                ('rua', models.CharField(max_length=100, verbose_name='Rua')),
                ('numero_imovel', models.CharField(max_length=10, verbose_name='N�mero')),
                ('complemento', models.CharField(blank=True, max_length=50, null=True, verbose_name='Complemento')),
                ('bairro', models.CharField(max_length=50, verbose_name='Bairro')),
                ('cidade', models.CharField(max_length=50, verbose_name='Cidade')),
                ('estado', models.CharField(max_length=2, verbose_name='Estado')),
                ('nome_primeiro_contato', models.CharField(max_length=100, verbose_name='Nome do primeiro contato')),
                ('celular_primeiro_contato', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator(message='N�mero de celular inv�lido', regex='^\\d{10,11}$')], verbose_name='Celular do primeiro contato')),
                ('tipo_relacionamento_primeiro_contato', models.CharField(max_length=50, verbose_name='Relacionamento do primeiro contato')),
                ('nome_segundo_contato', models.CharField(max_length=100, verbose_name='Nome do segundo contato')),
                ('celular_segundo_contato', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator(message='N�mero de celular inv�lido', regex='^\\d{10,11}$')], verbose_name='Celular do segundo contato')),
                ('tipo_relacionamento_segundo_contato', models.CharField(max_length=50, verbose_name='Relacionamento do segundo contato')),
                ('tipo_sanguineo', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('AB', 'AB'), ('O', 'O')], max_length=2, verbose_name='Tipo sangu�neo')),
                ('fator_rh', models.CharField(choices=[('+', 'Positivo'), ('-', 'Negativo')], max_length=1, verbose_name='Fator RH')),
                ('alergias', models.TextField(blank=True, null=True, verbose_name='Alergias')),
                ('condicoes_medicas_gerais', models.TextField(blank=True, null=True, verbose_name='Condi��es m�dicas')),
                ('convenio_medico', models.CharField(blank=True, max_length=100, null=True, verbose_name='Conv�nio m�dico')),
                ('hospital', models.CharField(blank=True, max_length=100, null=True, verbose_name='Hospital de prefer�ncia')),
                ('status', models.CharField(choices=[('A', 'Ativo'), ('I', 'Inativo'), ('S', 'Suspenso')], default='A', max_length=1, verbose_name='Status')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('curso', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alunos', to='cursos.curso', verbose_name='Curso')),
            ],
            options={
                'verbose_name': 'Aluno',
                'verbose_name_plural': 'Alunos',
                'ordering': ['nome'],
            },
        ),
    ]





## alunos\templates\alunos\aluno_form.html

html
{% extends 'base.html' %}

{% block content %}
<div class="container">
  <h1>Cadastrar Novo Aluno</h1>
  <form method="post" class="aluno-form">
    {% csrf_token %}
    {% if form.non_field_errors %}
      <div class="alert alert-danger">
        {% for error in form.non_field_errors %}
          {{ error }}
        {% endfor %}
      </div>
    {% endif %}
    {% for field in form %}
      <div class="form-group">
        {{ field.label_tag }}
        {{ field }}
        {% if field.errors %}
          <div class="alert alert-danger">
            {% for error in field.errors %}
              {{ error }}
            {% endfor %}
          </div>
        {% endif %}
        {% if field.help_text %}
          <small class="form-text text-muted">{{ field.help_text }}</small>
        {% endif %}
      </div>
    {% endfor %}
    <button type="submit" class="btn btn-primary">Cadastrar Aluno</button>
  </form>
</div>
{% endblock %}






## alunos\templates\alunos\dashboard.html

html
{% extends 'base.html' %}
{% load static %}

{% block content %}
<div class="container mt-4">
    <h1 class="mb-4">Dashboard de Alunos</h1>

    <div class="row">
        <!-- Cart�o de Total de Alunos -->
        <div class="col-md-3 mb-4">
            <div class="card text-white bg-primary">
                <div class="card-body">
                    <h5 class="card-title">Total de Alunos</h5>
                    <p class="card-text display-4">{{ total_alunos }}</p>
                </div>
            </div>
        </div>

        <!-- Cart�o de Alunos Ativos -->
        <div class="col-md-3 mb-4">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <h5 class="card-title">Alunos Ativos</h5>
                    <p class="card-text display-4">{{ alunos_ativos }}</p>
                </div>
            </div>
        </div>

        <!-- Cart�o de Alunos por Curso -->
        <div class="col-md-3 mb-4">
            <div class="card text-white bg-info">
                <div class="card-body">
                    <h5 class="card-title">Cursos</h5>
                    <p class="card-text display-4">{{ total_cursos }}</p>
                </div>
            </div>
        </div>

        <!-- Cart�o de Atividades Recentes -->
        <div class="col-md-3 mb-4">
            <div class="card text-white bg-warning">
                <div class="card-body">
                    <h5 class="card-title">Atividades Recentes</h5>
                    <p class="card-text display-4">{{ atividades_recentes }}</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <!-- Gr�fico de Alunos por Curso -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Alunos por Curso</h5>
                    <canvas id="alunosPorCursoChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Lista de Alunos Recentes -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Alunos Recentemente Adicionados</h5>
                    <ul class="list-group">
                        {% for aluno in alunos_recentes %}
                            <li class="list-group-item">
                                {{ aluno.nome }}
                                <a href="{% url 'alunos:detalhes' aluno.cpf %}" class="btn btn-sm btn-info float-right">Detalhes</a>
                            </li>
                        {% empty %}
                            <li class="list-group-item">Nenhum aluno recente.</li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <!-- A��es R�pidas -->
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">A��es R�pidas</h5>
                    <a href="{% url 'alunos:cadastrar' %}" class="btn btn-primary mr-2">Cadastrar Novo Aluno</a>
                    <a href="{% url 'alunos:listar' %}" class="btn btn-secondary mr-2">Listar Todos os Alunos</a>
                    <a href="{% url 'alunos:exportar' %}" class="btn btn-success mr-2">Exportar Dados</a>
                    <a href="{% url 'alunos:importar' %}" class="btn btn-info">Importar Dados</a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    var ctx = document.getElementById('alunosPorCursoChart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: JSON.parse('{{ cursos_labels|safe }}'),
            datasets: [{
                label: 'N�mero de Alunos',
                data: JSON.parse('{{ alunos_por_curso_data|safe }}'),
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
});
</script>
{% endblock %}





## alunos\templates\alunos\detalhar_aluno.html

html
{% extends 'base.html' %}

{% block title %}Detalhes do Aluno - {{ aluno.nome }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2>Detalhes do Aluno</h2>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    {% if aluno.foto %}
                        <img src="{{ aluno.foto.url }}" alt="Foto de {{ aluno.nome }}" class="img-fluid rounded">
                    {% else %}
                        <div class="text-center p-5 bg-light rounded">
                            <i class="fas fa-user fa-5x text-secondary"></i>
                            <p class="mt-2">Sem foto</p>
                        </div>
                    {% endif %}
                </div>
                <div class="col-md-8">
                    <h3>{{ aluno.nome }}</h3>
                    <p><strong>CPF:</strong> {{ aluno.cpf }}</p>
                    <p><strong>Data de Nascimento:</strong> {{ aluno.data_nascimento }}</p>
                    <p><strong>Idade:</strong> {{ aluno.idade }} anos</p>
                    <p><strong>Email:</strong> {{ aluno.email }}</p>
                    <p><strong>Sexo:</strong> {{ aluno.get_sexo_display }}</p>
                    <p><strong>Status:</strong> {{ aluno.get_status_display }}</p>
                </div>
            </div>

            <div class="mt-4">
                <h4>Informa��es Pessoais</h4>
                <hr>
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Nacionalidade:</strong> {{ aluno.nacionalidade }}</p>
                        <p><strong>Naturalidade:</strong> {{ aluno.naturalidade }}</p>
                        <p><strong>Estado Civil:</strong> {{ aluno.get_estado_civil_display }}</p>
                        <p><strong>Profiss�o:</strong> {{ aluno.profissao|default:"N�o informado" }}</p>
                        <p><strong>Escolaridade:</strong> {{ aluno.get_escolaridade_display|default:"N�o informado" }}</p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Tipo Sangu�neo:</strong> {{ aluno.tipo_sanguineo }} {{ aluno.fator_rh }}</p>
                        <p><strong>Alergias:</strong> {{ aluno.alergias|default:"Nenhuma informada" }}</p>
                        <p><strong>Condi��es M�dicas:</strong> {{ aluno.condicoes_medicas_gerais|default:"Nenhuma informada" }}</p>
                        <p><strong>Conv�nio M�dico:</strong> {{ aluno.convenio_medico|default:"N�o informado" }}</p>
                        <p><strong>Hospital de Prefer�ncia:</strong> {{ aluno.hospital|default:"N�o informado" }}</p>
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <h4>Endere�o</h4>
                <hr>
                <p>{{ aluno.rua }}, {{ aluno.numero_imovel }}{% if aluno.complemento %}, {{ aluno.complemento }}{% endif %}</p>
                <p>{{ aluno.bairro }}, {{ aluno.cidade }} - {{ aluno.estado }}</p>
                <p>CEP: {{ aluno.cep }}</p>
            </div>

            <div class="mt-4">
                <h4>Contatos de Emerg�ncia</h4>
                <hr>
                <div class="row">
                    <div class="col-md-6">
                        <h5>Contato Principal</h5>
                        <p><strong>Nome:</strong> {{ aluno.nome_primeiro_contato }}</p>
                        <p><strong>Telefone:</strong> {{ aluno.celular_primeiro_contato }}</p>
                        <p><strong>Rela��o:</strong> {{ aluno.tipo_relacionamento_primeiro_contato }}</p>
                    </div>
                    <div class="col-md-6">
                        <h5>Contato Secund�rio</h5>
                        <p><strong>Nome:</strong> {{ aluno.nome_segundo_contato }}</p>
                        <p><strong>Telefone:</strong> {{ aluno.celular_segundo_contato }}</p>
                        <p><strong>Rela��o:</strong> {{ aluno.tipo_relacionamento_segundo_contato }}</p>
                    </div>
                </div>
            </div>

            {% if aluno.data_iniciacao %}
            <div class="mt-4">
                <h4>Informa��es Inici�ticas</h4>
                <hr>
                <p><strong>Data de Inicia��o:</strong> {{ aluno.data_iniciacao }}</p>
                <p><strong>Tempo desde a Inicia��o:</strong> {{ aluno.tempo_desde_iniciacao }} dias</p>
                {% if aluno.numero_iniciatico %}
                    <p><strong>N�mero Inici�tico:</strong> {{ aluno.numero_iniciatico }}</p>
                {% endif %}
                {% if aluno.nome_iniciatico %}
                    <p><strong>Nome Inici�tico:</strong> {{ aluno.nome_iniciatico }}</p>
                {% endif %}
            </div>
            {% endif %}
        </div>
        <div class="card-footer">
            <div class="btn-group">
                <a href="{% url 'alunos:editar' aluno.cpf %}" class="btn btn-primary">Editar</a>
                <a href="{% url 'alunos:excluir' aluno.cpf %}" class="btn btn-danger">Excluir</a>
                <a href="{% url 'alunos:listar' %}" class="btn btn-secondary">Voltar</a>
            </div>
            <small class="text-muted float-right">
                Cadastrado em: {{ aluno.created_at|date:"d/m/Y H:i" }} | 
                �ltima atualiza��o: {{ aluno.updated_at|date:"d/m/Y H:i" }}
            </small>
        </div>
    </div>
</div>
{% endblock %}





## alunos\templates\alunos\editar_aluno.html

html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block title %}Editar Aluno - {{ aluno.nome }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Editar Aluno</h1>
    
    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        
        <div class="row">
            <div class="col-md-6">
                <h3>Informa��es Pessoais</h3>
                {{ form.nome|crispy }}
                {{ form.cpf|crispy }}
                {{ form.data_nascimento|crispy }}
                {{ form.sexo|crispy }}
                {{ form.email|crispy }}
                {{ form.telefone_fixo|crispy }}
            </div>
            <div class="col-md-6">
                <h3>Endere�o</h3>
                {{ form.cep|crispy }}
                {{ form.rua|crispy }}
                {{ form.numero_imovel|crispy }}
                {{ form.complemento|crispy }}
                {{ form.bairro|crispy }}
                {{ form.cidade|crispy }}
                {{ form.estado|crispy }}
            </div>
        </div>
        
        <div class="row mt-4">
            <div class="col-md-6">
                <h3>Informa��es Acad�micas</h3>
                {{ form.curso|crispy }}
                {{ form.numero_iniciatico|crispy }}
                {{ form.nome_iniciatico|crispy }}
                {{ form.data_iniciacao|crispy }}
            </div>
            <div class="col-md-6">
                <h3>Informa��es M�dicas</h3>
                {{ form.tipo_sanguineo|crispy }}
                {{ form.fator_rh|crispy }}
                {{ form.alergias|crispy }}
                {{ form.condicoes_medicas_gerais|crispy }}
            </div>
        </div>
        
        <div class="row mt-4">
            <div class="col-md-6">
                <h3>Contato de Emerg�ncia 1</h3>
                {{ form.nome_primeiro_contato|crispy }}
                {{ form.celular_primeiro_contato|crispy }}
                {{ form.tipo_relacionamento_primeiro_contato|crispy }}
            </div>
            <div class="col-md-6">
                <h3>Contato de Emerg�ncia 2</h3>
                {{ form.nome_segundo_contato|crispy }}
                {{ form.celular_segundo_contato|crispy }}
                {{ form.tipo_relacionamento_segundo_contato|crispy }}
            </div>
        </div>
        
        <div class="row mt-4">
            <div class="col-md-12">
                <h3>Foto</h3>
                {{ form.foto|crispy }}
            </div>
        </div>
        
        <div class="mt-4">
            <button type="submit" class="btn btn-primary">Salvar Altera��es</button>
            <a href="{% url 'alunos:detalhes' aluno.cpf %}" class="btn btn-secondary">Cancelar</a>
        </div>
    </form>
</div>
{% endblock %}




## alunos\templates\alunos\excluir_aluno.html

html
{% extends 'base.html' %}

{% block title %}Excluir Aluno - {{ aluno.nome }}{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-danger text-white">
            <h2>Confirmar Exclus�o</h2>
        </div>
        <div class="card-body">
            <div class="alert alert-warning">
                <h4 class="alert-heading">Aten��o!</h4>
                <p>Voc� est� prestes a excluir o aluno <strong>{{ aluno.nome }}</strong> (CPF: {{ aluno.cpf }}).</p>
                <p>Esta a��o n�o pode ser desfeita. Todos os dados deste aluno ser�o permanentemente removidos do sistema.</p>
            </div>
            
            <form method="post">
                {% csrf_token %}
                <div class="form-group">
                    <label>
                        <input type="checkbox" name="confirmar" value="sim" required> 
                        Eu confirmo que desejo excluir este aluno
                    </label>
                </div>
                <div class="btn-group">
                    <button type="submit" class="btn btn-danger">Excluir Aluno</button>
                    <a href="{% url 'alunos:detalhes' aluno.cpf %}" class="btn btn-secondary">Cancelar</a>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}





## alunos\templates\alunos\listar_alunos.html

html
{% extends 'base.html' %}
{% load i18n %}

{% block content %}
<div class="container mt-4">
    <h1>{% trans "Lista de Alunos" %}</h1>

    {% if messages %}
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}
    <div class="row mb-3">
        <div class="col-md-8">
            <form method="get" class="form-inline">
                <div class="input-group">
                    <input type="text" name="q" class="form-control" placeholder="{% trans 'Buscar por nome, CPF ou email' %}" value="{{ request.GET.q }}">
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="submit">{% trans "Buscar" %}</button>
                    </div>
                </div>
            </form>
        </div>
        <div class="col-md-4">
            <a href="{% url 'alunos:cadastrar' %}" class="btn btn-primary mb-3">
                <i class="fas fa-plus"></i> {% trans "Novo Aluno" %}
            </a>
        </div>
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nome</th>
                <th>CPF</th>
                <th>Email</th>
                <th>Curso</th>
                <th>Status</th>
                <th>A��es</th>
            </tr>
        </thead>
        <tbody>
            {% for aluno in page_obj %}
            <tr>
                <td class="aluno-nome">{{ aluno.nome }}</td>
                <td>{{ aluno.cpf }}</td>
                <td>{{ aluno.email }}</td>
                <td>{{ aluno.curso.nome }}</td>
                <td>
                    {% if aluno.status == 'A' %}
                        <span class="badge badge-success">Ativo</span>
                    {% elif aluno.status == 'I' %}
                        <span class="badge badge-secondary">Inativo</span>
                    {% elif aluno.status == 'S' %}
                        <span class="badge badge-warning">Suspenso</span>
                    {% endif %}
                </td>
                <td>
                    <div class="btn-group">
                        <a href="{% url 'alunos:detalhes' aluno.cpf %}" class="btn btn-sm btn-info">Detalhes</a>
                        <a href="{% url 'alunos:editar' aluno.cpf %}" class="btn btn-sm btn-primary">Editar</a>
                        <a href="{% url 'alunos:excluir' aluno.cpf %}" class="btn btn-sm btn-danger">Excluir</a>
                    </div>
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="6" class="text-center">Nenhum aluno encontrado.</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    
    {% if page_obj.has_other_pages %}
    <nav aria-label="Pagina��o">
        <ul class="pagination">
            {% if page_obj.has_previous %}
                <li class="page-item"><a class="page-link" href="?page=1">� Primeira</a></li>
                <li class="page-item"><a class="page-link" href="?page={{ page_obj.previous_page_number }}">Anterior</a></li>
            {% endif %}

            {% for num in page_obj.paginator.page_range %}
                {% if page_obj.number == num %}
                    <li class="page-item active"><span class="page-link">{{ num }}</span></li>
                {% else %}
                    <li class="page-item"><a class="page-link" href="?page={{ num }}">{{ num }}</a></li>
                {% endif %}
            {% endfor %}

            {% if page_obj.has_next %}
                <li class="page-item"><a class="page-link" href="?page={{ page_obj.next_page_number }}">Pr�xima</a></li>
                <li class="page-item"><a class="page-link" href="?page={{ page_obj.paginator.num_pages }}">�ltima �</a></li>
            {% endif %}
        </ul>
    </nav>
    {% endif %}
{% endblock %}





## alunos\templates\alunos\registro.html

html
{% extends 'base.html' %}

{% block content %}
<h2>Registro</h2>

<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Registrar</button>
</form>

<a href="javascript:history.back()" class="back-button">Voltar</a>

<style>
    .back-button {
        margin-top: 20px;
        display: inline-block;
        padding: 10px 20px;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        text-decoration: none;
        color: #333;
        border-radius: 5px;
    }
</style>
{% endblock %}





## alunos\tests\test_ui.py

python
from django.test import LiveServerTestCase
from django.urls import reverse
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager

class AlunoUITest(LiveServerTestCase):
    def setUp(self):
        options = Options()
        options.add_argument('--headless')  # Run in headless mode for CI environments
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        
        try:
            self.browser = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()),
                options=options
            )
        except Exception as e:
            print(f"Could not initialize Chrome driver: {e}")
            self.skipTest("Webdriver not available")
            
    def tearDown(self):
        if hasattr(self, 'browser'):
            self.browser.quit()

    def test_listar_alunos(self):
        self.browser.get(self.live_server_url + reverse('alunos:listar'))
        self.assertIn('Lista de Alunos', self.browser.title)

    def test_criar_aluno(self):
        self.browser.get(self.live_server_url + reverse('alunos:cadastrar'))
        self.assertIn('Cadastrar Novo Aluno', self.browser.page_source)
        
        # Fill form and submit
        self.browser.find_element(By.NAME, 'nome').send_keys('Jo�o Test')
        self.browser.find_element(By.NAME, 'cpf').send_keys('98765432100')
        # Add other form fields...
        
        self.browser.find_element(By.CSS_SELECTOR, 'button[type="submit"]').click()
        
        # Verify success        self.assertIn('Aluno criado com sucesso', self.browser.page_source)        self.assertIn('Lista de Alunos', self.browser.title)


