#!/usr/bin/env python
"""
Script para testar se o bot√£o 'Adicionar Outro Registro' est√° funcionando corretamente
no formul√°rio de alunos ap√≥s as corre√ß√µes implementadas.
"""

import os
import django
from django.test import Client
from django.contrib.auth.models import User
from django.urls import reverse

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'omaum.settings')
django.setup()

from alunos.models import Aluno

def test_formset_functionality():
    """Testa se o formset est√° funcionando corretamente"""
    print("=== TESTE DE FUNCIONALIDADE DO BOT√ÉO HIST√ìRICO ===")
    
    # Criar cliente de teste
    client = Client()
    
    # Verificar se existe usu√°rio admin
    try:
        user = User.objects.get(username='admin')
        print(f"‚úì Usu√°rio admin encontrado: {user.username}")
    except User.DoesNotExist:
        print("‚ö† Usu√°rio admin n√£o encontrado. Criando...")
        user = User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
        print(f"‚úì Usu√°rio admin criado: {user.username}")
    
    # Fazer login
    login_success = client.login(username='admin', password='admin123')
    print(f"‚úì Login realizado: {login_success}")
    
    # Verificar se existe aluno para editar
    try:
        aluno = Aluno.objects.first()
        if aluno:
            print(f"‚úì Aluno encontrado: {aluno.nome} (CPF: {aluno.cpf})")
            url = reverse('alunos:editar_aluno', kwargs={'cpf': aluno.cpf})
        else:
            print("‚ö† Nenhum aluno encontrado. Testando formul√°rio de novo aluno...")
            url = reverse('alunos:novo_aluno')
    except Exception as e:
        print(f"‚ö† Erro ao buscar aluno: {e}")
        url = reverse('alunos:novo_aluno')
    
    # Fazer requisi√ß√£o GET para o formul√°rio
    response = client.get(url)
    print(f"‚úì Resposta GET: {response.status_code}")
    
    if response.status_code == 200:
        content = response.content.decode('utf-8')
        
        # Verificar elementos cr√≠ticos
        checks = [
            ('Management form presente', 'historico-TOTAL_FORMS' in content),
            ('Bot√£o adicionar presente', 'id="add-historico-form"' in content),
            ('Template vazio presente', 'id="empty-historico-form"' in content),
            ('JavaScript presente', 'addNewForm' in content),
            ('Event listeners presentes', 'addEventListener' in content),
        ]
        
        print("\n=== VERIFICA√á√ïES DO TEMPLATE ===")
        for check_name, check_result in checks:
            status = "‚úì" if check_result else "‚úó"
            print(f"{status} {check_name}: {check_result}")
        
        # Verificar se n√£o h√° duplica√ß√µes
        total_forms_count = content.count('historico-TOTAL_FORMS')
        add_button_count = content.count('id="add-historico-form"')
        
        print("\n=== VERIFICA√á√ÉO DE DUPLICA√á√ïES ===")
        print(f"‚úì Management forms encontrados: {total_forms_count}")
        print(f"‚úì Bot√µes 'adicionar' encontrados: {add_button_count}")
        
        if total_forms_count == 1 and add_button_count == 1:
            print("‚úì Sem duplica√ß√µes detectadas!")
        else:
            print("‚ö† Poss√≠vel duplica√ß√£o detectada!")
        
        return True
    else:
        print(f"‚úó Erro na requisi√ß√£o: {response.status_code}")
        return False

def main():
    """Fun√ß√£o principal"""
    try:
        success = test_formset_functionality()
        if success:
            print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
            print("üåê Para testar no navegador, acesse:")
            print("   http://localhost:8000/alunos/")
            print("   Fa√ßa login e clique em 'Editar' em um aluno")
            print("   Teste o bot√£o 'Adicionar Outro Registro' na se√ß√£o 'Dados Inici√°ticos'")
        else:
            print("\n‚ùå TESTE FALHOU!")
    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
