

File: .\cursos\admin.py
```py
from django.contrib import admin
from .models import Curso

@admin.register(Curso)
class CursoAdmin(admin.ModelAdmin):
    list_display = ('nome', 'duracao', 'descricao')  # Make sure 'duracao' is included only if it exists in the model
    search_fields = ('nome',)

```


File: .\cursos\apps.py
```py
from django.apps import AppConfig


class CursosConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cursos'

```


File: .\cursos\forms.py
```py
from django import forms
from .models import Curso
from django.core.exceptions import ValidationError

class CursoForm(forms.ModelForm):
    class Meta:
        model = Curso
        fields = ['codigo_curso', 'nome', 'descricao']

    def clean_codigo_curso(self):
        codigo = self.cleaned_data.get('codigo_curso')
        if len(codigo) != 5:
            raise ValidationError("O código do curso deve ter exatamente 5 caracteres.")
        return codigo

    def clean_nome(self):
        nome = self.cleaned_data.get('nome')
        if len(nome) < 3:
            raise ValidationError("O nome do curso deve ter pelo menos 3 caracteres.")
        return nome
```


File: .\cursos\models.py
```py
from django.db import models

class Curso(models.Model):
    nome = models.CharField(max_length=100)
    descricao = models.TextField()
    duracao = models.PositiveIntegerField(verbose_name="Duração (meses)", null=True, blank=True)  # Add this line

    def __str__(self):
        return self.nome

    class Meta:
        verbose_name = "Curso"
        verbose_name_plural = "Cursos"

```


File: .\cursos\tests.py
```py
from django.test import TestCase

# Create your tests here.

```


File: .\cursos\urls.py
```py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.CursoListView.as_view(), name='curso_list'),
    path('novo/', views.CursoCreateView.as_view(), name='curso_create'),
    path('<str:pk>/editar/', views.CursoUpdateView.as_view(), name='curso_update'),
    path('<str:pk>/excluir/', views.CursoDeleteView.as_view(), name='curso_delete'),
]
```


File: .\cursos\views.py
```py
from django import forms
from .models import Curso

class CursoForm(forms.ModelForm):
    class Meta:
        model = Curso
        fields = ['nome', 'codigo', 'descricao']  # Add or remove fields as needed
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from .models import Curso
from .forms import CursoForm

def criar_curso(request):
    if request.method == 'POST':
        form = CursoForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Curso criado com sucesso!')
            return redirect('listar_cursos')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = CursoForm()
    return render(request, 'cursos/criar_curso.html', {'form': form})

def editar_curso(request, id):
    curso = get_object_or_404(Curso, id=id)
    if request.method == 'POST':
        form = CursoForm(request.POST, instance=curso)
        if form.is_valid():
            form.save()
            messages.success(request, 'Curso atualizado com sucesso!')
            return redirect('listar_cursos')
        else:
            messages.error(request, 'Por favor, corrija os erros abaixo.')
    else:
        form = CursoForm(instance=curso)
    return render(request, 'cursos/editar_curso.html', {'form': form, 'curso': curso})
```


File: .\cursos\__init__.py
```py

```


File: .\cursos\migrations\0001_initial.py
```py
# Generated by Django 5.1.7 on 2025-03-16 21:44

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Curso',
            fields=[
                ('codigo_curso', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('nome', models.CharField(max_length=100)),
                ('descricao', models.TextField()),
            ],
            options={
                'verbose_name': 'Curso',
                'verbose_name_plural': 'Cursos',
            },
        ),
    ]

```


File: .\cursos\migrations\0002_remove_curso_codigo_curso_remove_curso_descricao_and_more.py
```py
# Generated by Django 5.1.7 on 2025-03-16 23:44

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cursos', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='curso',
            name='codigo_curso',
        ),
        migrations.RemoveField(
            model_name='curso',
            name='descricao',
        ),
        migrations.AddField(
            model_name='curso',
            name='id',
            field=models.BigAutoField(auto_created=True, default=1, primary_key=True, serialize=False, verbose_name='ID'),
            preserve_default=False,
        ),
    ]

```


File: .\cursos\migrations\0003_curso_descricao_curso_duracao.py
```py
# Generated by Django 5.1.7 on 2025-03-17 03:58

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cursos', '0002_remove_curso_codigo_curso_remove_curso_descricao_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='curso',
            name='descricao',
            field=models.TextField(default=1),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='curso',
            name='duracao',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Duração (meses)'),
        ),
    ]

```


File: .\cursos\migrations\__init__.py
```py

```


File: .\cursos\templates\editar_curso.html
```html

```


File: .\cursos\templates\cursos\criar_curso.html
```html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Criar Novo Curso</h1>
    <form method="post">
        {% csrf_token %}
        {% include 'includes/form_errors.html' %}
        {% for field in form %}
            {% include 'includes/form_field.html' %}
        {% endfor %}
        <button type="submit" class="btn btn-primary">Criar Curso</button>
        <a href="{% url 'listar_cursos' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}
```


File: .\cursos\templates\cursos\curso_form.html
```html
{% extends 'base.html' %}

{% block content %}
  <h1>Criar Curso</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Criar</button>
  </form>
{% endblock %}
```


File: .\cursos\templates\cursos\curso_list.html
```html
{% extends 'base.html' %}

{% block content %}
  <h1>Cursos</h1>
  {% for curso in cursos %}
    <ul>
      <li>{{ curso.nome }} ({{ curso.descricao }})</li>
    </ul>
  {% endfor %}
{% endblock %}
```


File: .\cursos\templates\cursos\detalhes_curso.html
```html
{% extends 'base.html' %}

{% block content %}
<!-- Existing content -->

<a href="javascript:history.back()" class="back-button">Voltar</a>
{% endblock %}

```


File: .\cursos\templates\cursos\editar_curso.html
```html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Editar Curso</h1>
    <form method="post">
        {% csrf_token %}
        {% include 'includes/form_errors.html' %}
        {% for field in form %}
            {% include 'includes/form_field.html' %}
        {% endfor %}
        <button type="submit" class="btn btn-primary">Atualizar Curso</button>
        <a href="{% url 'listar_cursos' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}
```
