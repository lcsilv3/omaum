

File: .\atividades\admin.py
```py
from django.contrib import admin
from .models import AtividadeAcademica, AtividadeRitualistica

@admin.register(AtividadeAcademica)
class AtividadeAcademicaAdmin(admin.ModelAdmin):
    list_display = ['nome']  # Ajuste conforme os campos do seu modelo

@admin.register(AtividadeRitualistica)
class AtividadeRitualisticaAdmin(admin.ModelAdmin):
    list_display = ['nome']  # Ajuste conforme os campos do seu modelo

```


File: .\atividades\apps.py
```py
from django.apps import AppConfig


class AtividadesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'atividades'

```


File: .\atividades\forms.py
```py
from django import forms
from django.core.exceptions import ValidationError
from .models import AtividadeAcademica, AtividadeRitualistica
import datetime

class AtividadeAcademicaForm(forms.ModelForm):
    class Meta:
        model = AtividadeAcademica
        fields = ('nome', 'descricao', 'data_inicio', 'data_fim', 'turma')
    widgets = {
        'data_inicio': forms.DateInput(attrs={'type': 'date'}),
        'data_fim': forms.DateInput(attrs={'type': 'date'}),
    }

    def clean_data_inicio(self):
        data_inicio = self.cleaned_data.get('data_inicio')
        if data_inicio and data_inicio < datetime.date.today():
            raise ValidationError("A data de início da atividade não pode ser no passado.")
        return data_inicio

    def clean(self):
        cleaned_data = super().clean()
        data_inicio = cleaned_data.get('data_inicio')
        data_fim = cleaned_data.get('data_fim')
        if data_inicio and data_fim and data_fim < data_inicio:
            raise ValidationError("A data de fim não pode ser anterior à data de início.")
        return cleaned_data

class AtividadeRitualisticaForm(forms.ModelForm):
    class Meta:
        model = AtividadeRitualistica
        fields = ('nome', 'descricao', 'data_inicio', 'data_fim', 'turma', 'alunos', 'todos_alunos')
        widgets = {
            'data_inicio': forms.DateInput(attrs={'type': 'date'}),
            'data_fim': forms.DateInput(attrs={'type': 'date'}),
            'alunos': forms.CheckboxSelectMultiple(),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['alunos'].required = False

    def clean(self):
        cleaned_data = super().clean()
        data_inicio = cleaned_data.get('data_inicio')
        data_fim = cleaned_data.get('data_fim')
        todos_alunos = cleaned_data.get('todos_alunos')
        alunos = cleaned_data.get('alunos')
        if data_inicio and data_fim and data_fim < data_inicio:
            raise ValidationError("A data de fim não pode ser anterior à data de início.")

        if not todos_alunos and not alunos:
            raise ValidationError("Selecione alunos específicos ou marque 'Todos os Alunos'.")

        if todos_alunos and alunos:
            raise ValidationError("Você não pode selecionar alunos específicos quando 'Todos os Alunos' está marcado.")
        return cleaned_data
```


File: .\atividades\models.py
```py
from django.db import models
from turmas.models import Turma
from alunos.models import Aluno

class AtividadeAcademica(models.Model):
    nome = models.CharField(max_length=255, verbose_name="Nome")
    descricao = models.TextField(verbose_name="Descrição")
    turma = models.ForeignKey(Turma, on_delete=models.CASCADE, verbose_name="Turma")
    data_inicio = models.DateField(verbose_name="Data de Início")
    data_fim = models.DateField(verbose_name="Data de Fim")

    def __str__(self):
        return self.nome

    class Meta:
        verbose_name = "Atividade Acadêmica"
        verbose_name_plural = "Atividades Acadêmicas"
from django.db import models
from turmas.models import Turma
from alunos.models import Aluno
class AtividadeRitualistica(models.Model):
    nome = models.CharField(max_length=255, verbose_name="Nome")
    descricao = models.TextField(verbose_name="Descrição")
    turma = models.ForeignKey(Turma, on_delete=models.CASCADE, verbose_name="Turma")
    data_inicio = models.DateField(verbose_name="Data de Início")
    data_fim = models.DateField(verbose_name="Data de Fim")
    alunos = models.ManyToManyField(Aluno, blank=True, verbose_name="Alunos")
    todos_alunos = models.BooleanField(default=False, verbose_name="Todos os Alunos")

    def __str__(self):
        return self.nome

    class Meta:
        verbose_name = "Atividade Ritualística"
        verbose_name_plural = "Atividades Ritualísticas"

```


File: .\atividades\tests.py
```py
from django.test import TestCase

# Create your tests here.

```


File: .\atividades\urls.py
```py
from django.urls import path
from . import views

app_name = 'atividades'

urlpatterns = [
    path('academicas/', views.AtividadeAcademicaListView.as_view(), name='atividade_academica_list'),
    # ... other paths ...
]
```


File: .\atividades\views.py
```py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from .models import AtividadeRitualistica
from .forms import AtividadeRitualisticaForm

def criar_atividade_ritualistica(request):
    if request.method == 'POST':
        form = AtividadeRitualisticaForm(request.POST)
        if form.is_valid():
            atividade = form.save(commit=False)
            if atividade.todos_alunos:
                atividade.save()
                atividade.alunos.set(atividade.turma.aluno_set.all())
            else:
                atividade.save()
                atividade.alunos.set(form.cleaned_data['alunos'])
            messages.success(request, 'Atividade ritualística criada com sucesso!')
            return redirect('atividades:atividade_ritualistica_list')
    else:
        form = AtividadeRitualisticaForm()
    return render(request, 'atividades/criar_atividade_ritualistica.html', {'form': form})

def editar_atividade_ritualistica(request, pk):
    atividade = get_object_or_404(AtividadeRitualistica, pk=pk)
    if request.method == 'POST':
        form = AtividadeRitualisticaForm(request.POST, instance=atividade)
        if form.is_valid():
            atividade = form.save(commit=False)
            if atividade.todos_alunos:
                atividade.save()
                atividade.alunos.set(atividade.turma.aluno_set.all())
            else:
                atividade.save()
                atividade.alunos.set(form.cleaned_data['alunos'])
            messages.success(request, 'Atividade ritualística atualizada com sucesso!')
            return redirect('atividades:atividade_ritualistica_list')
    else:
        form = AtividadeRitualisticaForm(instance=atividade)
    return render(request, 'atividades/editar_atividade_ritualistica.html', {'form': form, 'atividade': atividade})
from django.views.generic import ListView
from .models import AtividadeAcademica
from django.db.models import Q

class AtividadeAcademicaListView(ListView):
    model = AtividadeAcademica
    template_name = 'atividades/atividade_academica_list.html'
    context_object_name = 'atividades_academicas'
    paginate_by = 10  # Adjust this number as needed

    def get_queryset(self):
        queryset = super().get_queryset()
        search_query = self.request.GET.get('search')
        if search_query:
            queryset = queryset.filter(
                Q(nome__icontains=search_query) |
                Q(descricao__icontains=search_query) |
                Q(turma__nome__icontains=search_query)
            )
        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['search_query'] = self.request.GET.get('search', '')
        return context

class AtividadeRitualisticaListView(ListView):
    model = AtividadeRitualistica
    template_name = 'atividades/listar_atividades_ritualisticas.html'
    context_object_name = 'object_list'

```


File: .\atividades\__init__.py
```py

```


File: .\atividades\migrations\0001_initial.py
```py
# Generated by Django 5.1.7 on 2025-03-16 23:44

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '__first__'),
        ('turmas', '0002_curso_alter_turma_options_remove_turma_alunos_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AtividadeAcademica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, verbose_name='Nome')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('data_inicio', models.DateField(verbose_name='Data de Início')),
                ('data_fim', models.DateField(verbose_name='Data de Fim')),
                ('turma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turmas.turma', verbose_name='Turma')),
            ],
            options={
                'verbose_name': 'Atividade Acadêmica',
                'verbose_name_plural': 'Atividades Acadêmicas',
            },
        ),
        migrations.CreateModel(
            name='AtividadeRitualistica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, verbose_name='Nome')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('data_inicio', models.DateField(verbose_name='Data de Início')),
                ('data_fim', models.DateField(verbose_name='Data de Fim')),
                ('alunos', models.ManyToManyField(blank=True, related_name='atividades_ritualisticas', to='core.aluno', verbose_name='Alunos')),
                ('turma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turmas.turma', verbose_name='Turma')),
            ],
            options={
                'verbose_name': 'Atividade Ritualística',
                'verbose_name_plural': 'Atividades Ritualísticas',
            },
        ),
    ]

```


File: .\atividades\migrations\__init__.py
```py

```


File: .\atividades\templates\atividades\atividade_academica_confirm_delete.html
```html
{% extends 'base.html' %}

{% block title %}Excluir Atividade Acadêmica{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">Excluir Atividade Acadêmica</h4>
                </div>
                <div class="card-body">
                    <p>Você tem certeza que deseja excluir a atividade acadêmica "{{ object.nome }}"?</p>
                    <form method="post">
                        {% csrf_token %}
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-danger">Confirmar Exclusão</button>
                            <a href="{% url 'atividades:atividade_academica_list' %}" class="btn btn-secondary">Cancelar</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

```


File: .\atividades\templates\atividades\atividade_academica_detail.html
```html
{% extends 'base.html' %}

{% block title %}{{ atividade.nome }} - Detalhes{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <h1 class="card-title">{{ atividade.nome }}</h1>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Descrição:</dt>
                <dd class="col-sm-9">{{ atividade.descricao }}</dd>

                <dt class="col-sm-3">Turma:</dt>
                <dd class="col-sm-9">{{ atividade.turma }}</dd>

                <dt class="col-sm-3">Data de Início:</dt>
                <dd class="col-sm-9">{{ atividade.data_inicio|date:"d/m/Y" }}</dd>

                <dt class="col-sm-3">Data de Fim:</dt>
                <dd class="col-sm-9">{{ atividade.data_fim|date:"d/m/Y" }}</dd>
            </dl>
        </div>
        <div class="card-footer">
            <a href="{% url 'atividades:atividade_academica_update' atividade.pk %}" class="btn btn-primary">Editar</a>
            <a href="{% url 'atividades:atividade_academica_delete' atividade.pk %}" class="btn btn-danger">Excluir</a>
            <a href="{% url 'atividades:atividade_academica_list' %}" class="btn btn-secondary">Voltar para a lista</a>
        </div>
    </div>
</div>
{% endblock %}


```


File: .\atividades\templates\atividades\atividade_academica_form.html
```html
{% extends 'base.html' %}

{% block title %}{% if form.instance.pk %}Editar{% else %}Criar{% endif %} Atividade Acadêmica{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>{% if form.instance.pk %}Editar{% else %}Criar{% endif %} Atividade Acadêmica</h1>
    <form method="post">
        {% csrf_token %}
        {% for field in form %}
            <div class="form-group">
                {{ field.label_tag }}
                {{ field }}
                {% if field.help_text %}
                    <small class="form-text text-muted">{{ field.help_text }}</small>
                {% endif %}
                {% for error in field.errors %}
                    <div class="alert alert-danger">{{ error }}</div>
                {% endfor %}
            </div>
        {% endfor %}
        <button type="submit" class="btn btn-primary">Salvar</button>
        <a href="{% url 'atividades:atividade_academica_list' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}

```


File: .\atividades\templates\atividades\atividade_academica_list.html
```html
{% extends 'base.html' %}

{% block content %}
<h1>Lista de Atividades Acadêmicas</h1>

<form method="get" action="{% url 'atividades:atividade_academica_list' %}">
    <div class="input-group mb-3">
        <input type="text" class="form-control" name="search" placeholder="Pesquisar atividades..." value="{{ search_query }}">
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="submit">Pesquisar</button>
        </div>
    </div>
</form>

{% if atividades_academicas %}
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Descrição</th>
                <th>Data de Início</th>
                <th>Data de Fim</th>
                <th>Turma</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            {% for atividade in atividades_academicas %}
            <tr>
                <td>{{ atividade.nome }}</td>
                <td>{{ atividade.descricao|truncatewords:20 }}</td>
                <td>{{ atividade.data_inicio|date:"d/m/Y" }}</td>
                <td>{{ atividade.data_fim|date:"d/m/Y" }}</td>
                <td>{{ atividade.turma }}</td>
                <td>
                    <a href="{% url 'atividades:atividade_academica_detail' atividade.pk %}" class="btn btn-sm btn-info">Detalhes</a>
                    <a href="{% url 'atividades:atividade_academica_update' atividade.pk %}" class="btn btn-sm btn-primary">Editar</a>
                    <a href="{% url 'atividades:atividade_academica_delete' atividade.pk %}" class="btn btn-sm btn-danger">Excluir</a>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    {% if is_paginated %}
    <nav aria-label="Navegação de página">
        <ul class="pagination">
            {% if page_obj.has_previous %}
                <li class="page-item"><a class="page-link" href="?page=1{% if search_query %}&search={{ search_query }}{% endif %}">&laquo; Primeira</a></li>
                <li class="page-item"><a class="page-link" href="?page={{ page_obj.previous_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}">Anterior</a></li>
            {% endif %}

            {% for num in page_obj.paginator.page_range %}
                {% if page_obj.number == num %}
                    <li class="page-item active"><a class="page-link" href="#">{{ num }}</a></li>
                {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                    <li class="page-item"><a class="page-link" href="?page={{ num }}{% if search_query %}&search={{ search_query }}{% endif %}">{{ num }}</a></li>
                {% endif %}
            {% endfor %}

            {% if page_obj.has_next %}
                <li class="page-item"><a class="page-link" href="?page={{ page_obj.next_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}">Próxima</a></li>
                <li class="page-item"><a class="page-link" href="?page={{ page_obj.paginator.num_pages }}{% if search_query %}&search={{ search_query }}{% endif %}">Última &raquo;</a></li>
            {% endif %}
        </ul>
    </nav>
    {% endif %}
{% else %}
    <p>Nenhuma atividade acadêmica encontrada.</p>
{% endif %}

<a href="{% url 'atividades:atividade_academica_create' %}" class="btn btn-success">Adicionar Nova Atividade Acadêmica</a>
{% endblock %}

```


File: .\atividades\templates\atividades\atividade_ritualistica_form.html
```html
{% extends 'base.html' %}

{% block title %}{% if form.instance.pk %}Editar{% else %}Criar{% endif %} Atividade Ritualística{% endblock %}

{% block content %}
<div class="container mt-4">
  <h1 class="mb-4">{% if form.instance.pk %}Editar{% else %}Criar{% endif %} Atividade Ritualística</h1>

  <form method="post" class="needs-validation" novalidate>
    {% csrf_token %}

    {% for field in form %}
      <div class="mb-3">
        <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
        {{ field }}
        {% if field.help_text %}
          <small class="form-text text-muted">{{ field.help_text }}</small>
        {% endif %}
        {% for error in field.errors %}
          <div class="invalid-feedback">{{ error }}</div>
        {% endfor %}
      </div>
    {% endfor %}

    <div class="mt-4">
      <button type="submit" class="btn btn-primary">
        {% if form.instance.pk %}Atualizar{% else %}Criar{% endif %}
      </button>
      <a href="{% url 'atividades:atividade_ritualistica_list' %}" class="btn btn-secondary">Cancelar</a>
    </div>
  </form>
</div>

<script>
  // Bootstrap form validation
  (function () {
    'use strict'
    var forms = document.querySelectorAll('.needs-validation')
    Array.prototype.slice.call(forms)
      .forEach(function (form) {
        form.addEventListener('submit', function (event) {
          if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
          }
          form.classList.add('was-validated')
        }, false)
      })
  })()
</script>
{% endblock %}

```


File: .\atividades\templates\atividades\atividade_ritualistica_list.html
```html
{% extends 'base.html' %}

{% block title %}Atividades Ritualísticas{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Atividades Ritualísticas</h1>
        <a href="{% url 'atividades:atividade_ritualistica_create' %}" class="btn btn-primary">
            <i class="fas fa-plus"></i> Nova Atividade Ritualística
        </a>
    </div>

    {% if atividades_ritualisticas %}
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Nome</th>
                        <th>Turma</th>
                        <th>Data</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    {% for atividade in atividades_ritualisticas %}
                    <tr>
                        <td>{{ atividade.nome }}</td>
                        <td>{{ atividade.turma }}</td>
                        <td>{{ atividade.data_inicio }}</td>
                        <td>
                            <a href="{% url 'atividades:atividade_ritualistica_detail' atividade.codigo_atividade %}" class="btn btn-info btn-sm" title="Visualizar">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a href="{% url 'atividades:atividade_ritualistica_update' atividade.codigo_atividade %}" class="btn btn-warning btn-sm" title="Editar">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a href="{% url 'atividades:atividade_ritualistica_delete' atividade.codigo_atividade %}" class="btn btn-danger btn-sm" title="Excluir">
                                <i class="fas fa-trash"></i>
                            </a>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    {% else %}
        <div class="alert alert-info">
            Nenhuma atividade ritualística cadastrada.
        </div>
    {% endif %}
</div>
{% endblock %}

```


File: .\atividades\templates\atividades\cadastrar_turma.html
```html
{% extends "base.html" %}

{% block content %}
<h1>Cadastrar Turma</h1>
<!-- Your form and other content here -->
{% endblock %}

```


File: .\atividades\templates\atividades\criar_atividade_academemica.html
```html

```


File: .\atividades\templates\atividades\criar_atividade_ritualistica.html
```html
{% extends 'base.html' %}

{% block content %}
<h1>Criar Atividade Ritualística</h1>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Salvar</button>
</form>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var todosAlunosCheckbox = document.getElementById('id_todos_alunos');
        var alunosField = document.getElementById('id_alunos');

        function toggleAlunosField() {
            alunosField.disabled = todosAlunosCheckbox.checked;
        }

        todosAlunosCheckbox.addEventListener('change', toggleAlunosField);
        toggleAlunosField();
    });
</script>
{% endblock %}
```


File: .\atividades\templates\atividades\editar_atividade_academica.html
```html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-4">
    <h1>Editar Atividade Acadêmica</h1>
    <form method="post">
        {% csrf_token %}
        {% include 'includes/form_errors.html' %}
        {% for field in form %}
            {% include 'includes/form_field.html' %}
        {% endfor %}
        <button type="submit" class="btn btn-primary">Atualizar Atividade Acadêmica</button>
        <a href="{% url 'listar_atividades_academicas' %}" class="btn btn-secondary">Cancelar</a>
    </form>
</div>
{% endblock %}

```


File: .\atividades\templates\atividades\editar_atividade_ritualistica.html
```html
{% extends 'base.html' %}

{% block content %}
<h1>Editar Atividade Ritualística</h1>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Salvar</button>
</form>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var todosAlunosCheckbox = document.getElementById('id_todos_alunos');
        var alunosField = document.getElementById('id_alunos');

        function toggleAlunosField() {
            alunosField.disabled = todosAlunosCheckbox.checked;
        }

        todosAlunosCheckbox.addEventListener('change', toggleAlunosField);
        toggleAlunosField();
    });
</script>
{% endblock %}
```


File: .\atividades\templates\atividades\listar_atividades_ritualistica.html
```html

```


File: .\atividades\templates\atividades\listar_atividades_ritualisticas.html
```html
{% extends 'base.html' %}

{% block content %}
<h1>Atividades Ritualísticas</h1>
<a href="{% url 'atividades:atividade_ritualistica_create' %}">Criar Nova Atividade Ritualística</a>
<ul>{% for atividade in object_list %}<li>
    {{ atividade.nome }} - {{ atividade.turma }}
    <a href="{% url 'atividades:atividade_ritualistica_update' atividade.pk %}">Editar</a>
</li>{% empty %}<li>Nenhuma atividade ritualística encontrada.</li>{% endfor %}</ul>
{% endblock %}

```


File: .\atividades\tests\test_models.py
```py
from django.test import TestCase
from atividades.models import AtividadeAcademica

class AtividadeAcademicaModelTest(TestCase):
    def test_criar_atividade(self):
        atividade = AtividadeAcademica.objects.create(
            codigo_atividade='ATV001',
            nome='Aula de Matemática',
            descricao='Aula introdutória sobre álgebra.'
        )
        
        self.assertEqual(atividade.codigo_atividade, 'ATV001')
        self.assertEqual(atividade.nome, 'Aula de Matemática')
        self.assertEqual(atividade.descricao, 'Aula introdutória sobre álgebra.')

```


File: .\atividades\tests\test_views.py
```py
from django.test import TestCase, Client
from django.urls import reverse
from atividades.models import AtividadeAcademica

class AtividadeViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.atividade = AtividadeAcademica.objects.create(
            codigo_atividade='ATV001',
            nome='Aula de Matemática',
            descricao='Aula introdutória sobre álgebra.'
        )

    def test_listar_atividades(self):
        response = self.client.get(reverse('listar_atividades_academicas'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Aula de Matemática')
        self.assertContains(response, 'ATV001')

    def test_detalhe_atividade(self):
        response = self.client.get(reverse('detalhe_atividade', args=[self.atividade.codigo_atividade]))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, self.atividade.nome)
        self.assertContains(response, self.atividade.descricao)

```
