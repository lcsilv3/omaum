

File: .\atividades\admin.py
```py
from django.contrib import admin

# Register your models here.

```


File: .\atividades\apps.py
```py
from django.apps import AppConfig


class AtividadesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'atividades'

```


File: .\atividades\forms.py
```py
from django import forms
from .models import AtividadeAcademica, AtividadeRitualistica

class AtividadeAcademicaForm(forms.ModelForm):
    class Meta:
        model = AtividadeAcademica
        fields = ('nome', 'descricao', 'data', 'turma')

class AtividadeRitualisticaForm(forms.ModelForm):
    class Meta:
        model = AtividadeRitualistica
        fields = ('nome', 'descricao', 'data', 'alunos')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['alunos'].widget = forms.CheckboxSelectMultiple()
```


File: .\atividades\models.py
```py
from django.db import models
from turmas.models import Turma
from core.models import Aluno

class AtividadeAcademica(models.Model):
    nome = models.CharField(max_length=255, verbose_name="Nome")
    descricao = models.TextField(verbose_name="Descrição")
    turma = models.ForeignKey(Turma, on_delete=models.CASCADE, verbose_name="Turma")
    data_inicio = models.DateField(verbose_name="Data de Início")
    data_fim = models.DateField(verbose_name="Data de Fim")

    def __str__(self):
        return self.nome

    class Meta:
        verbose_name = "Atividade Acadêmica"
        verbose_name_plural = "Atividades Acadêmicas"
class AtividadeRitualistica(models.Model):
    nome = models.CharField(max_length=255, verbose_name="Nome")
    descricao = models.TextField(verbose_name="Descrição")
    turma = models.ForeignKey(Turma, on_delete=models.CASCADE, verbose_name="Turma")
    data_inicio = models.DateField(verbose_name="Data de Início")
    data_fim = models.DateField(verbose_name="Data de Fim")
    alunos = models.ManyToManyField(Aluno, blank=True, verbose_name="Alunos", related_name="atividades_ritualisticas")

    def __str__(self):
        return self.nome

    class Meta:
        verbose_name = "Atividade Ritualística"
        verbose_name_plural = "Atividades Ritualísticas"

```


File: .\atividades\tests.py
```py
from django.test import TestCase

# Create your tests here.

```


File: .\atividades\urls.py
```py
from django.urls import path
from . import views

app_name = 'atividades'

urlpatterns = [
    path('academicas/', views.AtividadeAcademicaListView.as_view(), name='atividade_academica_list'),
    path('ritualisticas/', views.AtividadeRitualisticaListView.as_view(), name='atividade_ritualistica_list'),
    path('academicas/criar/', views.atividade_academica_create, name='atividade_academica_create'),
    path('ritualisticas/criar/', views.atividade_ritualistica_create, name='atividade_ritualistica_create'),
    # Adicione outras URLs conforme necessário
]
```


File: .\atividades\views.py
```py
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.views.generic import ListView, CreateView, UpdateView, DeleteView, DetailView
from .models import AtividadeAcademica, AtividadeRitualistica
from .forms import AtividadeAcademicaForm, AtividadeRitualisticaForm

class AtividadeAcademicaListView(ListView):
    model = AtividadeAcademica
    template_name = 'atividades/atividade_academica_list.html'
    context_object_name = 'atividades_academicas'
    paginate_by = 10

class AtividadeRitualisticaListView(ListView):
    model = AtividadeRitualistica
    template_name = 'atividades/atividade_ritualistica_list.html'
    context_object_name = 'atividades_ritualisticas'
    paginate_by = 10

@login_required
def atividade_academica_create(request):
    if request.method == 'POST':
        form = AtividadeAcademicaForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('atividades:atividade_academica_list')
    else:
        form = AtividadeAcademicaForm()
    return render(request, 'atividades/atividade_academica_form.html', {'form': form})

@login_required
def atividade_ritualistica_create(request):
    if request.method == 'POST':
        form = AtividadeRitualisticaForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('atividades:atividade_ritualistica_list')
    else:
        form = AtividadeRitualisticaForm()
    return render(request, 'atividades/atividade_ritualistica_form.html', {'form': form})

# Adicione outras views conforme necessário (update, delete, detail)

```


File: .\atividades\__init__.py
```py

```


File: .\atividades\migrations\0001_initial.py
```py
# Generated by Django 5.1.7 on 2025-03-16 23:44

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '__first__'),
        ('turmas', '0002_curso_alter_turma_options_remove_turma_alunos_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AtividadeAcademica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, verbose_name='Nome')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('data_inicio', models.DateField(verbose_name='Data de Início')),
                ('data_fim', models.DateField(verbose_name='Data de Fim')),
                ('turma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turmas.turma', verbose_name='Turma')),
            ],
            options={
                'verbose_name': 'Atividade Acadêmica',
                'verbose_name_plural': 'Atividades Acadêmicas',
            },
        ),
        migrations.CreateModel(
            name='AtividadeRitualistica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255, verbose_name='Nome')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('data_inicio', models.DateField(verbose_name='Data de Início')),
                ('data_fim', models.DateField(verbose_name='Data de Fim')),
                ('alunos', models.ManyToManyField(blank=True, related_name='atividades_ritualisticas', to='core.aluno', verbose_name='Alunos')),
                ('turma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='turmas.turma', verbose_name='Turma')),
            ],
            options={
                'verbose_name': 'Atividade Ritualística',
                'verbose_name_plural': 'Atividades Ritualísticas',
            },
        ),
    ]

```


File: .\atividades\migrations\__init__.py
```py

```


File: .\atividades\templates\atividades\atividade_academica_form.html
```html
{% extends 'base.html' %}

{% block title %}{% if form.instance.pk %}Editar{% else %}Criar{% endif %} Atividade Acadêmica{% endblock %}

{% block content %}
<div class="container mt-4">
  <h1 class="mb-4">{% if form.instance.pk %}Editar{% else %}Criar{% endif %} Atividade Acadêmica</h1>

  <form method="post" class="needs-validation" novalidate>
    {% csrf_token %}

    {% for field in form %}
      <div class="mb-3">
        <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
        {{ field }}
        {% if field.help_text %}
          <small class="form-text text-muted">{{ field.help_text }}</small>
        {% endif %}
        {% for error in field.errors %}
          <div class="invalid-feedback">{{ error }}</div>
        {% endfor %}
      </div>
    {% endfor %}

    <div class="mt-4">
      <button type="submit" class="btn btn-primary">
        {% if form.instance.pk %}Atualizar{% else %}Criar{% endif %}
      </button>
      <a href="{% url 'atividades:atividade_academica_list' %}" class="btn btn-secondary">Cancelar</a>
    </div>
  </form>
</div>

<script>
  // Bootstrap form validation
  (function () {
    'use strict'
    var forms = document.querySelectorAll('.needs-validation')
    Array.prototype.slice.call(forms)
      .forEach(function (form) {
        form.addEventListener('submit', function (event) {
          if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
          }
          form.classList.add('was-validated')
        }, false)
      })
  })()
</script>
{% endblock %}

```


File: .\atividades\templates\atividades\atividade_academica_list.html
```html
{% extends 'base.html' %}

{% block title %}Atividades Acadêmicas{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Atividades Acadêmicas</h1>
        <a href="{% url 'atividades:atividade_academica_create' %}" class="btn btn-primary">
            <i class="fas fa-plus"></i> Nova Atividade Acadêmica
        </a>
    </div>

    {% if atividades_academicas %}
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Nome</th>
                        <th>Turma</th>
                        <th>Data Início</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    {% for atividade in atividades_academicas %}
                    <tr>
                        <td>{{ atividade.nome }}</td>
                        <td>{{ atividade.turma }}</td>
                        <td>{{ atividade.data_inicio }}</td>
                        <td>
                            <a href="{% url 'atividades:atividade_academica_detail' atividade.codigo_atividade %}" class="btn btn-info btn-sm" title="Visualizar">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a href="{% url 'atividades:atividade_academica_update' atividade.codigo_atividade %}" class="btn btn-warning btn-sm" title="Editar">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a href="{% url 'atividades:atividade_academica_delete' atividade.codigo_atividade %}" class="btn btn-danger btn-sm" title="Excluir">
                                <i class="fas fa-trash"></i>
                            </a>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    {% else %}
        <div class="alert alert-info">
            Nenhuma atividade acadêmica cadastrada.
        </div>
    {% endif %}
</div>
{% endblock %}

```


File: .\atividades\templates\atividades\atividade_ritualistica_form.html
```html
{% extends 'base.html' %}

{% block title %}{% if form.instance.pk %}Editar{% else %}Criar{% endif %} Atividade Ritualística{% endblock %}

{% block content %}
<div class="container mt-4">
  <h1 class="mb-4">{% if form.instance.pk %}Editar{% else %}Criar{% endif %} Atividade Ritualística</h1>

  <form method="post" class="needs-validation" novalidate>
    {% csrf_token %}

    {% for field in form %}
      <div class="mb-3">
        <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
        {{ field }}
        {% if field.help_text %}
          <small class="form-text text-muted">{{ field.help_text }}</small>
        {% endif %}
        {% for error in field.errors %}
          <div class="invalid-feedback">{{ error }}</div>
        {% endfor %}
      </div>
    {% endfor %}

    <div class="mt-4">
      <button type="submit" class="btn btn-primary">
        {% if form.instance.pk %}Atualizar{% else %}Criar{% endif %}
      </button>
      <a href="{% url 'atividades:atividade_ritualistica_list' %}" class="btn btn-secondary">Cancelar</a>
    </div>
  </form>
</div>

<script>
  // Bootstrap form validation
  (function () {
    'use strict'
    var forms = document.querySelectorAll('.needs-validation')
    Array.prototype.slice.call(forms)
      .forEach(function (form) {
        form.addEventListener('submit', function (event) {
          if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
          }
          form.classList.add('was-validated')
        }, false)
      })
  })()
</script>
{% endblock %}

```


File: .\atividades\templates\atividades\atividade_ritualistica_list.html
```html
{% extends 'base.html' %}

{% block title %}Atividades Ritualísticas{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Atividades Ritualísticas</h1>
        <a href="{% url 'atividades:atividade_ritualistica_create' %}" class="btn btn-primary">
            <i class="fas fa-plus"></i> Nova Atividade Ritualística
        </a>
    </div>

    {% if atividades_ritualisticas %}
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Nome</th>
                        <th>Turma</th>
                        <th>Data</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    {% for atividade in atividades_ritualisticas %}
                    <tr>
                        <td>{{ atividade.nome }}</td>
                        <td>{{ atividade.turma }}</td>
                        <td>{{ atividade.data_inicio }}</td>
                        <td>
                            <a href="{% url 'atividades:atividade_ritualistica_detail' atividade.codigo_atividade %}" class="btn btn-info btn-sm" title="Visualizar">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a href="{% url 'atividades:atividade_ritualistica_update' atividade.codigo_atividade %}" class="btn btn-warning btn-sm" title="Editar">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a href="{% url 'atividades:atividade_ritualistica_delete' atividade.codigo_atividade %}" class="btn btn-danger btn-sm" title="Excluir">
                                <i class="fas fa-trash"></i>
                            </a>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    {% else %}
        <div class="alert alert-info">
            Nenhuma atividade ritualística cadastrada.
        </div>
    {% endif %}
</div>
{% endblock %}

```


File: .\atividades\templates\atividades\cadastrar_turma.html
```html
{% extends "base.html" %}

{% block content %}
<h1>Cadastrar Turma</h1>
<!-- Your form and other content here -->
{% endblock %}

```


File: .\atividades\tests\test_models.py
```py
from django.test import TestCase
from atividades.models import AtividadeAcademica

class AtividadeAcademicaModelTest(TestCase):
    def test_criar_atividade(self):
        atividade = AtividadeAcademica.objects.create(
            codigo_atividade='ATV001',
            nome='Aula de Matemática',
            descricao='Aula introdutória sobre álgebra.'
        )
        
        self.assertEqual(atividade.codigo_atividade, 'ATV001')
        self.assertEqual(atividade.nome, 'Aula de Matemática')
        self.assertEqual(atividade.descricao, 'Aula introdutória sobre álgebra.')

```


File: .\atividades\tests\test_views.py
```py
from django.test import TestCase, Client
from django.urls import reverse
from atividades.models import AtividadeAcademica

class AtividadeViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.atividade = AtividadeAcademica.objects.create(
            codigo_atividade='ATV001',
            nome='Aula de Matemática',
            descricao='Aula introdutória sobre álgebra.'
        )

    def test_listar_atividades(self):
        response = self.client.get(reverse('listar_atividades_academicas'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Aula de Matemática')
        self.assertContains(response, 'ATV001')

    def test_detalhe_atividade(self):
        response = self.client.get(reverse('detalhe_atividade', args=[self.atividade.codigo_atividade]))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, self.atividade.nome)
        self.assertContains(response, self.atividade.descricao)

```
