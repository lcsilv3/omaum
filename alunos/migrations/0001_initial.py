# Generated by Django 5.2.5 on 2025-09-05 09:44

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Cidade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nome",
                    models.CharField(max_length=100, verbose_name="Nome da Cidade"),
                ),
                (
                    "codigo_ibge",
                    models.CharField(
                        blank=True,
                        help_text="Código IBGE da cidade",
                        max_length=7,
                        null=True,
                        unique=True,
                        verbose_name="Código IBGE",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cidade",
                "verbose_name_plural": "Cidades",
                "ordering": ["nome"],
            },
        ),
        migrations.CreateModel(
            name="Codigo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nome",
                    models.CharField(max_length=100, unique=True, verbose_name="Nome"),
                ),
                (
                    "descricao",
                    models.TextField(blank=True, null=True, verbose_name="Descrição"),
                ),
            ],
            options={
                "verbose_name": "Código",
                "verbose_name_plural": "Códigos",
                "ordering": ["tipo_codigo__nome", "nome"],
            },
        ),
        migrations.CreateModel(
            name="TipoCodigo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nome",
                    models.CharField(max_length=50, unique=True, verbose_name="Nome"),
                ),
                (
                    "descricao",
                    models.TextField(blank=True, null=True, verbose_name="Descrição"),
                ),
            ],
            options={
                "verbose_name": "Tipo de Código",
                "verbose_name_plural": "Tipos de Códigos",
                "ordering": ["nome"],
            },
        ),
        migrations.CreateModel(
            name="Bairro",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nome",
                    models.CharField(max_length=100, verbose_name="Nome do Bairro"),
                ),
                (
                    "codigo_externo",
                    models.CharField(
                        blank=True,
                        max_length=30,
                        null=True,
                        verbose_name="Código Externo",
                    ),
                ),
                (
                    "cidade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bairros",
                        to="alunos.cidade",
                        verbose_name="Cidade",
                    ),
                ),
            ],
            options={
                "verbose_name": "Bairro",
                "verbose_name_plural": "Bairros",
                "ordering": ["nome"],
            },
        ),
        migrations.CreateModel(
            name="Estado",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        help_text="Sigla do estado (ex: SP, RJ, MG)",
                        max_length=2,
                        unique=True,
                        verbose_name="Sigla",
                    ),
                ),
                (
                    "nome",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Nome do Estado"
                    ),
                ),
                (
                    "regiao",
                    models.CharField(
                        choices=[
                            ("Norte", "Norte"),
                            ("Nordeste", "Nordeste"),
                            ("Centro-Oeste", "Centro-Oeste"),
                            ("Sudeste", "Sudeste"),
                            ("Sul", "Sul"),
                        ],
                        max_length=20,
                        verbose_name="Região",
                    ),
                ),
            ],
            options={
                "verbose_name": "Estado",
                "verbose_name_plural": "Estados",
                "ordering": ["nome"],
                "indexes": [
                    models.Index(fields=["nome"], name="alunos_esta_nome_2eed62_idx"),
                    models.Index(
                        fields=["codigo"], name="alunos_esta_codigo_c7eaf3_idx"
                    ),
                    models.Index(
                        fields=["regiao"], name="alunos_esta_regiao_ad46fa_idx"
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="cidade",
            name="estado",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cidades",
                to="alunos.estado",
                verbose_name="Estado",
            ),
        ),
        migrations.CreateModel(
            name="Pais",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        help_text="Código ISO do país (ex: BRA, ARG, USA)",
                        max_length=3,
                        unique=True,
                        verbose_name="Código ISO",
                    ),
                ),
                (
                    "nome",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Nome do País"
                    ),
                ),
                (
                    "nacionalidade",
                    models.CharField(
                        help_text="Gentílico (ex: brasileiro, argentino, americano)",
                        max_length=100,
                        verbose_name="Nacionalidade",
                    ),
                ),
                ("ativo", models.BooleanField(default=True, verbose_name="Ativo")),
            ],
            options={
                "verbose_name": "País",
                "verbose_name_plural": "Países",
                "ordering": ["nome"],
                "indexes": [
                    models.Index(fields=["nome"], name="alunos_pais_nome_adb5e1_idx"),
                    models.Index(
                        fields=["nacionalidade"], name="alunos_pais_naciona_95a98f_idx"
                    ),
                    models.Index(fields=["ativo"], name="alunos_pais_ativo_1bfd69_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Aluno",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        db_index=True,
                        max_length=11,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CPF deve conter 11 dígitos numéricos",
                                regex="^\\d{11}$",
                            )
                        ],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "nome",
                    models.CharField(max_length=100, verbose_name="Nome Completo"),
                ),
                (
                    "data_nascimento",
                    models.DateField(verbose_name="Data de Nascimento"),
                ),
                (
                    "hora_nascimento",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Hora de Nascimento"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="E-mail"
                    ),
                ),
                (
                    "foto",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="alunos/fotos/",
                        verbose_name="Foto",
                    ),
                ),
                (
                    "sexo",
                    models.CharField(
                        choices=[("M", "Masculino"), ("F", "Feminino"), ("O", "Outro")],
                        default="M",
                        max_length=1,
                        verbose_name="Sexo",
                    ),
                ),
                (
                    "situacao",
                    models.CharField(
                        choices=[
                            ("ATIVO", "Ativo"),
                            ("AFASTADO", "Afastado"),
                            ("ESPECIAIS", "Especiais"),
                            ("EXCLUIDO", "Excluído"),
                            ("FALECIDO", "Falecido"),
                            ("LOI", "LOI"),
                        ],
                        default="ATIVO",
                        max_length=10,
                        verbose_name="Situação",
                    ),
                ),
                (
                    "numero_iniciatico",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        unique=True,
                        verbose_name="Número Iniciático",
                    ),
                ),
                (
                    "nome_iniciatico",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Nome Iniciático",
                    ),
                ),
                (
                    "rua",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="Rua"
                    ),
                ),
                (
                    "numero_imovel",
                    models.CharField(
                        blank=True, max_length=10, null=True, verbose_name="Número"
                    ),
                ),
                (
                    "complemento",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="Complemento"
                    ),
                ),
                (
                    "cep",
                    models.CharField(
                        blank=True, max_length=8, null=True, verbose_name="CEP"
                    ),
                ),
                (
                    "nome_primeiro_contato",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Nome do 1º Contato",
                    ),
                ),
                (
                    "celular_primeiro_contato",
                    models.CharField(
                        blank=True,
                        max_length=11,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de celular inválido",
                                regex="^\\d{10,11}$",
                            )
                        ],
                        verbose_name="Celular do 1º Contato",
                    ),
                ),
                (
                    "tipo_relacionamento_primeiro_contato",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Relacionamento com 1º Contato",
                    ),
                ),
                (
                    "nome_segundo_contato",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Nome do 2º Contato",
                    ),
                ),
                (
                    "celular_segundo_contato",
                    models.CharField(
                        blank=True,
                        max_length=11,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de celular inválido",
                                regex="^\\d{10,11}$",
                            )
                        ],
                        verbose_name="Celular do 2º Contato",
                    ),
                ),
                (
                    "tipo_relacionamento_segundo_contato",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Relacionamento com 2º Contato",
                    ),
                ),
                (
                    "estado_civil",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Estado Civil",
                    ),
                ),
                (
                    "profissao",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Profissão"
                    ),
                ),
                ("ativo", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "tipo_sanguineo",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A+", "A+"),
                            ("A-", "A-"),
                            ("B+", "B+"),
                            ("B-", "B-"),
                            ("AB+", "AB+"),
                            ("AB-", "AB-"),
                            ("O+", "O+"),
                            ("O-", "O-"),
                        ],
                        max_length=4,
                        null=True,
                        verbose_name="Tipo Sanguíneo",
                    ),
                ),
                (
                    "alergias",
                    models.TextField(blank=True, null=True, verbose_name="Alergias"),
                ),
                (
                    "condicoes_medicas_gerais",
                    models.TextField(
                        blank=True, null=True, verbose_name="Condições Médicas Gerais"
                    ),
                ),
                (
                    "convenio_medico",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Convênio Médico",
                    ),
                ),
                (
                    "hospital",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Hospital de Preferência",
                    ),
                ),
                (
                    "grau_atual",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="Grau Atual"
                    ),
                ),
                (
                    "situacao_iniciatica",
                    models.CharField(
                        choices=[
                            ("ATIVO", "Ativo"),
                            ("AFASTADO", "Afastado"),
                            ("ESPECIAIS", "Especiais"),
                            ("EXCLUIDO", "Excluído"),
                            ("FALECIDO", "Falecido"),
                            ("LOI", "LOI"),
                        ],
                        default="ATIVO",
                        max_length=20,
                        verbose_name="Situação Iniciática",
                    ),
                ),
                (
                    "historico_iniciatico",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Histórico de eventos, cargos e registros iniciáticos",
                        verbose_name="Histórico Iniciático",
                    ),
                ),
                (
                    "historico_checksum",
                    models.CharField(
                        blank=True,
                        help_text="SHA256 do JSON normalizado do histórico iniciático para verificação de integridade.",
                        max_length=64,
                        null=True,
                        verbose_name="Checksum Histórico",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Criado em"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                (
                    "bairro_ref",
                    models.ForeignKey(
                        blank=True,
                        help_text="Referência normalizada do bairro (mantém campo texto para compatibilidade)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="alunos_bairro",
                        to="alunos.bairro",
                        verbose_name="Bairro (Ref)",
                    ),
                ),
                (
                    "cidade_naturalidade",
                    models.ForeignKey(
                        blank=True,
                        help_text="Cidade onde o aluno nasceu",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="naturais",
                        to="alunos.cidade",
                        verbose_name="Cidade de Naturalidade",
                    ),
                ),
                (
                    "cidade_ref",
                    models.ForeignKey(
                        blank=True,
                        help_text="Referência normalizada da cidade (mantém campo texto para compatibilidade)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="alunos_cidade",
                        to="alunos.cidade",
                        verbose_name="Cidade (Ref)",
                    ),
                ),
                (
                    "pais_nacionalidade",
                    models.ForeignKey(
                        blank=True,
                        help_text="País que define a nacionalidade do aluno",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="nacionais",
                        to="alunos.pais",
                        verbose_name="País de Nacionalidade",
                    ),
                ),
            ],
            options={
                "verbose_name": "Aluno",
                "verbose_name_plural": "Alunos",
                "ordering": ["nome"],
            },
        ),
        migrations.CreateModel(
            name="RegistroHistorico",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ordem_servico",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Ordem de Serviço",
                    ),
                ),
                ("data_os", models.DateField(verbose_name="Data da Ordem de Serviço")),
                (
                    "numero_iniciatico",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        verbose_name="Número Iniciático",
                    ),
                ),
                (
                    "nome_iniciatico",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Nome Iniciático",
                    ),
                ),
                (
                    "observacoes",
                    models.TextField(blank=True, null=True, verbose_name="Observações"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Data do Registro"
                    ),
                ),
                ("ativo", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "aluno",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historico",
                        to="alunos.aluno",
                        verbose_name="Aluno",
                    ),
                ),
                (
                    "codigo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="registros",
                        to="alunos.codigo",
                        verbose_name="Código",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro Histórico",
                "verbose_name_plural": "Registros Históricos",
                "ordering": ["-data_os", "-created_at"],
            },
        ),
        migrations.AddField(
            model_name="codigo",
            name="tipo_codigo",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="codigos",
                to="alunos.tipocodigo",
                verbose_name="Tipo de Código",
            ),
        ),
        migrations.AddIndex(
            model_name="bairro",
            index=models.Index(fields=["nome"], name="alunos_bair_nome_3317e8_idx"),
        ),
        migrations.AddIndex(
            model_name="bairro",
            index=models.Index(
                fields=["cidade"], name="alunos_bair_cidade__57f68d_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="bairro",
            unique_together={("nome", "cidade")},
        ),
        migrations.AddIndex(
            model_name="cidade",
            index=models.Index(fields=["nome"], name="alunos_cida_nome_f4fc7f_idx"),
        ),
        migrations.AddIndex(
            model_name="cidade",
            index=models.Index(
                fields=["estado"], name="alunos_cida_estado__88a3c4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cidade",
            index=models.Index(
                fields=["codigo_ibge"], name="alunos_cida_codigo__39b0aa_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="cidade",
            unique_together={("nome", "estado")},
        ),
        migrations.AddIndex(
            model_name="aluno",
            index=models.Index(fields=["email"], name="alunos_alun_email_9690b2_idx"),
        ),
        migrations.AddIndex(
            model_name="aluno",
            index=models.Index(
                fields=["numero_iniciatico"], name="alunos_alun_numero__412a09_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aluno",
            index=models.Index(
                fields=["situacao"], name="alunos_alun_situaca_d6babc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aluno",
            index=models.Index(fields=["ativo"], name="alunos_alun_ativo_26ee3e_idx"),
        ),
        migrations.AddIndex(
            model_name="aluno",
            index=models.Index(
                fields=["pais_nacionalidade"], name="alunos_alun_pais_na_408f04_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aluno",
            index=models.Index(
                fields=["cidade_naturalidade"], name="alunos_alun_cidade__0313e8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aluno",
            index=models.Index(fields=["nome"], name="alunos_alun_nome_6c76a2_idx"),
        ),
        migrations.AddIndex(
            model_name="aluno",
            index=models.Index(fields=["cidade_ref"], name="aluno_cidade_ref_idx"),
        ),
        migrations.AddIndex(
            model_name="aluno",
            index=models.Index(fields=["bairro_ref"], name="aluno_bairro_ref_idx"),
        ),
        migrations.AddIndex(
            model_name="registrohistorico",
            index=models.Index(
                fields=["aluno", "-data_os"], name="rh_aluno_dataos_desc"
            ),
        ),
        migrations.AddIndex(
            model_name="registrohistorico",
            index=models.Index(fields=["codigo"], name="rh_codigo_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="registrohistorico",
            unique_together={("aluno", "codigo", "ordem_servico")},
        ),
    ]
