# Generated by Django 5.2.2 on 2025-07-03 18:34

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Aluno',
            fields=[
                (
                    'cpf',
                    models.CharField(
                        max_length=11,
                        primary_key=True,
                        serialize=False,
                        validators=[
                            django.core.validators.RegexValidator(
                                message='CPF deve conter 11 dígitos numéricos',
                                regex='^\\d{11}$',
                            )
                        ],
                        verbose_name='CPF',
                    ),
                ),
                (
                    'nome',
                    models.CharField(max_length=100, verbose_name='Nome Completo'),
                ),
                (
                    'data_nascimento',
                    models.DateField(verbose_name='Data de Nascimento'),
                ),
                (
                    'hora_nascimento',
                    models.TimeField(
                        blank=True, null=True, verbose_name='Hora de Nascimento'
                    ),
                ),
                (
                    'email',
                    models.EmailField(
                        max_length=254, unique=True, verbose_name='E-mail'
                    ),
                ),
                (
                    'foto',
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to='alunos/fotos/',
                        verbose_name='Foto',
                    ),
                ),
                (
                    'sexo',
                    models.CharField(
                        choices=[('M', 'Masculino'), ('F', 'Feminino'), ('O', 'Outro')],
                        default='M',
                        max_length=1,
                        verbose_name='Sexo',
                    ),
                ),
                (
                    'situacao',
                    models.CharField(
                        choices=[
                            ('ATIVO', 'Ativo'),
                            ('AFASTADO', 'Afastado'),
                            ('ESPECIAIS', 'Especiais'),
                            ('EXCLUIDO', 'Excluído'),
                            ('FALECIDO', 'Falecido'),
                            ('LOI', 'LOI'),
                        ],
                        default='ATIVO',
                        max_length=10,
                        verbose_name='Situação',
                    ),
                ),
                (
                    'nacionalidade',
                    models.CharField(
                        default='Brasileira',
                        max_length=50,
                        verbose_name='Nacionalidade',
                    ),
                ),
                (
                    'naturalidade',
                    models.CharField(max_length=50, verbose_name='Naturalidade'),
                ),
                (
                    'rua',
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name='Rua'
                    ),
                ),
                (
                    'numero_imovel',
                    models.CharField(
                        blank=True, max_length=10, null=True, verbose_name='Número'
                    ),
                ),
                (
                    'complemento',
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name='Complemento'
                    ),
                ),
                (
                    'bairro',
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name='Bairro'
                    ),
                ),
                (
                    'cidade',
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name='Cidade'
                    ),
                ),
                (
                    'estado',
                    models.CharField(
                        blank=True, max_length=2, null=True, verbose_name='Estado'
                    ),
                ),
                (
                    'cep',
                    models.CharField(
                        blank=True, max_length=8, null=True, verbose_name='CEP'
                    ),
                ),
                (
                    'nome_primeiro_contato',
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name='Nome do 1º Contato',
                    ),
                ),
                (
                    'celular_primeiro_contato',
                    models.CharField(
                        blank=True,
                        max_length=11,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message='Número de celular inválido',
                                regex='^\\d{10,11}$',
                            )
                        ],
                        verbose_name='Celular do 1º Contato',
                    ),
                ),
                (
                    'tipo_relacionamento_primeiro_contato',
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name='Relacionamento com 1º Contato',
                    ),
                ),
                (
                    'nome_segundo_contato',
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name='Nome do 2º Contato',
                    ),
                ),
                (
                    'celular_segundo_contato',
                    models.CharField(
                        blank=True,
                        max_length=11,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message='Número de celular inválido',
                                regex='^\\d{10,11}$',
                            )
                        ],
                        verbose_name='Celular do 2º Contato',
                    ),
                ),
                (
                    'tipo_relacionamento_segundo_contato',
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name='Relacionamento com 2º Contato',
                    ),
                ),
                (
                    'estado_civil',
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name='Estado Civil',
                    ),
                ),
                (
                    'profissao',
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name='Profissão'
                    ),
                ),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                (
                    'tipo_sanguineo',
                    models.CharField(
                        blank=True,
                        max_length=3,
                        null=True,
                        verbose_name='Tipo Sanguíneo',
                    ),
                ),
                (
                    'fator_rh',
                    models.CharField(
                        blank=True,
                        choices=[('+', 'Positivo'), ('-', 'Negativo')],
                        max_length=1,
                        null=True,
                        verbose_name='Fator RH',
                    ),
                ),
                (
                    'alergias',
                    models.TextField(blank=True, null=True, verbose_name='Alergias'),
                ),
                (
                    'condicoes_medicas_gerais',
                    models.TextField(
                        blank=True, null=True, verbose_name='Condições Médicas Gerais'
                    ),
                ),
                (
                    'convenio_medico',
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name='Convênio Médico',
                    ),
                ),
                (
                    'hospital',
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name='Hospital de Preferência',
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name='Criado em'
                    ),
                ),
                (
                    'updated_at',
                    models.DateTimeField(auto_now=True, verbose_name='Atualizado em'),
                ),
            ],
        ),
        migrations.CreateModel(
            name='TipoCodigo',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'nome',
                    models.CharField(max_length=50, unique=True, verbose_name='Nome'),
                ),
                (
                    'descricao',
                    models.TextField(blank=True, null=True, verbose_name='Descrição'),
                ),
            ],
            options={
                'verbose_name': 'Tipo de Código',
                'verbose_name_plural': 'Tipos de Códigos',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Codigo',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'nome',
                    models.CharField(max_length=100, unique=True, verbose_name='Nome'),
                ),
                (
                    'descricao',
                    models.TextField(blank=True, null=True, verbose_name='Descrição'),
                ),
                (
                    'tipo_codigo',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='alunos.tipocodigo',
                        verbose_name='Tipo de Código',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Código',
                'verbose_name_plural': 'Códigos',
                'ordering': ['tipo_codigo__nome', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='RegistroHistorico',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'ordem_servico',
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name='Ordem de Serviço',
                    ),
                ),
                ('data_os', models.DateField(verbose_name='Data da Ordem de Serviço')),
                (
                    'observacoes',
                    models.TextField(blank=True, null=True, verbose_name='Observações'),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True, verbose_name='Data do Registro'
                    ),
                ),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                (
                    'aluno',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='historico',
                        to='alunos.aluno',
                        verbose_name='Aluno',
                    ),
                ),
                (
                    'codigo',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='registros',
                        to='alunos.codigo',
                        verbose_name='Código',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Registro Histórico',
                'verbose_name_plural': 'Registros Históricos',
                'ordering': ['-data_os', '-created_at'],
                'unique_together': {('aluno', 'codigo', 'ordem_servico')},
            },
        ),
    ]
